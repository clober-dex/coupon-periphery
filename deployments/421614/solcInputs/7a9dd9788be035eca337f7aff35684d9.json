{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165, ERC165} from \"../../../utils/introspection/ERC165.sol\";\nimport {IERC1155Receiver} from \"../IERC1155Receiver.sol\";\n\n/**\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n */\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Nonces.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/AaveTokenSubstitute.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IWETH9} from \"./external/weth/IWETH9.sol\";\nimport {IAToken} from \"./external/aave-v3/IAToken.sol\";\nimport {IPool} from \"./external/aave-v3/IPool.sol\";\nimport {DataTypes} from \"./external/aave-v3/DataTypes.sol\";\nimport {ReserveConfiguration} from \"./external/aave-v3/ReserveConfiguration.sol\";\nimport {IAaveTokenSubstitute} from \"./interfaces/IAaveTokenSubstitute.sol\";\nimport {WadRayMath} from \"./libraries/WadRayMath.sol\";\n\ncontract AaveTokenSubstitute is IAaveTokenSubstitute, ERC20Permit, Ownable2Step {\n    using WadRayMath for uint256;\n    using SafeERC20 for IERC20;\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\n    uint256 public constant SUPPLY_BUFFER = 10 ** 24; // 0.1%\n\n    IWETH9 private immutable _weth;\n    IPool private immutable _aaveV3Pool;\n    uint8 private immutable _decimals;\n    address public immutable override aToken;\n    address public immutable override underlyingToken;\n\n    address public override treasury;\n\n    constructor(address weth_, address asset_, address aaveV3Pool_, address treasury_, address owner_)\n        ERC20Permit(string.concat(\"Wrapped Aave \", IERC20Metadata(asset_).name()))\n        ERC20(\n            string.concat(\"Wrapped Aave \", IERC20Metadata(asset_).name()),\n            string.concat(\"Wa\", IERC20Metadata(asset_).symbol())\n        )\n        Ownable(owner_)\n    {\n        _weth = IWETH9(weth_);\n        _aaveV3Pool = IPool(aaveV3Pool_);\n        aToken = _aaveV3Pool.getReserveData(asset_).aTokenAddress;\n        _decimals = IERC20Metadata(asset_).decimals();\n        underlyingToken = asset_;\n        treasury = treasury_;\n        emit SetTreasury(treasury_);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function mintByAToken(uint256 amount, address to) external {\n        IERC20(aToken).safeTransferFrom(msg.sender, address(this), amount);\n        _mint(to, amount);\n    }\n\n    function mint(uint256 amount, address to) external {\n        IERC20(underlyingToken).safeTransferFrom(msg.sender, address(this), amount);\n        uint256 supplyAmount = IERC20(underlyingToken).balanceOf(address(this));\n        DataTypes.ReserveConfigurationMap memory configuration =\n            _aaveV3Pool.getReserveData(underlyingToken).configuration;\n\n        DataTypes.ReserveData memory reserveData = _aaveV3Pool.getReserveData(underlyingToken);\n        uint256 supplyCap = configuration.getSupplyCap();\n        if (supplyCap == 0) {\n            supplyCap = type(uint256).max;\n        } else {\n            uint256 existingSupply = (IAToken(aToken).scaledTotalSupply() + uint256(reserveData.accruedToTreasury))\n                .rayMul(reserveData.liquidityIndex + SUPPLY_BUFFER);\n            supplyCap *= 10 ** IERC20Metadata(underlyingToken).decimals();\n            unchecked {\n                supplyCap = supplyCap <= existingSupply ? 0 : supplyCap - existingSupply;\n            }\n        }\n\n        _mint(to, amount);\n        if (!configuration.getActive() || configuration.getPaused()) {\n            return;\n        } else if (supplyAmount > supplyCap) {\n            supplyAmount = supplyCap;\n        }\n        IERC20(underlyingToken).approve(address(_aaveV3Pool), supplyAmount);\n        try _aaveV3Pool.supply(underlyingToken, supplyAmount, address(this), 0) {} catch {}\n    }\n\n    function mintableAmount() external pure returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function burnToAToken(uint256 amount, address to) external {\n        _burn(msg.sender, amount);\n        IERC20(aToken).safeTransfer(address(to), amount);\n    }\n\n    function burn(uint256 amount, address to) external {\n        unchecked {\n            _burn(msg.sender, amount);\n\n            uint256 underlyingAmount = IERC20(underlyingToken).balanceOf(address(this));\n            DataTypes.ReserveConfigurationMap memory configuration =\n                _aaveV3Pool.getReserveData(underlyingToken).configuration;\n\n            if (amount <= underlyingAmount) {\n                underlyingAmount = amount;\n            } else if (configuration.getActive() && !configuration.getPaused()) {\n                uint256 withdrawableAmount = IERC20(underlyingToken).balanceOf(aToken);\n                if (withdrawableAmount + underlyingAmount < amount) {\n                    if (withdrawableAmount > 0) {\n                        _aaveV3Pool.withdraw(underlyingToken, withdrawableAmount, address(this));\n                        underlyingAmount += withdrawableAmount;\n                    }\n                } else {\n                    _aaveV3Pool.withdraw(underlyingToken, amount - underlyingAmount, address(this));\n                    underlyingAmount = amount;\n                }\n            }\n\n            if (underlyingAmount > 0) {\n                if (underlyingToken == address(_weth)) {\n                    _weth.withdraw(underlyingAmount);\n                    (bool success,) = payable(to).call{value: amount}(\"\");\n                    if (!success) revert ValueTransferFailed();\n                } else {\n                    IERC20(underlyingToken).safeTransfer(address(to), underlyingAmount);\n                }\n                amount -= underlyingAmount;\n            }\n\n            if (amount > 0) {\n                IERC20(aToken).safeTransfer(address(to), amount);\n            }\n        }\n    }\n\n    function burnableAmount() external pure returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function setTreasury(address newTreasury) external onlyOwner {\n        treasury = newTreasury;\n        emit SetTreasury(newTreasury);\n    }\n\n    function claim() external {\n        uint256 adminYield = IERC20(aToken).balanceOf(address(this)) - totalSupply() - 1;\n        if (adminYield > 0) {\n            IERC20(aToken).safeTransfer(treasury, adminYield);\n            emit Claim(treasury, adminYield);\n        }\n    }\n\n    function withdrawLostToken(address token, address recipient) external onlyOwner {\n        if (token == aToken || token == underlyingToken) {\n            revert InvalidToken();\n        }\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        if (balance > 0) {\n            IERC20(token).safeTransfer(recipient, balance);\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/BorrowController.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IBorrowController} from \"./interfaces/IBorrowController.sol\";\nimport {ILoanPositionManager} from \"./interfaces/ILoanPositionManager.sol\";\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {SubstituteLibrary} from \"./libraries/Substitute.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {LoanPosition} from \"./libraries/LoanPosition.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\nimport {Controller} from \"./libraries/Controller.sol\";\nimport {ERC20PermitParams, PermitSignature, PermitParamsLibrary} from \"./libraries/PermitParams.sol\";\n\ncontract BorrowController is IBorrowController, Controller, IPositionLocker {\n    using PermitParamsLibrary for *;\n    using EpochLibrary for Epoch;\n    using SubstituteLibrary for ISubstitute;\n\n    ILoanPositionManager private immutable _loanPositionManager;\n    address private immutable _router;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_loanPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberMarketFactory,\n        address couponManager,\n        address weth,\n        address loanPositionManager,\n        address router\n    ) Controller(wrapped1155Factory, cloberMarketFactory, couponManager, weth) {\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\n        _router = router;\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\n        if (msg.sender != address(_loanPositionManager)) revert InvalidAccess();\n\n        uint256 positionId;\n        address user;\n        SwapParams memory swapParams;\n        (positionId, user, swapParams, data) = abi.decode(data, (uint256, address, SwapParams, bytes));\n        if (positionId == 0) {\n            address collateralToken;\n            address debtToken;\n            (collateralToken, debtToken, data) = abi.decode(data, (address, address, bytes));\n            positionId = _loanPositionManager.mint(collateralToken, debtToken);\n            result = abi.encode(positionId);\n        }\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n\n        int256 interestThreshold;\n        (position.collateralAmount, position.debtAmount, position.expiredWith, interestThreshold) =\n            abi.decode(data, (uint256, uint256, Epoch, int256));\n\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta) =\n        _loanPositionManager.adjustPosition(\n            positionId, position.collateralAmount, position.debtAmount, position.expiredWith\n        );\n        if (collateralDelta < 0) {\n            _loanPositionManager.withdrawToken(position.collateralToken, address(this), uint256(-collateralDelta));\n        }\n        if (debtDelta > 0) _loanPositionManager.withdrawToken(position.debtToken, address(this), uint256(debtDelta));\n        if (couponsToMint.length > 0) {\n            _loanPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n            _wrapCoupons(couponsToMint);\n        }\n\n        if (swapParams.inSubstitute == position.collateralToken) {\n            _swap(position.collateralToken, position.debtToken, swapParams.amount, swapParams.data);\n        } else if (swapParams.inSubstitute == position.debtToken) {\n            _swap(position.debtToken, position.collateralToken, swapParams.amount, swapParams.data);\n        }\n\n        _executeCouponTrade(\n            user,\n            position.debtToken,\n            couponsToMint,\n            couponsToBurn,\n            debtDelta < 0 ? uint256(-debtDelta) : 0,\n            interestThreshold\n        );\n\n        if (collateralDelta > 0) {\n            _mintSubstituteAll(position.collateralToken, user, uint256(collateralDelta));\n            IERC20(position.collateralToken).approve(address(_loanPositionManager), uint256(collateralDelta));\n            _loanPositionManager.depositToken(position.collateralToken, uint256(collateralDelta));\n        }\n        if (debtDelta < 0) {\n            IERC20(position.debtToken).approve(address(_loanPositionManager), uint256(-debtDelta));\n            _loanPositionManager.depositToken(position.debtToken, uint256(-debtDelta));\n        }\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _loanPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _loanPositionManager.settlePosition(positionId);\n    }\n\n    function borrow(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 maxPayInterest,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable nonReentrant wrapAndRefundETH returns (uint256 positionId) {\n        collateralPermitParams.tryPermit(_getUnderlyingToken(collateralToken), msg.sender, address(this));\n\n        bytes memory lockData = abi.encode(collateralAmount, debtAmount, expiredWith, maxPayInterest);\n        lockData = abi.encode(0, msg.sender, swapParams, abi.encode(collateralToken, debtToken, lockData));\n        bytes memory result = _loanPositionManager.lock(lockData);\n        positionId = abi.decode(result, (uint256));\n\n        ISubstitute(collateralToken).burnAll(msg.sender);\n        ISubstitute(debtToken).burnAll(msg.sender);\n        _loanPositionManager.transferFrom(address(this), msg.sender, positionId);\n    }\n\n    function adjust(\n        uint256 positionId,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 interestThreshold,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable nonReentrant wrapAndRefundETH onlyPositionOwner(positionId) {\n        positionPermitParams.tryPermit(_loanPositionManager, positionId, address(this));\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        collateralPermitParams.tryPermit(_getUnderlyingToken(position.collateralToken), msg.sender, address(this));\n        debtPermitParams.tryPermit(_getUnderlyingToken(position.debtToken), msg.sender, address(this));\n\n        position.collateralAmount = collateralAmount;\n        position.debtAmount = debtAmount;\n        position.expiredWith = expiredWith;\n\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, interestThreshold, swapParams));\n\n        ISubstitute(position.collateralToken).burnAll(msg.sender);\n        ISubstitute(position.debtToken).burnAll(msg.sender);\n    }\n\n    function _swap(address inSubstitute, address outSubstitute, uint256 inAmount, bytes memory swapParams)\n        internal\n        returns (uint256 outAmount)\n    {\n        address inToken = ISubstitute(inSubstitute).underlyingToken();\n        address outToken = ISubstitute(outSubstitute).underlyingToken();\n\n        ISubstitute(inSubstitute).burn(inAmount, address(this));\n        if (inToken == address(_weth)) _weth.deposit{value: inAmount}();\n        IERC20(inToken).approve(_router, inAmount);\n        (bool success, bytes memory result) = _router.call(swapParams);\n        if (!success) revert CollateralSwapFailed(string(result));\n        IERC20(inToken).approve(_router, 0);\n\n        outAmount = IERC20(outToken).balanceOf(address(this));\n\n        IERC20(outToken).approve(outSubstitute, outAmount);\n        ISubstitute(outSubstitute).mint(outAmount, address(this));\n    }\n\n    function _encodeAdjustData(\n        uint256 id,\n        LoanPosition memory p,\n        int256 interestThreshold,\n        SwapParams memory swapParams\n    ) internal view returns (bytes memory) {\n        bytes memory data = abi.encode(p.collateralAmount, p.debtAmount, p.expiredWith, interestThreshold);\n        return abi.encode(id, msg.sender, swapParams, data);\n    }\n}\n"
    },
    "contracts/BorrowControllerV2.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IBorrowControllerV2} from \"./interfaces/IBorrowControllerV2.sol\";\nimport {ILoanPositionManager} from \"./interfaces/ILoanPositionManager.sol\";\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {LoanPosition} from \"./libraries/LoanPosition.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\nimport {ControllerV2} from \"./libraries/ControllerV2.sol\";\nimport {ERC20PermitParams, PermitSignature, PermitParamsLibrary} from \"./libraries/PermitParams.sol\";\n\ncontract BorrowControllerV2 is IBorrowControllerV2, ControllerV2, IPositionLocker {\n    using PermitParamsLibrary for *;\n    using EpochLibrary for Epoch;\n\n    ILoanPositionManager private immutable _loanPositionManager;\n    address private immutable _router;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_loanPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberController,\n        address bookManager,\n        address couponManager,\n        address weth,\n        address loanPositionManager,\n        address router\n    ) ControllerV2(wrapped1155Factory, cloberController, bookManager, couponManager, weth) {\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\n        _router = router;\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\n        if (msg.sender != address(_loanPositionManager)) revert InvalidAccess();\n\n        uint256 positionId;\n        address user;\n        SwapParams memory swapParams;\n        (positionId, user, swapParams, data) = abi.decode(data, (uint256, address, SwapParams, bytes));\n        if (positionId == 0) {\n            address collateralToken;\n            address debtToken;\n            (collateralToken, debtToken, data) = abi.decode(data, (address, address, bytes));\n            positionId = _loanPositionManager.mint(collateralToken, debtToken);\n            result = abi.encode(positionId);\n        }\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n\n        int256 interestThreshold;\n        (position.collateralAmount, position.debtAmount, position.expiredWith, interestThreshold) =\n            abi.decode(data, (uint256, uint256, Epoch, int256));\n\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta) =\n        _loanPositionManager.adjustPosition(\n            positionId, position.collateralAmount, position.debtAmount, position.expiredWith\n        );\n        if (collateralDelta < 0) {\n            _loanPositionManager.withdrawToken(position.collateralToken, address(this), uint256(-collateralDelta));\n        }\n        if (debtDelta > 0) _loanPositionManager.withdrawToken(position.debtToken, address(this), uint256(debtDelta));\n        if (couponsToMint.length > 0) {\n            _loanPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n            _wrapCoupons(couponsToMint);\n        }\n\n        if (swapParams.inSubstitute == position.collateralToken) {\n            _swap(positionId, position.collateralToken, position.debtToken, swapParams.amount, swapParams.data);\n        } else if (swapParams.inSubstitute == position.debtToken) {\n            _swap(positionId, position.debtToken, position.collateralToken, swapParams.amount, swapParams.data);\n        }\n\n        _executeCouponTrade(user, positionId, position.debtToken, couponsToMint, couponsToBurn, interestThreshold);\n\n        if (collateralDelta > 0) {\n            _mintSubstituteAll(position.collateralToken, user, uint256(collateralDelta));\n            IERC20(position.collateralToken).approve(address(_loanPositionManager), uint256(collateralDelta));\n            _loanPositionManager.depositToken(position.collateralToken, uint256(collateralDelta));\n        }\n        if (debtDelta < 0) {\n            _mintSubstituteAll(position.debtToken, user, uint256(-debtDelta));\n            IERC20(position.debtToken).approve(address(_loanPositionManager), uint256(-debtDelta));\n            _loanPositionManager.depositToken(position.debtToken, uint256(-debtDelta));\n        }\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _loanPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _loanPositionManager.settlePosition(positionId);\n    }\n\n    function borrow(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 maxPayInterest,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable nonReentrant wrapAndRefundETH returns (uint256 positionId) {\n        collateralPermitParams.tryPermit(_getUnderlyingToken(collateralToken), msg.sender, address(this));\n\n        bytes memory lockData = abi.encode(collateralAmount, debtAmount, expiredWith, maxPayInterest);\n        lockData = abi.encode(0, msg.sender, swapParams, abi.encode(collateralToken, debtToken, lockData));\n        bytes memory result = _loanPositionManager.lock(lockData);\n        positionId = abi.decode(result, (uint256));\n\n        _burnAllSubstitute(collateralToken, msg.sender);\n        _burnAllSubstitute(debtToken, msg.sender);\n        _loanPositionManager.transferFrom(address(this), msg.sender, positionId);\n    }\n\n    function adjust(\n        uint256 positionId,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 interestThreshold,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable nonReentrant wrapAndRefundETH onlyPositionOwner(positionId) {\n        positionPermitParams.tryPermit(_loanPositionManager, positionId, address(this));\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        collateralPermitParams.tryPermit(_getUnderlyingToken(position.collateralToken), msg.sender, address(this));\n        debtPermitParams.tryPermit(_getUnderlyingToken(position.debtToken), msg.sender, address(this));\n\n        position.collateralAmount = collateralAmount;\n        position.debtAmount = debtAmount;\n        position.expiredWith = expiredWith;\n\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, interestThreshold, swapParams));\n\n        _burnAllSubstitute(position.collateralToken, msg.sender);\n        _burnAllSubstitute(position.debtToken, msg.sender);\n    }\n\n    function _swap(\n        uint256 positionId,\n        address inSubstitute,\n        address outSubstitute,\n        uint256 inAmount,\n        bytes memory swapParams\n    ) internal returns (uint256 outAmount) {\n        address inToken = ISubstitute(inSubstitute).underlyingToken();\n        address outToken = ISubstitute(outSubstitute).underlyingToken();\n        uint256 beforeOutTokenBalance = IERC20(outToken).balanceOf(address(this));\n\n        ISubstitute(inSubstitute).burn(inAmount, address(this));\n        if (inToken == address(_weth)) _weth.deposit{value: inAmount}();\n        IERC20(inToken).approve(_router, inAmount);\n        (bool success, bytes memory result) = _router.call(swapParams);\n        if (!success) revert CollateralSwapFailed(string(result));\n        IERC20(inToken).approve(_router, 0);\n\n        unchecked {\n            outAmount = IERC20(outToken).balanceOf(address(this)) - beforeOutTokenBalance;\n        }\n        emit SwapToken(positionId, inToken, outToken, inAmount, outAmount);\n\n        IERC20(outToken).approve(outSubstitute, outAmount);\n        ISubstitute(outSubstitute).mint(outAmount, address(this));\n    }\n\n    function _encodeAdjustData(\n        uint256 id,\n        LoanPosition memory p,\n        int256 interestThreshold,\n        SwapParams memory swapParams\n    ) internal view returns (bytes memory) {\n        bytes memory data = abi.encode(p.collateralAmount, p.debtAmount, p.expiredWith, interestThreshold);\n        return abi.encode(id, msg.sender, swapParams, data);\n    }\n}\n"
    },
    "contracts/CouponLiquidator.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {IWETH9} from \"./external/weth/IWETH9.sol\";\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {ILoanPositionManager} from \"./interfaces/ILoanPositionManager.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {ICouponLiquidator} from \"./interfaces/ICouponLiquidator.sol\";\nimport {LoanPosition} from \"./libraries/LoanPosition.sol\";\nimport {SubstituteLibrary} from \"./libraries/Substitute.sol\";\n\ncontract CouponLiquidator is ICouponLiquidator, IPositionLocker {\n    using SafeERC20 for IERC20;\n    using SubstituteLibrary for ISubstitute;\n\n    ILoanPositionManager private immutable _loanPositionManager;\n    address private immutable _router;\n    IWETH9 internal immutable _weth;\n\n    constructor(address loanPositionManager, address router, address weth) {\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\n        _router = router;\n        _weth = IWETH9(weth);\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory) {\n        (\n            address payer,\n            uint256 positionId,\n            uint256 swapAmount,\n            bytes memory swapData,\n            uint256 allowedSupplementaryAmount,\n            address recipient\n        ) = abi.decode(data, (address, uint256, uint256, bytes, uint256, address));\n\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        address inToken = ISubstitute(position.collateralToken).underlyingToken();\n        address outToken = ISubstitute(position.debtToken).underlyingToken();\n        _loanPositionManager.withdrawToken(position.collateralToken, address(this), swapAmount);\n        _burnAllSubstitute(position.collateralToken, address(this));\n        if (inToken == address(_weth)) {\n            _weth.deposit{value: swapAmount}();\n        }\n        if (swapAmount > 0 && swapData.length > 0) {\n            _swap(inToken, swapAmount, swapData);\n        }\n\n        uint256 maxRepayAmount = IERC20(outToken).balanceOf(address(this))\n            + Math.min(\n                allowedSupplementaryAmount,\n                Math.min(IERC20(outToken).balanceOf(payer), IERC20(outToken).allowance(payer, address(this)))\n            );\n\n        (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount) =\n            _loanPositionManager.liquidate(positionId, maxRepayAmount);\n\n        ISubstitute(position.debtToken).mintAll(payer, repayAmount);\n        IERC20(position.debtToken).approve(address(_loanPositionManager), repayAmount);\n        _loanPositionManager.depositToken(position.debtToken, repayAmount);\n\n        uint256 collateralAmount = liquidationAmount - protocolFeeAmount - swapAmount;\n\n        _loanPositionManager.withdrawToken(position.collateralToken, address(this), collateralAmount);\n        _burnAllSubstitute(position.collateralToken, recipient);\n        _burnAllSubstitute(position.debtToken, recipient);\n\n        return \"\";\n    }\n\n    function liquidate(\n        uint256 positionId,\n        uint256 swapAmount,\n        bytes calldata swapData,\n        uint256 allowedSupplementaryAmount,\n        address recipient\n    ) external payable {\n        if (msg.value > 0) {\n            _weth.deposit{value: msg.value}();\n        }\n        _loanPositionManager.lock(\n            abi.encode(msg.sender, positionId, swapAmount, swapData, allowedSupplementaryAmount, recipient)\n        );\n    }\n\n    function _swap(address inToken, uint256 inAmount, bytes memory swapParams) internal {\n        IERC20(inToken).approve(_router, inAmount);\n        (bool success, bytes memory result) = _router.call(swapParams);\n        if (!success) revert CollateralSwapFailed(string(result));\n        IERC20(inToken).approve(_router, 0);\n    }\n\n    function _burnAllSubstitute(address substitute, address to) internal {\n        uint256 leftAmount = IERC20(substitute).balanceOf(address(this));\n        if (leftAmount == 0) return;\n        ISubstitute(substitute).burn(leftAmount, to);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/CouponMarketRouter.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {CloberOrderBook} from \"./external/clober/CloberOrderBook.sol\";\nimport {CloberMarketSwapCallbackReceiver} from \"./external/clober/CloberMarketSwapCallbackReceiver.sol\";\nimport {CloberMarketFactory} from \"./external/clober/CloberMarketFactory.sol\";\nimport {IWrapped1155Factory} from \"./external/wrapped1155/IWrapped1155Factory.sol\";\nimport {ICouponManager} from \"./interfaces/ICouponManager.sol\";\nimport {ICouponWrapper} from \"./interfaces/ICouponWrapper.sol\";\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {ICouponMarketRouter} from \"./interfaces/ICouponMarketRouter.sol\";\nimport {CouponKeyLibrary, CouponKey} from \"./libraries/CouponKey.sol\";\nimport {PermitParamsLibrary, PermitSignature} from \"./libraries/PermitParams.sol\";\nimport {Wrapped1155MetadataBuilder} from \"./libraries/Wrapped1155MetadataBuilder.sol\";\n\ncontract CouponMarketRouter is CloberMarketSwapCallbackReceiver, ICouponMarketRouter {\n    using SafeERC20 for IERC20;\n    using CouponKeyLibrary for CouponKey;\n    using PermitParamsLibrary for *;\n\n    IWrapped1155Factory internal immutable _wrapped1155Factory;\n    ICouponManager internal immutable _couponManager;\n    ICouponWrapper internal immutable _couponWrapper;\n    CloberMarketFactory private immutable _cloberMarketFactory;\n\n    modifier checkDeadline(uint64 deadline) {\n        _checkDeadline(deadline);\n        _;\n    }\n\n    function _checkDeadline(uint64 deadline) internal view {\n        if (block.timestamp > deadline) {\n            revert Deadline();\n        }\n    }\n\n    constructor(address wrapped1155Factory, address cloberMarketFactory, address couponManager, address couponWrapper) {\n        _wrapped1155Factory = IWrapped1155Factory(wrapped1155Factory);\n        _cloberMarketFactory = CloberMarketFactory(cloberMarketFactory);\n        _couponManager = ICouponManager(couponManager);\n        _couponWrapper = ICouponWrapper(couponWrapper);\n    }\n\n    function cloberMarketSwapCallback(\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        bytes calldata data\n    ) external payable {\n        if (_cloberMarketFactory.getMarketHost(msg.sender) == address(0)) {\n            revert InvalidAccess();\n        }\n        (address payer, address recipient, CouponKey memory couponKey) = abi.decode(data, (address, address, CouponKey));\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey);\n        uint256 couponId = couponKey.toId();\n        if (inputToken != _wrapped1155Factory.getWrapped1155(address(_couponManager), couponId, metadata)) {\n            revert InvalidMarket();\n        }\n\n        uint256 erc20Amount =\n            Math.min(IERC20(inputToken).balanceOf(payer), IERC20(inputToken).allowance(payer, address(this)));\n\n        if (inputAmount > erc20Amount) {\n            _couponManager.safeTransferFrom(\n                payer, address(_wrapped1155Factory), couponId, inputAmount - erc20Amount, metadata\n            );\n            IERC20(inputToken).safeTransfer(msg.sender, inputAmount - erc20Amount);\n        } else {\n            erc20Amount = inputAmount;\n        }\n        IERC20(inputToken).safeTransferFrom(payer, msg.sender, erc20Amount);\n\n        ISubstitute(outputToken).burn(outputAmount, recipient);\n    }\n\n    function marketSellCoupons(MarketSellParams calldata params, PermitSignature calldata couponPermitParams)\n        external\n    {\n        couponPermitParams.tryPermit(_couponManager, msg.sender, address(this), true);\n\n        _marketSellCoupon(params);\n    }\n\n    function batchMarketSellCoupons(MarketSellParams[] calldata paramsList, PermitSignature calldata couponPermitParams)\n        external\n    {\n        couponPermitParams.tryPermit(_couponManager, msg.sender, address(this), true);\n\n        for (uint256 i; i < paramsList.length; ++i) {\n            _marketSellCoupon(paramsList[i]);\n        }\n    }\n\n    function _marketSellCoupon(MarketSellParams calldata params) internal checkDeadline(params.deadline) {\n        bytes memory data = abi.encode(msg.sender, params.recipient, params.couponKey);\n        CloberOrderBook(params.market).marketOrder(\n            address(this),\n            params.limitPriceIndex,\n            params.minRawAmount,\n            params.amount,\n            2, // ask, expendInput\n            data\n        );\n    }\n}\n"
    },
    "contracts/CouponWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {ICouponManager} from \"./interfaces/ICouponManager.sol\";\nimport {ICouponWrapper} from \"./interfaces/ICouponWrapper.sol\";\nimport {IWrapped1155Factory} from \"./external/wrapped1155/IWrapped1155Factory.sol\";\nimport {CouponLibrary, Coupon} from \"./libraries/Coupon.sol\";\nimport {CouponKeyLibrary, CouponKey} from \"./libraries/CouponKey.sol\";\nimport {PermitParamsLibrary, ERC20PermitParams, PermitSignature} from \"./libraries/PermitParams.sol\";\nimport {Wrapped1155MetadataBuilder} from \"./libraries/Wrapped1155MetadataBuilder.sol\";\n\ncontract CouponWrapper is ICouponWrapper {\n    using SafeERC20 for IERC20;\n    using CouponLibrary for Coupon;\n    using CouponKeyLibrary for CouponKey;\n    using PermitParamsLibrary for *;\n\n    ICouponManager private immutable _couponManager;\n    IWrapped1155Factory private immutable _wrapped1155Factory;\n\n    constructor(address couponManager_, address wrapped1155Factory_) {\n        _couponManager = ICouponManager(couponManager_);\n        _wrapped1155Factory = IWrapped1155Factory(wrapped1155Factory_);\n    }\n\n    function getWrappedCoupon(CouponKey calldata couponKey) external view returns (address) {\n        return _wrapped1155Factory.getWrapped1155(\n            address(_couponManager), couponKey.toId(), Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey)\n        );\n    }\n\n    function getWrappedCoupons(CouponKey[] calldata couponKeys)\n        external\n        view\n        returns (address[] memory wrappedCoupons)\n    {\n        wrappedCoupons = new address[](couponKeys.length);\n        for (uint256 i; i < couponKeys.length; ++i) {\n            wrappedCoupons[i] = _wrapped1155Factory.getWrapped1155(\n                address(_couponManager),\n                couponKeys[i].toId(),\n                Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKeys[i])\n            );\n        }\n    }\n\n    function buildMetadata(CouponKey calldata couponKey) external view returns (bytes memory) {\n        return Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey);\n    }\n\n    function buildBatchMetadata(CouponKey[] calldata couponKeys) external view returns (bytes memory) {\n        return Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(couponKeys);\n    }\n\n    function wrap(Coupon[] calldata coupons, address recipient) external {\n        _wrap(coupons, recipient);\n    }\n\n    function wrapWithPermit(\n        PermitSignature calldata couponPermitSignature,\n        Coupon[] calldata coupons,\n        address recipient\n    ) external {\n        couponPermitSignature.tryPermit(_couponManager, msg.sender, address(this), true);\n        _wrap(coupons, recipient);\n    }\n\n    function _wrap(Coupon[] calldata coupons, address recipient) internal {\n        bytes memory batchMetadata;\n        address[] memory wrappedCoupons = new address[](coupons.length);\n        for (uint256 i; i < coupons.length; ++i) {\n            bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(coupons[i].key);\n            wrappedCoupons[i] = _wrapped1155Factory.getWrapped1155(address(_couponManager), coupons[i].id(), metadata);\n            batchMetadata = bytes.concat(batchMetadata, metadata);\n        }\n\n        _couponManager.safeBatchTransferFrom(msg.sender, address(_wrapped1155Factory), coupons, batchMetadata);\n\n        for (uint256 i; i < coupons.length; ++i) {\n            IERC20(wrappedCoupons[i]).safeTransfer(recipient, coupons[i].amount);\n        }\n    }\n\n    function unwrap(Coupon[] calldata coupons, address recipient) external {\n        bytes memory batchMetadata;\n        uint256[] memory tokenIds = new uint256[](coupons.length);\n        uint256[] memory amounts = new uint256[](coupons.length);\n        for (uint256 i; i < coupons.length; ++i) {\n            bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(coupons[i].key);\n            address token = _wrapped1155Factory.getWrapped1155(address(_couponManager), coupons[i].id(), metadata);\n\n            IERC20(token).safeTransferFrom(msg.sender, address(this), coupons[i].amount);\n            batchMetadata = bytes.concat(batchMetadata, metadata);\n            tokenIds[i] = coupons[i].id();\n            amounts[i] = coupons[i].amount;\n        }\n\n        _wrapped1155Factory.batchUnwrap(address(_couponManager), tokenIds, amounts, recipient, batchMetadata);\n    }\n}\n"
    },
    "contracts/DepositController.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IDepositController} from \"./interfaces/IDepositController.sol\";\nimport {IBondPositionManager} from \"./interfaces/IBondPositionManager.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {BondPosition} from \"./libraries/BondPosition.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\nimport {CouponKey} from \"./libraries/CouponKey.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {SubstituteLibrary} from \"./libraries/Substitute.sol\";\nimport {Controller} from \"./libraries/Controller.sol\";\nimport {ERC20PermitParams, PermitSignature, PermitParamsLibrary} from \"./libraries/PermitParams.sol\";\n\ncontract DepositController is IDepositController, Controller, IPositionLocker {\n    using PermitParamsLibrary for *;\n    using EpochLibrary for Epoch;\n    using SubstituteLibrary for ISubstitute;\n\n    IBondPositionManager private immutable _bondPositionManager;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_bondPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberMarketFactory,\n        address couponManager,\n        address weth,\n        address bondPositionManager\n    ) Controller(wrapped1155Factory, cloberMarketFactory, couponManager, weth) {\n        _bondPositionManager = IBondPositionManager(bondPositionManager);\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\n        if (msg.sender != address(_bondPositionManager)) revert InvalidAccess();\n\n        uint256 positionId;\n        address user;\n        (positionId, user, data) = abi.decode(data, (uint256, address, bytes));\n        if (positionId == 0) {\n            address asset;\n            (asset, data) = abi.decode(data, (address, bytes));\n            positionId = _bondPositionManager.mint(asset);\n            result = abi.encode(positionId);\n        }\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\n\n        int256 interestThreshold;\n        (position.amount, position.expiredWith, interestThreshold) = abi.decode(data, (uint256, Epoch, int256));\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta) =\n            _bondPositionManager.adjustPosition(positionId, position.amount, position.expiredWith);\n        if (amountDelta < 0) _bondPositionManager.withdrawToken(position.asset, address(this), uint256(-amountDelta));\n        if (couponsToMint.length > 0) {\n            _bondPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n            _wrapCoupons(couponsToMint);\n        }\n\n        _executeCouponTrade(\n            user,\n            position.asset,\n            couponsToMint,\n            couponsToBurn,\n            amountDelta > 0 ? uint256(amountDelta) : 0,\n            interestThreshold\n        );\n\n        if (amountDelta > 0) {\n            IERC20(position.asset).approve(address(_bondPositionManager), uint256(amountDelta));\n            _bondPositionManager.depositToken(position.asset, uint256(amountDelta));\n        }\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _bondPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _bondPositionManager.settlePosition(positionId);\n    }\n\n    function deposit(\n        address asset,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 minEarnInterest,\n        ERC20PermitParams calldata tokenPermitParams\n    ) external payable nonReentrant wrapAndRefundETH returns (uint256 positionId) {\n        tokenPermitParams.tryPermit(_getUnderlyingToken(asset), msg.sender, address(this));\n        bytes memory lockData = abi.encode(amount, expiredWith, -minEarnInterest);\n        bytes memory result = _bondPositionManager.lock(abi.encode(0, msg.sender, abi.encode(asset, lockData)));\n        positionId = abi.decode(result, (uint256));\n\n        ISubstitute(asset).burnAll(msg.sender);\n\n        _bondPositionManager.transferFrom(address(this), msg.sender, positionId);\n    }\n\n    function adjust(\n        uint256 positionId,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 interestThreshold,\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams\n    ) external payable nonReentrant wrapAndRefundETH onlyPositionOwner(positionId) {\n        positionPermitParams.tryPermit(_bondPositionManager, positionId, address(this));\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\n        tokenPermitParams.tryPermit(position.asset, msg.sender, address(this));\n\n        bytes memory lockData = abi.encode(amount, expiredWith, interestThreshold);\n        _bondPositionManager.lock(abi.encode(positionId, msg.sender, lockData));\n\n        ISubstitute(position.asset).burnAll(msg.sender);\n    }\n}\n"
    },
    "contracts/DepositControllerV2.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IDepositControllerV2} from \"./interfaces/IDepositControllerV2.sol\";\nimport {IBondPositionManager} from \"./interfaces/IBondPositionManager.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {BondPosition} from \"./libraries/BondPosition.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\nimport {CouponKey} from \"./libraries/CouponKey.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {SubstituteLibrary} from \"./libraries/Substitute.sol\";\nimport {ControllerV2} from \"./libraries/ControllerV2.sol\";\nimport {ERC20PermitParams, PermitSignature, PermitParamsLibrary} from \"./libraries/PermitParams.sol\";\n\ncontract DepositControllerV2 is IDepositControllerV2, ControllerV2, IPositionLocker {\n    using PermitParamsLibrary for *;\n    using EpochLibrary for Epoch;\n\n    IBondPositionManager private immutable _bondPositionManager;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_bondPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberController,\n        address bookManager,\n        address couponManager,\n        address weth,\n        address bondPositionManager\n    ) ControllerV2(wrapped1155Factory, cloberController, bookManager, couponManager, weth) {\n        _bondPositionManager = IBondPositionManager(bondPositionManager);\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\n        if (msg.sender != address(_bondPositionManager)) revert InvalidAccess();\n\n        uint256 positionId;\n        address user;\n        (positionId, user, data) = abi.decode(data, (uint256, address, bytes));\n        if (positionId == 0) {\n            address asset;\n            (asset, data) = abi.decode(data, (address, bytes));\n            positionId = _bondPositionManager.mint(asset);\n            result = abi.encode(positionId);\n        }\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\n\n        int256 interestThreshold;\n        (position.amount, position.expiredWith, interestThreshold) = abi.decode(data, (uint256, Epoch, int256));\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta) =\n            _bondPositionManager.adjustPosition(positionId, position.amount, position.expiredWith);\n        if (amountDelta < 0) _bondPositionManager.withdrawToken(position.asset, address(this), uint256(-amountDelta));\n        if (couponsToMint.length > 0) {\n            _bondPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n            _wrapCoupons(couponsToMint);\n        }\n\n        _executeCouponTrade(user, positionId, position.asset, couponsToMint, couponsToBurn, interestThreshold);\n\n        if (amountDelta > 0) {\n            _mintSubstituteAll(position.asset, user, uint256(amountDelta));\n            IERC20(position.asset).approve(address(_bondPositionManager), uint256(amountDelta));\n            _bondPositionManager.depositToken(position.asset, uint256(amountDelta));\n        }\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _bondPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _bondPositionManager.settlePosition(positionId);\n    }\n\n    function deposit(\n        address asset,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 minEarnInterest,\n        ERC20PermitParams calldata tokenPermitParams\n    ) external payable nonReentrant wrapAndRefundETH returns (uint256 positionId) {\n        tokenPermitParams.tryPermit(_getUnderlyingToken(asset), msg.sender, address(this));\n        bytes memory lockData = abi.encode(amount, expiredWith, -minEarnInterest);\n        bytes memory result = _bondPositionManager.lock(abi.encode(0, msg.sender, abi.encode(asset, lockData)));\n        positionId = abi.decode(result, (uint256));\n\n        _burnAllSubstitute(asset, msg.sender);\n\n        _bondPositionManager.transferFrom(address(this), msg.sender, positionId);\n    }\n\n    function adjust(\n        uint256 positionId,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 interestThreshold,\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams\n    ) external payable nonReentrant wrapAndRefundETH onlyPositionOwner(positionId) {\n        positionPermitParams.tryPermit(_bondPositionManager, positionId, address(this));\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\n        tokenPermitParams.tryPermit(position.asset, msg.sender, address(this));\n\n        bytes memory lockData = abi.encode(amount, expiredWith, interestThreshold);\n        _bondPositionManager.lock(abi.encode(positionId, msg.sender, lockData));\n\n        _burnAllSubstitute(position.asset, msg.sender);\n    }\n}\n"
    },
    "contracts/EthSubstituteMinter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IEthSubstituteMinter} from \"./interfaces/IEthSubstituteMinter.sol\";\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {IWETH9} from \"./external/weth/IWETH9.sol\";\nimport {PermitParamsLibrary, ERC20PermitParams} from \"./libraries/PermitParams.sol\";\n\ncontract EthSubstituteMinter is IEthSubstituteMinter {\n    using PermitParamsLibrary for ERC20PermitParams;\n\n    IWETH9 private immutable _weth;\n\n    constructor(address weth) {\n        _weth = IWETH9(weth);\n    }\n\n    function mint(ERC20PermitParams calldata permitParams, ISubstitute substitute, uint256 amount, address recipient)\n        external\n        payable\n    {\n        permitParams.tryPermit(address(_weth), msg.sender, address(this));\n        if (msg.value > amount) {\n            revert ExceedsAmount();\n        }\n        if (msg.value < amount) {\n            _weth.transferFrom(msg.sender, address(this), amount - msg.value);\n        }\n        if (msg.value > 0) {\n            _weth.deposit{value: msg.value}();\n        }\n        _weth.approve(address(substitute), amount);\n        substitute.mint(amount, recipient);\n    }\n}\n"
    },
    "contracts/external/aave-v3/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// https://github.com/aave/aave-v3-core/blob/6070e82d962d9b12835c88e68210d0e63f08d035/contracts/protocol/libraries/types/DataTypes.sol\n\npragma solidity ^0.8.0;\n\nlibrary DataTypes {\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        //timestamp of last update\n        uint40 lastUpdateTimestamp;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint16 id;\n        //aToken address\n        address aTokenAddress;\n        //stableDebtToken address\n        address stableDebtTokenAddress;\n        //variableDebtToken address\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the current treasury balance, scaled\n        uint128 accruedToTreasury;\n        //the outstanding unbacked aTokens minted through the bridging feature\n        uint128 unbacked;\n        //the outstanding debt borrowed against this asset in isolation mode\n        uint128 isolationModeTotalDebt;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60: asset is paused\n        //bit 61: borrowing in isolation mode is enabled\n        //bit 62: siloed borrowing enabled\n        //bit 63: flashloaning enabled\n        //bit 64-79: reserve factor\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n        //bit 152-167 liquidation protocol fee\n        //bit 168-175 eMode category\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n        //bit 252-255 unused\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        /**\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\n         * asset is borrowed by the user.\n         */\n        uint256 data;\n    }\n\n    struct EModeCategory {\n        // each eMode category has a custom ltv and liquidation threshold\n        uint16 ltv;\n        uint16 liquidationThreshold;\n        uint16 liquidationBonus;\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n        address priceSource;\n        string label;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n\n    struct ReserveCache {\n        uint256 currScaledVariableDebt;\n        uint256 nextScaledVariableDebt;\n        uint256 currPrincipalStableDebt;\n        uint256 currAvgStableBorrowRate;\n        uint256 currTotalStableDebt;\n        uint256 nextAvgStableBorrowRate;\n        uint256 nextTotalStableDebt;\n        uint256 currLiquidityIndex;\n        uint256 nextLiquidityIndex;\n        uint256 currVariableBorrowIndex;\n        uint256 nextVariableBorrowIndex;\n        uint256 currLiquidityRate;\n        uint256 currVariableBorrowRate;\n        uint256 reserveFactor;\n        ReserveConfigurationMap reserveConfiguration;\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        uint40 reserveLastUpdateTimestamp;\n        uint40 stableDebtLastUpdateTimestamp;\n    }\n\n    struct ExecuteLiquidationCallParams {\n        uint256 reservesCount;\n        uint256 debtToCover;\n        address collateralAsset;\n        address debtAsset;\n        address user;\n        bool receiveAToken;\n        address priceOracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteSupplyParams {\n        address asset;\n        uint256 amount;\n        address onBehalfOf;\n        uint16 referralCode;\n    }\n\n    struct ExecuteBorrowParams {\n        address asset;\n        address user;\n        address onBehalfOf;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint16 referralCode;\n        bool releaseUnderlying;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteRepayParams {\n        address asset;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        address onBehalfOf;\n        bool useATokens;\n    }\n\n    struct ExecuteWithdrawParams {\n        address asset;\n        uint256 amount;\n        address to;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ExecuteSetUserEModeParams {\n        uint256 reservesCount;\n        address oracle;\n        uint8 categoryId;\n    }\n\n    struct FinalizeTransferParams {\n        address asset;\n        address from;\n        address to;\n        uint256 amount;\n        uint256 balanceFromBefore;\n        uint256 balanceToBefore;\n        uint256 reservesCount;\n        address oracle;\n        uint8 fromEModeCategory;\n    }\n\n    struct FlashloanParams {\n        address receiverAddress;\n        address[] assets;\n        uint256[] amounts;\n        uint256[] interestRateModes;\n        address onBehalfOf;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address addressesProvider;\n        uint8 userEModeCategory;\n        bool isAuthorizedFlashBorrower;\n    }\n\n    struct FlashloanSimpleParams {\n        address receiverAddress;\n        address asset;\n        uint256 amount;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n    }\n\n    struct FlashLoanRepaymentParams {\n        uint256 amount;\n        uint256 totalPremium;\n        uint256 flashLoanPremiumToProtocol;\n        address asset;\n        address receiverAddress;\n        uint16 referralCode;\n    }\n\n    struct CalculateUserAccountDataParams {\n        UserConfigurationMap userConfig;\n        uint256 reservesCount;\n        address user;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ValidateBorrowParams {\n        ReserveCache reserveCache;\n        UserConfigurationMap userConfig;\n        address asset;\n        address userAddress;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint256 maxStableLoanPercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n        bool isolationModeActive;\n        address isolationModeCollateralAddress;\n        uint256 isolationModeDebtCeiling;\n    }\n\n    struct ValidateLiquidationCallParams {\n        ReserveCache debtReserveCache;\n        uint256 totalDebt;\n        uint256 healthFactor;\n        address priceOracleSentinel;\n    }\n\n    struct CalculateInterestRatesParams {\n        uint256 unbacked;\n        uint256 liquidityAdded;\n        uint256 liquidityTaken;\n        uint256 totalStableDebt;\n        uint256 totalVariableDebt;\n        uint256 averageStableBorrowRate;\n        uint256 reserveFactor;\n        address reserve;\n        address aToken;\n    }\n\n    struct InitReserveParams {\n        address asset;\n        address aTokenAddress;\n        address stableDebtAddress;\n        address variableDebtAddress;\n        address interestRateStrategyAddress;\n        uint16 reservesCount;\n        uint16 maxNumberReserves;\n    }\n}\n"
    },
    "contracts/external/aave-v3/Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// https://github.com/aave/aave-v3-core/blob/6070e82d962d9b12835c88e68210d0e63f08d035/contracts/protocol/libraries/helpers/Errors.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @title Errors library\n * @author Aave\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\n */\nlibrary Errors {\n    string public constant CALLER_NOT_POOL_ADMIN = \"1\"; // 'The caller of the function is not a pool admin'\n    string public constant CALLER_NOT_EMERGENCY_ADMIN = \"2\"; // 'The caller of the function is not an emergency admin'\n    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \"3\"; // 'The caller of the function is not a pool or emergency admin'\n    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \"4\"; // 'The caller of the function is not a risk or pool admin'\n    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \"5\"; // 'The caller of the function is not an asset listing or pool admin'\n    string public constant CALLER_NOT_BRIDGE = \"6\"; // 'The caller of the function is not a bridge'\n    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \"7\"; // 'Pool addresses provider is not registered'\n    string public constant INVALID_ADDRESSES_PROVIDER_ID = \"8\"; // 'Invalid id for the pool addresses provider'\n    string public constant NOT_CONTRACT = \"9\"; // 'Address is not a contract'\n    string public constant CALLER_NOT_POOL_CONFIGURATOR = \"10\"; // 'The caller of the function is not the pool configurator'\n    string public constant CALLER_NOT_ATOKEN = \"11\"; // 'The caller of the function is not an AToken'\n    string public constant INVALID_ADDRESSES_PROVIDER = \"12\"; // 'The address of the pool addresses provider is invalid'\n    string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = \"13\"; // 'Invalid return value of the flashloan executor function'\n    string public constant RESERVE_ALREADY_ADDED = \"14\"; // 'Reserve has already been added to reserve list'\n    string public constant NO_MORE_RESERVES_ALLOWED = \"15\"; // 'Maximum amount of reserves in the pool reached'\n    string public constant EMODE_CATEGORY_RESERVED = \"16\"; // 'Zero eMode category is reserved for volatile heterogeneous assets'\n    string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = \"17\"; // 'Invalid eMode category assignment to asset'\n    string public constant RESERVE_LIQUIDITY_NOT_ZERO = \"18\"; // 'The liquidity of the reserve needs to be 0'\n    string public constant FLASHLOAN_PREMIUM_INVALID = \"19\"; // 'Invalid flashloan premium'\n    string public constant INVALID_RESERVE_PARAMS = \"20\"; // 'Invalid risk parameters for the reserve'\n    string public constant INVALID_EMODE_CATEGORY_PARAMS = \"21\"; // 'Invalid risk parameters for the eMode category'\n    string public constant BRIDGE_PROTOCOL_FEE_INVALID = \"22\"; // 'Invalid bridge protocol fee'\n    string public constant CALLER_MUST_BE_POOL = \"23\"; // 'The caller of this function must be a pool'\n    string public constant INVALID_MINT_AMOUNT = \"24\"; // 'Invalid amount to mint'\n    string public constant INVALID_BURN_AMOUNT = \"25\"; // 'Invalid amount to burn'\n    string public constant INVALID_AMOUNT = \"26\"; // 'Amount must be greater than 0'\n    string public constant RESERVE_INACTIVE = \"27\"; // 'Action requires an active reserve'\n    string public constant RESERVE_FROZEN = \"28\"; // 'Action cannot be performed because the reserve is frozen'\n    string public constant RESERVE_PAUSED = \"29\"; // 'Action cannot be performed because the reserve is paused'\n    string public constant BORROWING_NOT_ENABLED = \"30\"; // 'Borrowing is not enabled'\n    string public constant STABLE_BORROWING_NOT_ENABLED = \"31\"; // 'Stable borrowing is not enabled'\n    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \"32\"; // 'User cannot withdraw more than the available balance'\n    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \"33\"; // 'Invalid interest rate mode selected'\n    string public constant COLLATERAL_BALANCE_IS_ZERO = \"34\"; // 'The collateral balance is 0'\n    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \"35\"; // 'Health factor is lesser than the liquidation threshold'\n    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \"36\"; // 'There is not enough collateral to cover a new borrow'\n    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \"37\"; // 'Collateral is (mostly) the same currency that is being borrowed'\n    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \"38\"; // 'The requested amount is greater than the max loan size in stable rate mode'\n    string public constant NO_DEBT_OF_SELECTED_TYPE = \"39\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\n    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \"40\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\n    string public constant NO_OUTSTANDING_STABLE_DEBT = \"41\"; // 'User does not have outstanding stable rate debt on this reserve'\n    string public constant NO_OUTSTANDING_VARIABLE_DEBT = \"42\"; // 'User does not have outstanding variable rate debt on this reserve'\n    string public constant UNDERLYING_BALANCE_ZERO = \"43\"; // 'The underlying balance needs to be greater than 0'\n    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \"44\"; // 'Interest rate rebalance conditions were not met'\n    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \"45\"; // 'Health factor is not below the threshold'\n    string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = \"46\"; // 'The collateral chosen cannot be liquidated'\n    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \"47\"; // 'User did not borrow the specified currency'\n    string public constant INCONSISTENT_FLASHLOAN_PARAMS = \"49\"; // 'Inconsistent flashloan parameters'\n    string public constant BORROW_CAP_EXCEEDED = \"50\"; // 'Borrow cap is exceeded'\n    string public constant SUPPLY_CAP_EXCEEDED = \"51\"; // 'Supply cap is exceeded'\n    string public constant UNBACKED_MINT_CAP_EXCEEDED = \"52\"; // 'Unbacked mint cap is exceeded'\n    string public constant DEBT_CEILING_EXCEEDED = \"53\"; // 'Debt ceiling is exceeded'\n    string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = \"54\"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\n    string public constant STABLE_DEBT_NOT_ZERO = \"55\"; // 'Stable debt supply is not zero'\n    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \"56\"; // 'Variable debt supply is not zero'\n    string public constant LTV_VALIDATION_FAILED = \"57\"; // 'Ltv validation failed'\n    string public constant INCONSISTENT_EMODE_CATEGORY = \"58\"; // 'Inconsistent eMode category'\n    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \"59\"; // 'Price oracle sentinel validation failed'\n    string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = \"60\"; // 'Asset is not borrowable in isolation mode'\n    string public constant RESERVE_ALREADY_INITIALIZED = \"61\"; // 'Reserve has already been initialized'\n    string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = \"62\"; // 'User is in isolation mode or ltv is zero'\n    string public constant INVALID_LTV = \"63\"; // 'Invalid ltv parameter for the reserve'\n    string public constant INVALID_LIQ_THRESHOLD = \"64\"; // 'Invalid liquidity threshold parameter for the reserve'\n    string public constant INVALID_LIQ_BONUS = \"65\"; // 'Invalid liquidity bonus parameter for the reserve'\n    string public constant INVALID_DECIMALS = \"66\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\n    string public constant INVALID_RESERVE_FACTOR = \"67\"; // 'Invalid reserve factor parameter for the reserve'\n    string public constant INVALID_BORROW_CAP = \"68\"; // 'Invalid borrow cap for the reserve'\n    string public constant INVALID_SUPPLY_CAP = \"69\"; // 'Invalid supply cap for the reserve'\n    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \"70\"; // 'Invalid liquidation protocol fee for the reserve'\n    string public constant INVALID_EMODE_CATEGORY = \"71\"; // 'Invalid eMode category for the reserve'\n    string public constant INVALID_UNBACKED_MINT_CAP = \"72\"; // 'Invalid unbacked mint cap for the reserve'\n    string public constant INVALID_DEBT_CEILING = \"73\"; // 'Invalid debt ceiling for the reserve\n    string public constant INVALID_RESERVE_INDEX = \"74\"; // 'Invalid reserve index'\n    string public constant ACL_ADMIN_CANNOT_BE_ZERO = \"75\"; // 'ACL admin cannot be set to the zero address'\n    string public constant INCONSISTENT_PARAMS_LENGTH = \"76\"; // 'Array parameters that should be equal length are not'\n    string public constant ZERO_ADDRESS_NOT_VALID = \"77\"; // 'Zero address not valid'\n    string public constant INVALID_EXPIRATION = \"78\"; // 'Invalid expiration'\n    string public constant INVALID_SIGNATURE = \"79\"; // 'Invalid signature'\n    string public constant OPERATION_NOT_SUPPORTED = \"80\"; // 'Operation not supported'\n    string public constant DEBT_CEILING_NOT_ZERO = \"81\"; // 'Debt ceiling is not zero'\n    string public constant ASSET_NOT_LISTED = \"82\"; // 'Asset is not listed'\n    string public constant INVALID_OPTIMAL_USAGE_RATIO = \"83\"; // 'Invalid optimal usage ratio'\n    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \"84\"; // 'Invalid optimal stable to total debt ratio'\n    string public constant UNDERLYING_CANNOT_BE_RESCUED = \"85\"; // 'The underlying asset cannot be rescued'\n    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \"86\"; // 'Reserve has already been added to reserve list'\n    string public constant POOL_ADDRESSES_DO_NOT_MATCH = \"87\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\n    string public constant STABLE_BORROWING_ENABLED = \"88\"; // 'Stable borrowing is enabled'\n    string public constant SILOED_BORROWING_VIOLATION = \"89\"; // 'User is trying to borrow multiple assets including a siloed one'\n    string public constant RESERVE_DEBT_NOT_ZERO = \"90\"; // the total debt of the reserve needs to be 0\n    string public constant FLASHLOAN_DISABLED = \"91\"; // FlashLoaning for this asset is disabled\n}\n"
    },
    "contracts/external/aave-v3/IAToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// https://github.com/aave/aave-v3-core/blob/6070e82d962d9b12835c88e68210d0e63f08d035/contracts/interfaces/IAToken.sol\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IScaledBalanceToken} from \"./IScaledBalanceToken.sol\";\n\n/**\n * @title IAToken\n * @author Aave\n * @notice Defines the basic interface for an AToken.\n */\ninterface IAToken is IERC20, IScaledBalanceToken {\n    /**\n     * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\n     * @return The address of the underlying asset\n     */\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n"
    },
    "contracts/external/aave-v3/IPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// https://github.com/aave/aave-v3-core/blob/6070e82d962d9b12835c88e68210d0e63f08d035/contracts/interfaces/IPool.sol\n\npragma solidity ^0.8.0;\n\nimport {IPoolAddressesProvider} from \"./IPoolAddressesProvider.sol\";\nimport {DataTypes} from \"./DataTypes.sol\";\n\n/**\n * @title IPool\n * @author Aave\n * @notice Defines the basic interface for an Aave Pool.\n */\ninterface IPool {\n    /**\n     * @dev Emitted on mintUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\n     * @param amount The amount of supplied assets\n     * @param referralCode The referral code used\n     */\n    event MintUnbacked(\n        address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on backUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param backer The address paying for the backing\n     * @param amount The amount added as backing\n     * @param fee The amount paid in fees\n     */\n    event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\n\n    /**\n     * @dev Emitted on supply()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\n     * @param amount The amount supplied\n     * @param referralCode The referral code used\n     */\n    event Supply(\n        address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlying asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to The address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     */\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\n     * @param referralCode The referral code used\n     */\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        DataTypes.InterestRateMode interestRateMode,\n        uint256 borrowRate,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\n     */\n    event Repay(\n        address indexed reserve, address indexed user, address indexed repayer, uint256 amount, bool useATokens\n    );\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     */\n    event SwapBorrowRateMode(\n        address indexed reserve, address indexed user, DataTypes.InterestRateMode interestRateMode\n    );\n\n    /**\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\n     * @param asset The address of the underlying asset of the reserve\n     * @param totalDebt The total isolation mode debt for the reserve\n     */\n    event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\n\n    /**\n     * @dev Emitted when the user selects a certain asset category for eMode\n     * @param user The address of the user\n     * @param categoryId The category id\n     */\n    event UserEModeSet(address indexed user, uint8 categoryId);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     */\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     */\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     */\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     */\n    event FlashLoan(\n        address indexed target,\n        address initiator,\n        address indexed asset,\n        uint256 amount,\n        DataTypes.InterestRateMode interestRateMode,\n        uint256 premium,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted when a borrower is liquidated.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     */\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated.\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The next liquidity rate\n     * @param stableBorrowRate The next stable borrow rate\n     * @param variableBorrowRate The next variable borrow rate\n     * @param liquidityIndex The next liquidity index\n     * @param variableBorrowIndex The next variable borrow index\n     */\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\n     * @param reserve The address of the reserve\n     * @param amountMinted The amount minted to the treasury\n     */\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\n\n    /**\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\n     * @param asset The address of the underlying asset to mint\n     * @param amount The amount to mint\n     * @param onBehalfOf The address that will receive the aTokens\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function mintUnbacked(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n    /**\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\n     * @param asset The address of the underlying asset to back\n     * @param amount The amount to back\n     * @param fee The amount paid in fees\n     * @return The backed amount\n     */\n    function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n    /**\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     */\n    function supplyWithPermit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external;\n\n    /**\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to The address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     */\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n\n    /**\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     */\n    function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf)\n        external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     */\n    function repay(address asset, uint256 amount, uint256 interestRateMode, address onBehalfOf)\n        external\n        returns (uint256);\n\n    /**\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     * @return The final amount repaid\n     */\n    function repayWithPermit(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external returns (uint256);\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\n     * equivalent debt tokens\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\n     * balance is not enough to cover the whole debt\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @return The final amount repaid\n     */\n    function repayWithATokens(address asset, uint256 amount, uint256 interestRateMode) external returns (uint256);\n\n    /**\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\n     * @param asset The address of the underlying asset borrowed\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     */\n    function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\n\n    /**\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     */\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\n     * @param asset The address of the underlying asset supplied\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\n     */\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n    /**\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     */\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://docs.aave.com/developers/\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts of the assets being flash-borrowed\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata interestRateModes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://docs.aave.com/developers/\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\n     * @param asset The address of the asset being flash-borrowed\n     * @param amount The amount of the asset being flash-borrowed\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function flashLoanSimple(\n        address receiverAddress,\n        address asset,\n        uint256 amount,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\n     * @return currentLiquidationThreshold The liquidation threshold of the user\n     * @return ltv The loan to value of The user\n     * @return healthFactor The current health factor of the user\n     */\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralBase,\n            uint256 totalDebtBase,\n            uint256 availableBorrowsBase,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    /**\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\n     * interest rate strategy\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\n     */\n    function initReserve(\n        address asset,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    /**\n     * @notice Drop a reserve\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     */\n    function dropReserve(address asset) external;\n\n    /**\n     * @notice Updates the address of the interest rate strategy contract\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param rateStrategyAddress The address of the interest rate strategy contract\n     */\n    function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external;\n\n    /**\n     * @notice Sets the configuration bitmap of the reserve as a whole\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param configuration The new configuration bitmap\n     */\n    function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration) external;\n\n    /**\n     * @notice Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     */\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @notice Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     */\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @notice Returns the normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the normalized variable debt per unit of asset\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\n     * \"dynamic\" variable index based on time, current stored index and virtual rate at the current\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\n     * combination with variable debt supply/balances.\n     * If using this function externally, consider that is possible to have an increasing normalized\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\n     * (e.g. only updates with non-zero variable debt supply)\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state and configuration data of the reserve\n     */\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    /**\n     * @notice Validates and finalizes an aToken transfer\n     * @dev Only callable by the overlying aToken of the `asset`\n     * @param asset The address of the underlying asset of the aToken\n     * @param from The user from which the aTokens are transferred\n     * @param to The user receiving the aTokens\n     * @param amount The amount being transferred/withdrawn\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\n     */\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromBefore,\n        uint256 balanceToBefore\n    ) external;\n\n    /**\n     * @notice Returns the list of the underlying assets of all the initialized reserves\n     * @dev It does not include dropped reserves\n     * @return The addresses of the underlying assets of the initialized reserves\n     */\n    function getReservesList() external view returns (address[] memory);\n\n    /**\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\n     * @return The address of the reserve associated with id\n     */\n    function getReserveAddressById(uint16 id) external view returns (address);\n\n    /**\n     * @notice Returns the PoolAddressesProvider connected to this contract\n     * @return The address of the PoolAddressesProvider\n     */\n    function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\n\n    /**\n     * @notice Updates the protocol fee on the bridging\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\n     */\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\n\n    /**\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\n     * - A part is sent to aToken holders as extra, one time accumulated interest\n     * - A part is collected by the protocol treasury\n     * @dev The total premium is calculated on the total borrowed amount\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\n     * @dev Only callable by the PoolConfigurator contract\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\n     */\n    function updateFlashloanPremiums(uint128 flashLoanPremiumTotal, uint128 flashLoanPremiumToProtocol) external;\n\n    /**\n     * @notice Configures a new category for the eMode.\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\n     * The category 0 is reserved as it's the default for volatile assets\n     * @param id The id of the category\n     * @param config The configuration of the category\n     */\n    function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\n\n    /**\n     * @notice Returns the data of an eMode category\n     * @param id The id of the category\n     * @return The configuration data of the category\n     */\n    function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\n\n    /**\n     * @notice Allows a user to use the protocol in eMode\n     * @param categoryId The id of the category\n     */\n    function setUserEMode(uint8 categoryId) external;\n\n    /**\n     * @notice Returns the eMode the user is using\n     * @param user The address of the user\n     * @return The eMode id\n     */\n    function getUserEMode(address user) external view returns (uint256);\n\n    /**\n     * @notice Resets the isolation mode total debt of the given asset to zero\n     * @dev It requires the given asset has zero debt ceiling\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\n     */\n    function resetIsolationModeTotalDebt(address asset) external;\n\n    /**\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\n     * @return The percentage of available liquidity to borrow, expressed in bps\n     */\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\n\n    /**\n     * @notice Returns the total fee on flash loans\n     * @return The total fee on flashloans\n     */\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n\n    /**\n     * @notice Returns the part of the bridge fees sent to protocol\n     * @return The bridge fee sent to the protocol treasury\n     */\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\n\n    /**\n     * @notice Returns the part of the flashloan fees sent to protocol\n     * @return The flashloan fee sent to the protocol treasury\n     */\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\n\n    /**\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\n     * @return The maximum number of reserves supported\n     */\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\n\n    /**\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\n     * @param assets The list of reserves for which the minting needs to be executed\n     */\n    function mintToTreasury(address[] calldata assets) external;\n\n    /**\n     * @notice Rescue and transfer tokens locked in this contract\n     * @param token The address of the token\n     * @param to The address of the recipient\n     * @param amount The amount of token to transfer\n     */\n    function rescueTokens(address token, address to, uint256 amount) external;\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @dev Deprecated: Use the `supply` function instead\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n}\n"
    },
    "contracts/external/aave-v3/IPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// https://github.com/aave/aave-v3-core/blob/6070e82d962d9b12835c88e68210d0e63f08d035/contracts/interfaces/IPoolAddressesProvider.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n */\ninterface IPoolAddressesProvider {\n    /**\n     * @dev Emitted when the market identifier is updated.\n     * @param oldMarketId The old id of the market\n     * @param newMarketId The new id of the market\n     */\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n    /**\n     * @dev Emitted when the pool is updated.\n     * @param oldAddress The old address of the Pool\n     * @param newAddress The new address of the Pool\n     */\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the pool configurator is updated.\n     * @param oldAddress The old address of the PoolConfigurator\n     * @param newAddress The new address of the PoolConfigurator\n     */\n    event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the price oracle is updated.\n     * @param oldAddress The old address of the PriceOracle\n     * @param newAddress The new address of the PriceOracle\n     */\n    event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the ACL manager is updated.\n     * @param oldAddress The old address of the ACLManager\n     * @param newAddress The new address of the ACLManager\n     */\n    event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the ACL admin is updated.\n     * @param oldAddress The old address of the ACLAdmin\n     * @param newAddress The new address of the ACLAdmin\n     */\n    event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the price oracle sentinel is updated.\n     * @param oldAddress The old address of the PriceOracleSentinel\n     * @param newAddress The new address of the PriceOracleSentinel\n     */\n    event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the pool data provider is updated.\n     * @param oldAddress The old address of the PoolDataProvider\n     * @param newAddress The new address of the PoolDataProvider\n     */\n    event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when a new proxy is created.\n     * @param id The identifier of the proxy\n     * @param proxyAddress The address of the created proxy contract\n     * @param implementationAddress The address of the implementation contract\n     */\n    event ProxyCreated(bytes32 indexed id, address indexed proxyAddress, address indexed implementationAddress);\n\n    /**\n     * @dev Emitted when a new non-proxied contract address is registered.\n     * @param id The identifier of the contract\n     * @param oldAddress The address of the old contract\n     * @param newAddress The address of the new contract\n     */\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the implementation of the proxy registered with id is updated\n     * @param id The identifier of the contract\n     * @param proxyAddress The address of the proxy contract\n     * @param oldImplementationAddress The address of the old implementation contract\n     * @param newImplementationAddress The address of the new implementation contract\n     */\n    event AddressSetAsProxy(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address oldImplementationAddress,\n        address indexed newImplementationAddress\n    );\n\n    /**\n     * @notice Returns the id of the Aave market to which this contract points to.\n     * @return The market id\n     */\n    function getMarketId() external view returns (string memory);\n\n    /**\n     * @notice Associates an id with a specific PoolAddressesProvider.\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n     * identify and validate multiple Aave markets.\n     * @param newMarketId The market id\n     */\n    function setMarketId(string calldata newMarketId) external;\n\n    /**\n     * @notice Returns an address by its identifier.\n     * @dev The returned address might be an EOA or a contract, potentially proxied\n     * @dev It returns ZERO if there is no registered address with the given id\n     * @param id The id\n     * @return The address of the registered for the specified id\n     */\n    function getAddress(bytes32 id) external view returns (address);\n\n    /**\n     * @notice General function to update the implementation of a proxy registered with\n     * certain `id`. If there is no proxy registered, it will instantiate one and\n     * set as implementation the `newImplementationAddress`.\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\n     * setter function, in order to avoid unexpected consequences\n     * @param id The id\n     * @param newImplementationAddress The address of the new implementation\n     */\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\n\n    /**\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n     * @param id The id\n     * @param newAddress The address to set\n     */\n    function setAddress(bytes32 id, address newAddress) external;\n\n    /**\n     * @notice Returns the address of the Pool proxy.\n     * @return The Pool proxy address\n     */\n    function getPool() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the Pool, or creates a proxy\n     * setting the new `pool` implementation when the function is called for the first time.\n     * @param newPoolImpl The new Pool implementation\n     */\n    function setPoolImpl(address newPoolImpl) external;\n\n    /**\n     * @notice Returns the address of the PoolConfigurator proxy.\n     * @return The PoolConfigurator proxy address\n     */\n    function getPoolConfigurator() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n     */\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n    /**\n     * @notice Returns the address of the price oracle.\n     * @return The address of the PriceOracle\n     */\n    function getPriceOracle() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle.\n     * @param newPriceOracle The address of the new PriceOracle\n     */\n    function setPriceOracle(address newPriceOracle) external;\n\n    /**\n     * @notice Returns the address of the ACL manager.\n     * @return The address of the ACLManager\n     */\n    function getACLManager() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL manager.\n     * @param newAclManager The address of the new ACLManager\n     */\n    function setACLManager(address newAclManager) external;\n\n    /**\n     * @notice Returns the address of the ACL admin.\n     * @return The address of the ACL admin\n     */\n    function getACLAdmin() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL admin.\n     * @param newAclAdmin The address of the new ACL admin\n     */\n    function setACLAdmin(address newAclAdmin) external;\n\n    /**\n     * @notice Returns the address of the price oracle sentinel.\n     * @return The address of the PriceOracleSentinel\n     */\n    function getPriceOracleSentinel() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle sentinel.\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n     */\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n    /**\n     * @notice Returns the address of the data provider.\n     * @return The address of the DataProvider\n     */\n    function getPoolDataProvider() external view returns (address);\n\n    /**\n     * @notice Updates the address of the data provider.\n     * @param newDataProvider The address of the new DataProvider\n     */\n    function setPoolDataProvider(address newDataProvider) external;\n}\n"
    },
    "contracts/external/aave-v3/IPoolDataProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IPoolAddressesProvider} from \"./IPoolAddressesProvider.sol\";\n\n/**\n * @title IPoolDataProvider\n * @author Aave\n * @notice Defines the basic interface of a PoolDataProvider\n */\ninterface IPoolDataProvider {\n    struct TokenData {\n        string symbol;\n        address tokenAddress;\n    }\n\n    /**\n     * @notice Returns the address for the PoolAddressesProvider contract.\n     * @return The address for the PoolAddressesProvider contract\n     */\n    function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\n\n    /**\n     * @notice Returns the list of the existing reserves in the pool.\n     * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.\n     * @return The list of reserves, pairs of symbols and addresses\n     */\n    function getAllReservesTokens() external view returns (TokenData[] memory);\n\n    /**\n     * @notice Returns the list of the existing ATokens in the pool.\n     * @return The list of ATokens, pairs of symbols and addresses\n     */\n    function getAllATokens() external view returns (TokenData[] memory);\n\n    /**\n     * @notice Returns the configuration data of the reserve\n     * @dev Not returning borrow and supply caps for compatibility, nor pause flag\n     * @param asset The address of the underlying asset of the reserve\n     * @return decimals The number of decimals of the reserve\n     * @return ltv The ltv of the reserve\n     * @return liquidationThreshold The liquidationThreshold of the reserve\n     * @return liquidationBonus The liquidationBonus of the reserve\n     * @return reserveFactor The reserveFactor of the reserve\n     * @return usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise\n     * @return borrowingEnabled True if borrowing is enabled, false otherwise\n     * @return stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise\n     * @return isActive True if it is active, false otherwise\n     * @return isFrozen True if it is frozen, false otherwise\n     */\n    function getReserveConfigurationData(address asset)\n        external\n        view\n        returns (\n            uint256 decimals,\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            uint256 reserveFactor,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive,\n            bool isFrozen\n        );\n\n    /**\n     * @notice Returns the efficiency mode category of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The eMode id of the reserve\n     */\n    function getReserveEModeCategory(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the caps parameters of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return borrowCap The borrow cap of the reserve\n     * @return supplyCap The supply cap of the reserve\n     */\n    function getReserveCaps(address asset) external view returns (uint256 borrowCap, uint256 supplyCap);\n\n    /**\n     * @notice Returns if the pool is paused\n     * @param asset The address of the underlying asset of the reserve\n     * @return isPaused True if the pool is paused, false otherwise\n     */\n    function getPaused(address asset) external view returns (bool isPaused);\n\n    /**\n     * @notice Returns the siloed borrowing flag\n     * @param asset The address of the underlying asset of the reserve\n     * @return True if the asset is siloed for borrowing\n     */\n    function getSiloedBorrowing(address asset) external view returns (bool);\n\n    /**\n     * @notice Returns the protocol fee on the liquidation bonus\n     * @param asset The address of the underlying asset of the reserve\n     * @return The protocol fee on liquidation\n     */\n    function getLiquidationProtocolFee(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the unbacked mint cap of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The unbacked mint cap of the reserve\n     */\n    function getUnbackedMintCap(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the debt ceiling of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The debt ceiling of the reserve\n     */\n    function getDebtCeiling(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the debt ceiling decimals\n     * @return The debt ceiling decimals\n     */\n    function getDebtCeilingDecimals() external pure returns (uint256);\n\n    /**\n     * @notice Returns the reserve data\n     * @param asset The address of the underlying asset of the reserve\n     * @return unbacked The amount of unbacked tokens\n     * @return accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted\n     * @return totalAToken The total supply of the aToken\n     * @return totalStableDebt The total stable debt of the reserve\n     * @return totalVariableDebt The total variable debt of the reserve\n     * @return liquidityRate The liquidity rate of the reserve\n     * @return variableBorrowRate The variable borrow rate of the reserve\n     * @return stableBorrowRate The stable borrow rate of the reserve\n     * @return averageStableBorrowRate The average stable borrow rate of the reserve\n     * @return liquidityIndex The liquidity index of the reserve\n     * @return variableBorrowIndex The variable borrow index of the reserve\n     * @return lastUpdateTimestamp The timestamp of the last update of the reserve\n     */\n    function getReserveData(address asset)\n        external\n        view\n        returns (\n            uint256 unbacked,\n            uint256 accruedToTreasuryScaled,\n            uint256 totalAToken,\n            uint256 totalStableDebt,\n            uint256 totalVariableDebt,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            uint40 lastUpdateTimestamp\n        );\n\n    /**\n     * @notice Returns the total supply of aTokens for a given asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The total supply of the aToken\n     */\n    function getATokenTotalSupply(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the total debt for a given asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The total debt for asset\n     */\n    function getTotalDebt(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the user data in a reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @param user The address of the user\n     * @return currentATokenBalance The current AToken balance of the user\n     * @return currentStableDebt The current stable debt of the user\n     * @return currentVariableDebt The current variable debt of the user\n     * @return principalStableDebt The principal stable debt of the user\n     * @return scaledVariableDebt The scaled variable debt of the user\n     * @return stableBorrowRate The stable borrow rate of the user\n     * @return liquidityRate The liquidity rate of the reserve\n     * @return stableRateLastUpdated The timestamp of the last update of the user stable rate\n     * @return usageAsCollateralEnabled True if the user is using the asset as collateral, false\n     *         otherwise\n     */\n    function getUserReserveData(address asset, address user)\n        external\n        view\n        returns (\n            uint256 currentATokenBalance,\n            uint256 currentStableDebt,\n            uint256 currentVariableDebt,\n            uint256 principalStableDebt,\n            uint256 scaledVariableDebt,\n            uint256 stableBorrowRate,\n            uint256 liquidityRate,\n            uint40 stableRateLastUpdated,\n            bool usageAsCollateralEnabled\n        );\n\n    /**\n     * @notice Returns the token addresses of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return aTokenAddress The AToken address of the reserve\n     * @return stableDebtTokenAddress The StableDebtToken address of the reserve\n     * @return variableDebtTokenAddress The VariableDebtToken address of the reserve\n     */\n    function getReserveTokensAddresses(address asset)\n        external\n        view\n        returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\n\n    /**\n     * @notice Returns the address of the Interest Rate strategy\n     * @param asset The address of the underlying asset of the reserve\n     * @return irStrategyAddress The address of the Interest Rate strategy\n     */\n    function getInterestRateStrategyAddress(address asset) external view returns (address irStrategyAddress);\n\n    /**\n     * @notice Returns whether the reserve has FlashLoans enabled or disabled\n     * @param asset The address of the underlying asset of the reserve\n     * @return True if FlashLoans are enabled, false otherwise\n     */\n    function getFlashLoanEnabled(address asset) external view returns (bool);\n}\n"
    },
    "contracts/external/aave-v3/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// https://github.com/aave/aave-v3-core/blob/6070e82d962d9b12835c88e68210d0e63f08d035/contracts/interfaces/IScaledBalanceToken.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @title IScaledBalanceToken\n * @author Aave\n * @notice Defines the basic interface for a scaled-balance token.\n */\ninterface IScaledBalanceToken {\n    /**\n     * @dev Emitted after the mint action\n     * @param caller The address performing the mint\n     * @param onBehalfOf The address of the user that will receive the minted tokens\n     * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\n     * @param index The next liquidity index of the reserve\n     */\n    event Mint(\n        address indexed caller, address indexed onBehalfOf, uint256 value, uint256 balanceIncrease, uint256 index\n    );\n\n    /**\n     * @dev Emitted after the burn action\n     * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\n     * @param from The address from which the tokens will be burned\n     * @param target The address that will receive the underlying, if any\n     * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\n     * @param index The next liquidity index of the reserve\n     */\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 balanceIncrease, uint256 index);\n\n    /**\n     * @notice Returns the scaled balance of the user.\n     * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\n     * at the moment of the update\n     * @param user The user whose balance is calculated\n     * @return The scaled balance of the user\n     */\n    function scaledBalanceOf(address user) external view returns (uint256);\n\n    /**\n     * @notice Returns the scaled balance of the user and the scaled total supply.\n     * @param user The address of the user\n     * @return The scaled balance of the user\n     * @return The scaled total supply\n     */\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n\n    /**\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\n     * @return The scaled total supply\n     */\n    function scaledTotalSupply() external view returns (uint256);\n\n    /**\n     * @notice Returns last index interest was accrued to the user's balance\n     * @param user The address of the user\n     * @return The last index interest was accrued to the user's balance, expressed in ray\n     */\n    function getPreviousIndex(address user) external view returns (uint256);\n}\n"
    },
    "contracts/external/aave-v3/ReserveConfiguration.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// https://github.com/aave/aave-v3-core/blob/6070e82d962d9b12835c88e68210d0e63f08d035/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\n\npragma solidity ^0.8.0;\n\nimport {Errors} from \"./Errors.sol\";\nimport {DataTypes} from \"./DataTypes.sol\";\n\n/**\n * @title ReserveConfiguration library\n * @author Aave\n * @notice Implements the bitmap logic to handle the reserve configuration\n */\nlibrary ReserveConfiguration {\n    uint256 internal constant LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\n    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\n    uint256 internal constant LIQUIDATION_BONUS_MASK =\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\n    uint256 internal constant DECIMALS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant STABLE_BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant PAUSED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant SILOED_BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant FLASHLOAN_ENABLED_MASK =\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant BORROW_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant SUPPLY_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =\n        0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant EMODE_CATEGORY_MASK = 0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant UNBACKED_MINT_CAP_MASK =\n        0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 internal constant DEBT_CEILING_MASK = 0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n\n    /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\n    uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\n    uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\n    uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\n    uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\n    uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\n    uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\n    uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\n    uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\n    uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\n    uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\n    uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\n    uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\n    uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\n    uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\n    uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\n    uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\n    uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\n\n    uint256 internal constant MAX_VALID_LTV = 65535;\n    uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\n    uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\n    uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\n    uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\n    uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\n    uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\n    uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\n    uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\n\n    uint256 public constant DEBT_CEILING_DECIMALS = 2;\n    uint16 public constant MAX_RESERVES_COUNT = 128;\n\n    /**\n     * @notice Sets the Loan to Value of the reserve\n     * @param self The reserve configuration\n     * @param ltv The new ltv\n     */\n    function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\n        require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\n\n        self.data = (self.data & LTV_MASK) | ltv;\n    }\n\n    /**\n     * @notice Gets the Loan to Value of the reserve\n     * @param self The reserve configuration\n     * @return The loan to value\n     */\n    function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return self.data & ~LTV_MASK;\n    }\n\n    /**\n     * @notice Sets the liquidation threshold of the reserve\n     * @param self The reserve configuration\n     * @param threshold The new liquidation threshold\n     */\n    function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\n        require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\n\n        self.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the liquidation threshold of the reserve\n     * @param self The reserve configuration\n     * @return The liquidation threshold\n     */\n    function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the liquidation bonus of the reserve\n     * @param self The reserve configuration\n     * @param bonus The new liquidation bonus\n     */\n    function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\n        require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\n\n        self.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the liquidation bonus of the reserve\n     * @param self The reserve configuration\n     * @return The liquidation bonus\n     */\n    function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the decimals of the underlying asset of the reserve\n     * @param self The reserve configuration\n     * @param decimals The decimals\n     */\n    function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\n        require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\n\n        self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the decimals of the underlying asset of the reserve\n     * @param self The reserve configuration\n     * @return The decimals of the asset\n     */\n    function getDecimals(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the active state of the reserve\n     * @param self The reserve configuration\n     * @param active The active state\n     */\n    function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\n        self.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the active state of the reserve\n     * @param self The reserve configuration\n     * @return The active state\n     */\n    function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n        return (self.data & ~ACTIVE_MASK) != 0;\n    }\n\n    /**\n     * @notice Sets the frozen state of the reserve\n     * @param self The reserve configuration\n     * @param frozen The frozen state\n     */\n    function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\n        self.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the frozen state of the reserve\n     * @param self The reserve configuration\n     * @return The frozen state\n     */\n    function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n        return (self.data & ~FROZEN_MASK) != 0;\n    }\n\n    /**\n     * @notice Sets the paused state of the reserve\n     * @param self The reserve configuration\n     * @param paused The paused state\n     */\n    function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\n        self.data = (self.data & PAUSED_MASK) | (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the paused state of the reserve\n     * @param self The reserve configuration\n     * @return The paused state\n     */\n    function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n        return (self.data & ~PAUSED_MASK) != 0;\n    }\n\n    /**\n     * @notice Sets the borrowable in isolation flag for the reserve.\n     * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\n     * amount will be accumulated in the isolated collateral's total debt exposure.\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\n     * consistency in the debt ceiling calculations.\n     * @param self The reserve configuration\n     * @param borrowable True if the asset is borrowable\n     */\n    function setBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self, bool borrowable) internal pure {\n        self.data = (self.data & BORROWABLE_IN_ISOLATION_MASK)\n            | (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the borrowable in isolation flag for the reserve.\n     * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\n     * isolated collateral is accounted for in the isolated collateral's total debt exposure.\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\n     * consistency in the debt ceiling calculations.\n     * @param self The reserve configuration\n     * @return The borrowable in isolation flag\n     */\n    function getBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\n    }\n\n    /**\n     * @notice Sets the siloed borrowing flag for the reserve.\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\n     * @param self The reserve configuration\n     * @param siloed True if the asset is siloed\n     */\n    function setSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self, bool siloed) internal pure {\n        self.data =\n            (self.data & SILOED_BORROWING_MASK) | (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the siloed borrowing flag for the reserve.\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\n     * @param self The reserve configuration\n     * @return The siloed borrowing flag\n     */\n    function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n        return (self.data & ~SILOED_BORROWING_MASK) != 0;\n    }\n\n    /**\n     * @notice Enables or disables borrowing on the reserve\n     * @param self The reserve configuration\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\n     */\n    function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\n        self.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the borrowing state of the reserve\n     * @param self The reserve configuration\n     * @return The borrowing state\n     */\n    function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n        return (self.data & ~BORROWING_MASK) != 0;\n    }\n\n    /**\n     * @notice Enables or disables stable rate borrowing on the reserve\n     * @param self The reserve configuration\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\n     */\n    function setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\n        self.data = (self.data & STABLE_BORROWING_MASK)\n            | (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the stable rate borrowing state of the reserve\n     * @param self The reserve configuration\n     * @return The stable rate borrowing state\n     */\n    function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\n        internal\n        pure\n        returns (bool)\n    {\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\n    }\n\n    /**\n     * @notice Sets the reserve factor of the reserve\n     * @param self The reserve configuration\n     * @param reserveFactor The reserve factor\n     */\n    function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\n        require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\n\n        self.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the reserve factor of the reserve\n     * @param self The reserve configuration\n     * @return The reserve factor\n     */\n    function getReserveFactor(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the borrow cap of the reserve\n     * @param self The reserve configuration\n     * @param borrowCap The borrow cap\n     */\n    function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap) internal pure {\n        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\n\n        self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the borrow cap of the reserve\n     * @param self The reserve configuration\n     * @return The borrow cap\n     */\n    function getBorrowCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the supply cap of the reserve\n     * @param self The reserve configuration\n     * @param supplyCap The supply cap\n     */\n    function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap) internal pure {\n        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\n\n        self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the supply cap of the reserve\n     * @param self The reserve configuration\n     * @return The supply cap\n     */\n    function getSupplyCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the debt ceiling in isolation mode for the asset\n     * @param self The reserve configuration\n     * @param ceiling The maximum debt ceiling for the asset\n     */\n    function setDebtCeiling(DataTypes.ReserveConfigurationMap memory self, uint256 ceiling) internal pure {\n        require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\n\n        self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\n     * @param self The reserve configuration\n     * @return The debt ceiling (0 = isolation mode disabled)\n     */\n    function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the liquidation protocol fee of the reserve\n     * @param self The reserve configuration\n     * @param liquidationProtocolFee The liquidation protocol fee\n     */\n    function setLiquidationProtocolFee(DataTypes.ReserveConfigurationMap memory self, uint256 liquidationProtocolFee)\n        internal\n        pure\n    {\n        require(liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE, Errors.INVALID_LIQUIDATION_PROTOCOL_FEE);\n\n        self.data = (self.data & LIQUIDATION_PROTOCOL_FEE_MASK)\n            | (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\n    }\n\n    /**\n     * @dev Gets the liquidation protocol fee\n     * @param self The reserve configuration\n     * @return The liquidation protocol fee\n     */\n    function getLiquidationProtocolFee(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the unbacked mint cap of the reserve\n     * @param self The reserve configuration\n     * @param unbackedMintCap The unbacked mint cap\n     */\n    function setUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self, uint256 unbackedMintCap) internal pure {\n        require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\n\n        self.data = (self.data & UNBACKED_MINT_CAP_MASK) | (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\n    }\n\n    /**\n     * @dev Gets the unbacked mint cap of the reserve\n     * @param self The reserve configuration\n     * @return The unbacked mint cap\n     */\n    function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the eMode asset category\n     * @param self The reserve configuration\n     * @param category The asset category when the user selects the eMode\n     */\n    function setEModeCategory(DataTypes.ReserveConfigurationMap memory self, uint256 category) internal pure {\n        require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\n\n        self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\n    }\n\n    /**\n     * @dev Gets the eMode asset category\n     * @param self The reserve configuration\n     * @return The eMode category for the asset\n     */\n    function getEModeCategory(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n        return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\n    }\n\n    /**\n     * @notice Sets the flashloanable flag for the reserve\n     * @param self The reserve configuration\n     * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\n     */\n    function setFlashLoanEnabled(DataTypes.ReserveConfigurationMap memory self, bool flashLoanEnabled) internal pure {\n        self.data = (self.data & FLASHLOAN_ENABLED_MASK)\n            | (uint256(flashLoanEnabled ? 1 : 0) << FLASHLOAN_ENABLED_START_BIT_POSITION);\n    }\n\n    /**\n     * @notice Gets the flashloanable flag for the reserve\n     * @param self The reserve configuration\n     * @return The flashloanable flag\n     */\n    function getFlashLoanEnabled(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n        return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\n    }\n\n    /**\n     * @notice Gets the configuration flags of the reserve\n     * @param self The reserve configuration\n     * @return The state flag representing active\n     * @return The state flag representing frozen\n     * @return The state flag representing borrowing enabled\n     * @return The state flag representing stableRateBorrowing enabled\n     * @return The state flag representing paused\n     */\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\n        internal\n        pure\n        returns (bool, bool, bool, bool, bool)\n    {\n        uint256 dataLocal = self.data;\n\n        return (\n            (dataLocal & ~ACTIVE_MASK) != 0,\n            (dataLocal & ~FROZEN_MASK) != 0,\n            (dataLocal & ~BORROWING_MASK) != 0,\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0,\n            (dataLocal & ~PAUSED_MASK) != 0\n        );\n    }\n\n    /**\n     * @notice Gets the configuration parameters of the reserve from storage\n     * @param self The reserve configuration\n     * @return The state param representing ltv\n     * @return The state param representing liquidation threshold\n     * @return The state param representing liquidation bonus\n     * @return The state param representing reserve decimals\n     * @return The state param representing reserve factor\n     * @return The state param representing eMode category\n     */\n    function getParams(DataTypes.ReserveConfigurationMap memory self)\n        internal\n        pure\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\n    {\n        uint256 dataLocal = self.data;\n\n        return (\n            dataLocal & ~LTV_MASK,\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n            (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n            (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\n            (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\n        );\n    }\n\n    /**\n     * @notice Gets the caps parameters of the reserve from storage\n     * @param self The reserve configuration\n     * @return The state param representing borrow cap\n     * @return The state param representing supply cap.\n     */\n    function getCaps(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256, uint256) {\n        uint256 dataLocal = self.data;\n\n        return (\n            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\n            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\n        );\n    }\n}\n"
    },
    "contracts/external/clober-v2/BookId.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {IBookManager} from \"./IBookManager.sol\";\n\ntype BookId is uint192;\n\nlibrary BookIdLibrary {\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\n        bytes32 hash = keccak256(abi.encode(bookKey));\n        assembly {\n            id := hash\n        }\n    }\n}\n"
    },
    "contracts/external/clober-v2/Currency.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ntype Currency is address;\n\n/// @title CurrencyLibrary\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\nlibrary CurrencyLibrary {\n    using CurrencyLibrary for Currency;\n\n    /// @notice Thrown when a native transfer fails\n    error NativeTransferFailed();\n\n    /// @notice Thrown when an ERC20 transfer fails\n    error ERC20TransferFailed();\n\n    Currency public constant NATIVE = Currency.wrap(address(0));\n\n    function transfer(Currency currency, address to, uint256 amount) internal {\n        // implementation from\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\n\n        bool success;\n        if (currency.isNative()) {\n            assembly {\n                // Transfer the ETH and store if it succeeded or not.\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n\n            if (!success) revert NativeTransferFailed();\n        } else {\n            assembly {\n                // Get a pointer to some free memory.\n                let freeMemoryPointer := mload(0x40)\n\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n                success :=\n                    and(\n                        // Set success to whether the call reverted, if not we check it either\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                        // Counterintuitively, this call must be positioned second to the or() call in the\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\n                    )\n            }\n\n            if (!success) revert ERC20TransferFailed();\n        }\n    }\n\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\n        if (currency.isNative()) return address(this).balance;\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\n    }\n\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\n        return Currency.unwrap(currency) == Currency.unwrap(other);\n    }\n\n    function isNative(Currency currency) internal pure returns (bool) {\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\n    }\n\n    function toId(Currency currency) internal pure returns (uint256) {\n        return uint160(Currency.unwrap(currency));\n    }\n\n    function fromId(uint256 id) internal pure returns (Currency) {\n        return Currency.wrap(address(uint160(id)));\n    }\n}\n"
    },
    "contracts/external/clober-v2/FeePolicy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./Math.sol\";\n\ntype FeePolicy is uint24;\n\nlibrary FeePolicyLibrary {\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\n    int256 internal constant MAX_FEE_RATE = 500000;\n    int256 internal constant MIN_FEE_RATE = -500000;\n\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\n\n    error InvalidFeePolicy();\n\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\n            revert InvalidFeePolicy();\n        }\n\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\n        assembly {\n            feePolicy := or(mask, add(rate_, MAX_FEE_RATE))\n        }\n    }\n\n    function isValid(FeePolicy self) internal pure returns (bool) {\n        int24 r = rate(self);\n\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\n    }\n\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\n        assembly {\n            f := shr(23, self)\n        }\n    }\n\n    function rate(FeePolicy self) internal pure returns (int24 r) {\n        assembly {\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\n        }\n    }\n\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\n        int24 r = rate(self);\n\n        bool positive = r > 0;\n        uint256 absRate;\n        unchecked {\n            absRate = uint256(uint24(positive ? r : -r));\n        }\n        // @dev absFee must be less than type(int256).max\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\n        fee = positive ? int256(absFee) : -int256(absFee);\n    }\n\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\n        internal\n        pure\n        returns (uint256 originalAmount)\n    {\n        int24 r = rate(self);\n\n        bool positive = r > 0;\n        uint256 divider;\n        assembly {\n            if reverseFee { r := sub(0, r) }\n            divider := add(RATE_PRECISION, r)\n        }\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\n    }\n}\n"
    },
    "contracts/external/clober-v2/IBookManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport {BookId} from \"./BookId.sol\";\nimport {Currency} from \"./Currency.sol\";\nimport {OrderId} from \"./OrderId.sol\";\nimport {Tick} from \"./Tick.sol\";\nimport {FeePolicy} from \"./FeePolicy.sol\";\nimport {IERC721Permit} from \"./IERC721Permit.sol\";\nimport {IHooks} from \"./IHooks.sol\";\n\n/**\n * @title IBookManager\n * @notice The interface for the BookManager contract\n */\ninterface IBookManager is IERC721Metadata, IERC721Permit {\n    error InvalidUnit();\n    error InvalidFeePolicy();\n    error InvalidProvider(address provider);\n    error LockedBy(address locker, address hook);\n    error CurrencyNotSettled();\n\n    /**\n     * @notice Event emitted when a new book is opened\n     * @param id The book id\n     * @param base The base currency\n     * @param quote The quote currency\n     * @param unit The unit of the book\n     * @param makerPolicy The maker fee policy\n     * @param takerPolicy The taker fee policy\n     * @param hooks The hooks contract\n     */\n    event Open(\n        BookId indexed id,\n        Currency indexed base,\n        Currency indexed quote,\n        uint64 unit,\n        FeePolicy makerPolicy,\n        FeePolicy takerPolicy,\n        IHooks hooks\n    );\n\n    /**\n     * @notice Event emitted when a new order is made\n     * @param bookId The book id\n     * @param user The user address\n     * @param tick The order tick\n     * @param orderIndex The order index\n     * @param amount The order amount\n     * @param provider The provider address\n     */\n    event Make(\n        BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 amount, address provider\n    );\n\n    /**\n     * @notice Event emitted when an order is taken\n     * @param bookId The book id\n     * @param user The user address\n     * @param tick The order tick\n     * @param amount The order amount\n     */\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 amount);\n\n    /**\n     * @notice Event emitted when an order is canceled\n     * @param orderId The order id\n     * @param canceledAmount The canceled amount\n     */\n    event Cancel(OrderId indexed orderId, uint64 canceledAmount);\n\n    /**\n     * @notice Event emitted when an order is claimed\n     * @param orderId The order id\n     * @param rawAmount The claimed amount\n     */\n    event Claim(OrderId indexed orderId, uint64 rawAmount);\n\n    /**\n     * @notice Event emitted when a provider is whitelisted\n     * @param provider The provider address\n     */\n    event Whitelist(address indexed provider);\n\n    /**\n     * @notice Event emitted when a provider is delisted\n     * @param provider The provider address\n     */\n    event Delist(address indexed provider);\n\n    /**\n     * @notice Event emitted when a provider collects fees\n     * @param provider The provider address\n     * @param currency The currency\n     * @param amount The collected amount\n     */\n    event Collect(address indexed provider, Currency indexed currency, uint256 amount);\n\n    /**\n     * @notice Event emitted when new default provider is set\n     * @param newDefaultProvider The new default provider address\n     */\n    event SetDefaultProvider(address indexed newDefaultProvider);\n\n    struct BookKey {\n        Currency base;\n        uint64 unit;\n        Currency quote;\n        FeePolicy makerPolicy;\n        IHooks hooks;\n        FeePolicy takerPolicy;\n    }\n\n    /**\n     * @notice Returns the base URI\n     * @return The base URI\n     */\n    function baseURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the contract URI\n     * @return The contract URI\n     */\n    function contractURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the default provider\n     * @return The default provider\n     */\n    function defaultProvider() external view returns (address);\n\n    /**\n     * @notice Calculates the currency balance changes for a given locker\n     * @param locker The address of the locker\n     * @param currency The currency in question\n     * @return The net change in currency balance\n     */\n    function currencyDelta(address locker, Currency currency) external view returns (int256);\n\n    /**\n     * @notice Returns the total reserves of a given currency\n     * @param currency The currency in question\n     * @return The total reserves amount\n     */\n    function reservesOf(Currency currency) external view returns (uint256);\n\n    /**\n     * @notice Checks if a provider is whitelisted\n     * @param provider The address of the provider\n     * @return True if the provider is whitelisted, false otherwise\n     */\n    function isWhitelisted(address provider) external view returns (bool);\n\n    /**\n     * @notice Verifies if an owner has authorized a spender for a token\n     * @param owner The address of the token owner\n     * @param spender The address of the spender\n     * @param tokenId The token ID\n     */\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\n\n    /**\n     * @notice Calculates the amount owed to a provider in a given currency\n     * @param provider The provider's address\n     * @param currency The currency in question\n     * @return The owed amount\n     */\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\n\n    /**\n     * @notice Retrieves the book key for a given book ID\n     * @param id The book ID\n     * @return The book key\n     */\n    function getBookKey(BookId id) external view returns (BookKey memory);\n\n    struct OrderInfo {\n        address provider;\n        uint64 open;\n        uint64 claimable;\n    }\n\n    /**\n     * @notice Provides information about an order\n     * @param id The order ID\n     * @return Order information including provider, open status, and claimable amount\n     */\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\n\n    /**\n     * @notice Retrieves the locker and caller addresses for a given lock\n     * @param i The index of the lock\n     * @return locker The locker's address\n     * @return lockCaller The caller's address\n     */\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\n\n    /**\n     * @notice Provides the lock data\n     * @return The lock data including necessary numeric values\n     */\n    function getLockData() external view returns (uint128, uint128);\n\n    /**\n     * @notice Returns the depth of a given book ID and tick\n     * @param id The book ID\n     * @param tick The tick\n     * @return The depth of the tick\n     */\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\n\n    /**\n     * @notice Retrieves the highest tick for a given book ID\n     * @param id The book ID\n     * @return tick The highest tick\n     */\n    function getHighest(BookId id) external view returns (Tick tick);\n\n    /**\n     * @notice Finds the maximum tick less than a specified tick in a book\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the lowest\n     * @param id The book ID\n     * @param tick The specified tick\n     * @return The next lower tick\n     */\n    function maxLessThan(BookId id, Tick tick) external view returns (Tick);\n\n    /**\n     * @notice Checks if a book is empty\n     * @param id The book ID\n     * @return True if the book is empty, false otherwise\n     */\n    function isEmpty(BookId id) external view returns (bool);\n\n    /**\n     * @notice Loads a value from a specific storage slot\n     * @param slot The storage slot\n     * @return The value in the slot\n     */\n    function load(bytes32 slot) external view returns (bytes32);\n\n    /**\n     * @notice Loads a sequence of values starting from a specific slot\n     * @param startSlot The starting slot\n     * @param nSlot The number of slots to load\n     * @return The sequence of values\n     */\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\n\n    /**\n     * @notice Opens a new book\n     * @param key The book key\n     * @param hookData The hook data\n     */\n    function open(BookKey calldata key, bytes calldata hookData) external;\n\n    /**\n     * @notice Locks a book manager function\n     * @param locker The locker address\n     * @param data The lock data\n     * @return The lock return data\n     */\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\n\n    struct MakeParams {\n        BookKey key;\n        Tick tick;\n        uint64 amount; // times 10**unitDecimals to get actual bid amount\n        /// @notice The limit order service provider address to collect fees\n        address provider;\n    }\n\n    /**\n     * @notice Make a limit order\n     * @param params The order parameters\n     * @param hookData The hook data\n     * @return id The order id. Returns 0 if the order is not settled\n     * @return quoteAmount The amount of quote currency to be paid\n     */\n    function make(MakeParams calldata params, bytes calldata hookData)\n        external\n        returns (OrderId id, uint256 quoteAmount);\n\n    struct TakeParams {\n        BookKey key;\n        Tick tick;\n        uint64 maxAmount;\n    }\n\n    /**\n     * @notice Take a limit order at specific tick\n     * @param params The order parameters\n     * @param hookData The hook data\n     * @return quoteAmount The amount of quote currency to be received\n     * @return baseAmount The amount of base currency to be paid\n     */\n    function take(TakeParams calldata params, bytes calldata hookData)\n        external\n        returns (uint256 quoteAmount, uint256 baseAmount);\n\n    struct CancelParams {\n        OrderId id;\n        uint64 to;\n    }\n\n    /**\n     * @notice Cancel a limit order\n     * @param params The order parameters\n     * @param hookData The hook data\n     * @return canceledAmount The amount of quote currency canceled\n     */\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\n\n    /**\n     * @notice Claims an order\n     * @param id The order ID\n     * @param hookData The hook data\n     * @return claimedAmount The amount claimed\n     */\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\n\n    /**\n     * @notice Collects fees from a provider\n     * @param provider The provider address\n     * @param currency The currency\n     */\n    function collect(address provider, Currency currency) external;\n\n    /**\n     * @notice Withdraws a currency\n     * @param currency The currency\n     * @param to The recipient address\n     * @param amount The amount\n     */\n    function withdraw(Currency currency, address to, uint256 amount) external;\n\n    /**\n     * @notice Settles a currency\n     * @param currency The currency\n     * @return The settled amount\n     */\n    function settle(Currency currency) external payable returns (uint256);\n\n    /**\n     * @notice Whitelists a provider\n     * @param provider The provider address\n     */\n    function whitelist(address provider) external;\n\n    /**\n     * @notice Delists a provider\n     * @param provider The provider address\n     */\n    function delist(address provider) external;\n\n    /**\n     * @notice Sets the default provider\n     * @param newDefaultProvider The new default provider address\n     */\n    function setDefaultProvider(address newDefaultProvider) external;\n}\n"
    },
    "contracts/external/clober-v2/IController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\n\nimport {OrderId} from \"./OrderId.sol\";\nimport {BookId} from \"./BookId.sol\";\nimport {Tick} from \"./Tick.sol\";\nimport {IBookManager} from \"./IBookManager.sol\";\n\n/**\n * @title IController\n * @notice Interface for the controller contract\n */\ninterface IController {\n    // Error messages\n    error InvalidAccess();\n    error InvalidLength();\n    error Deadline();\n    error InvalidMarket();\n    error ControllerSlippage();\n    error ValueTransferFailed();\n    error InvalidAction();\n\n    /**\n     * @notice Enum for the different actions that can be performed\n     */\n    enum Action {\n        OPEN,\n        MAKE,\n        LIMIT,\n        TAKE,\n        SPEND,\n        CLAIM,\n        CANCEL\n    }\n\n    /**\n     * @notice Struct for the parameters of the ERC20 permit\n     */\n    struct ERC20PermitParams {\n        address token;\n        uint256 permitAmount;\n        PermitSignature signature;\n    }\n\n    /**\n     * @notice Struct for the parameters of the ERC721 permit\n     */\n    struct ERC721PermitParams {\n        uint256 tokenId;\n        PermitSignature signature;\n    }\n\n    /**\n     * @notice Struct for the signature of the permit\n     */\n    struct PermitSignature {\n        uint256 deadline;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /**\n     * @notice Struct for the parameters of the open book action\n     */\n    struct OpenBookParams {\n        IBookManager.BookKey key;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the make order action\n     */\n    struct MakeOrderParams {\n        BookId id;\n        Tick tick;\n        uint256 quoteAmount;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the limit order action\n     */\n    struct LimitOrderParams {\n        BookId takeBookId;\n        BookId makeBookId;\n        uint256 limitPrice;\n        Tick tick;\n        uint256 quoteAmount;\n        bytes takeHookData;\n        bytes makeHookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the take order action\n     */\n    struct TakeOrderParams {\n        BookId id;\n        uint256 limitPrice;\n        uint256 quoteAmount;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the spend order action\n     */\n    struct SpendOrderParams {\n        BookId id;\n        uint256 limitPrice;\n        uint256 baseAmount;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the claim order action\n     */\n    struct ClaimOrderParams {\n        OrderId id;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the cancel order action\n     */\n    struct CancelOrderParams {\n        OrderId id;\n        uint256 leftQuoteAmount;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Opens a book\n     * @param openBookParamsList The parameters of the open book action\n     * @param deadline The deadline for the action\n     */\n    function open(OpenBookParams[] calldata openBookParamsList, uint64 deadline) external;\n\n    /**\n     * @notice Returns the depth of a book\n     * @param id The id of the book\n     * @param tick The tick of the book\n     * @return The depth of the book in quote amount\n     */\n    function getDepth(BookId id, Tick tick) external view returns (uint256);\n\n    /**\n     * @notice Returns the highest price of a book\n     * @param id The id of the book\n     * @return The highest price of the book with 2**128 precision\n     */\n    function getHighestPrice(BookId id) external view returns (uint256);\n\n    /**\n     * @notice Returns the details of an order\n     * @param orderId The id of the order\n     * @return provider The provider of the order\n     * @return price The price of the order with 2**128 precision\n     * @return openAmount The open quote amount of the order\n     * @return claimableAmount The claimable base amount of the order\n     */\n    function getOrder(OrderId orderId)\n        external\n        view\n        returns (address provider, uint256 price, uint256 openAmount, uint256 claimableAmount);\n\n    /**\n     * @notice Converts a price to a tick\n     * @param price The price to convert\n     * @return The tick\n     */\n    function fromPrice(uint256 price) external pure returns (Tick);\n\n    /**\n     * @notice Converts a tick to a price\n     * @param tick The tick to convert\n     * @return The price with 2**128 precision\n     */\n    function toPrice(Tick tick) external pure returns (uint256);\n\n    /**\n     * @notice Executes a list of actions\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param actionList The list of actions to execute\n     * @param paramsDataList The parameters of the actions\n     * @param tokensToSettle The tokens to settle\n     * @param erc20PermitParamsList The parameters of the ERC20 permits\n     * @param erc721PermitParamsList The parameters of the ERC721 permits\n     * @param deadline The deadline for the actions\n     * @return ids The ids of the orders\n     */\n    function execute(\n        Action[] calldata actionList,\n        bytes[] calldata paramsDataList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata erc20PermitParamsList,\n        ERC721PermitParams[] calldata erc721PermitParamsList,\n        uint64 deadline\n    ) external payable returns (OrderId[] memory ids);\n\n    /**\n     * @notice Makes a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to make\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     * @return ids The ids of the orders\n     */\n    function make(\n        MakeOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable returns (OrderId[] memory ids);\n\n    /**\n     * @notice Takes a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to take\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     */\n    function take(\n        TakeOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable;\n\n    /**\n     * @notice Spends to take a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to spend\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     */\n    function spend(\n        SpendOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable;\n\n    /**\n     * @notice Claims a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to claim\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     */\n    function claim(\n        ClaimOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC721PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external;\n\n    /**\n     * @notice Cancels a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to cancel\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     */\n    function cancel(\n        CancelOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC721PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external;\n}\n"
    },
    "contracts/external/clober-v2/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title IERC721Permit\n * @notice An interface for the ERC721 permit extension\n */\ninterface IERC721Permit is IERC721 {\n    error InvalidSignature();\n    error PermitExpired();\n\n    /**\n     * @notice The EIP-712 typehash for the permit struct used by the contract\n     */\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /**\n     * @notice The EIP-712 domain separator for this contract\n     */\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /**\n     * @notice Approve the spender to transfer the given tokenId\n     * @param spender The address to approve\n     * @param tokenId The tokenId to approve\n     * @param deadline The deadline for the signature\n     * @param v The recovery id of the signature\n     * @param r The r value of the signature\n     * @param s The s value of the signature\n     */\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @notice Get the current nonce for a token\n     * @param tokenId The tokenId to get the nonce for\n     * @return The current nonce\n     */\n    function nonces(uint256 tokenId) external view returns (uint256);\n}\n"
    },
    "contracts/external/clober-v2/IHooks.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {IBookManager} from \"./IBookManager.sol\";\nimport {OrderId} from \"./OrderId.sol\";\n\n/**\n * @title IHooks\n * @notice Interface for the hooks contract\n */\ninterface IHooks {\n    /**\n     * @notice Hook called before opening a new book\n     * @param sender The sender of the open transaction\n     * @param key The key of the book being opened\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after opening a new book\n     * @param sender The sender of the open transaction\n     * @param key The key of the book being opened\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called before making a new order\n     * @param sender The sender of the make transaction\n     * @param params The parameters of the make transaction\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after making a new order\n     * @param sender The sender of the make transaction\n     * @param params The parameters of the make transaction\n     * @param orderId The id of the order that was made\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterMake(\n        address sender,\n        IBookManager.MakeParams calldata params,\n        OrderId orderId,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /**\n     * @notice Hook called before taking an order\n     * @param sender The sender of the take transaction\n     * @param params The parameters of the take transaction\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after taking an order\n     * @param sender The sender of the take transaction\n     * @param params The parameters of the take transaction\n     * @param takenAmount The amount that was taken\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterTake(\n        address sender,\n        IBookManager.TakeParams calldata params,\n        uint64 takenAmount,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /**\n     * @notice Hook called before canceling an order\n     * @param sender The sender of the cancel transaction\n     * @param params The parameters of the cancel transaction\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after canceling an order\n     * @param sender The sender of the cancel transaction\n     * @param params The parameters of the cancel transaction\n     * @param canceledAmount The amount that was canceled\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterCancel(\n        address sender,\n        IBookManager.CancelParams calldata params,\n        uint64 canceledAmount,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /**\n     * @notice Hook called before claiming an order\n     * @param sender The sender of the claim transaction\n     * @param orderId The id of the order being claimed\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\n\n    /**\n     * @notice Hook called after claiming an order\n     * @param sender The sender of the claim transaction\n     * @param orderId The id of the order being claimed\n     * @param claimedAmount The amount that was claimed\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterClaim(address sender, OrderId orderId, uint64 claimedAmount, bytes calldata hookData)\n        external\n        returns (bytes4);\n}\n"
    },
    "contracts/external/clober-v2/Math.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {SignificantBit} from \"./SignificantBit.sol\";\n\nlibrary Math {\n    using SignificantBit for uint256;\n\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\n        // In the OrderBook contract code, b is never zero.\n        assembly {\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\n        }\n    }\n\n    function log2(uint256 x) internal pure returns (int256) {\n        require(x > 0);\n\n        uint8 msb = x.mostSignificantBit();\n\n        if (msb > 128) x >>= msb - 128;\n        else if (msb < 128) x <<= 128 - msb;\n\n        x &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n        int256 result = (int256(uint256(msb)) - 128) << 128; // Integer part of log_2\n\n        int256 bit = 0x80000000000000000000000000000000;\n        for (uint8 i = 0; i < 128 && x > 0; i++) {\n            x = (x << 1) + ((x * x + 0x80000000000000000000000000000000) >> 128);\n            if (x > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\n                result |= bit;\n                x = (x >> 1) - 0x80000000000000000000000000000000;\n            }\n            bit >>= 1;\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/external/clober-v2/OrderId.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Tick} from \"./Tick.sol\";\nimport {BookId} from \"./BookId.sol\";\n\ntype OrderId is uint256;\n\nlibrary OrderIdLibrary {\n    /**\n     * @dev Encode the order id.\n     * @param bookId The book id.\n     * @param tick The tick.\n     * @param index The index.\n     * @return id The order id.\n     */\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\n        //      Therefore, we have to safely cast tick into uint256 first.\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\n        assembly {\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\n        }\n    }\n\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\n        assembly {\n            bookId := shr(64, id)\n            tick := shr(40, id)\n            index := id\n        }\n    }\n\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\n        assembly {\n            bookId := shr(64, id)\n        }\n    }\n}\n"
    },
    "contracts/external/clober-v2/SignificantBit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nlibrary SignificantBit {\n    // http://supertech.csail.mit.edu/papers/debruijn.pdf\n    uint256 internal constant DEBRUIJN_SEQ = 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF;\n    bytes internal constant DEBRUIJN_INDEX =\n        hex\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\";\n\n    /**\n     * @notice Finds the index of the least significant bit.\n     * @param x The value to compute the least significant bit for. Must be a non-zero value.\n     * @return ret The index of the least significant bit.\n     */\n    function leastSignificantBit(uint256 x) internal pure returns (uint8) {\n        require(x > 0);\n        uint256 index;\n        assembly {\n            index := shr(248, mul(and(x, add(not(x), 1)), DEBRUIJN_SEQ))\n        }\n        return uint8(DEBRUIJN_INDEX[index]); // can optimize with CODECOPY opcode\n    }\n\n    function mostSignificantBit(uint256 x) internal pure returns (uint8) {\n        require(x > 0);\n        uint256 msb;\n        assembly {\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(5, gt(x, 0xFFFFFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(4, gt(x, 0xFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(3, gt(x, 0xFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(2, gt(x, 0xF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(1, gt(x, 0x3))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n        return uint8(msb);\n    }\n}\n"
    },
    "contracts/external/clober-v2/Tick.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./Math.sol\";\n\ntype Tick is int24;\n\nlibrary TickLibrary {\n    using Math for uint256;\n    using TickLibrary for Tick;\n\n    error InvalidTick();\n    error InvalidPrice();\n    error TickOverflow();\n\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\n    int24 internal constant MIN_TICK = -MAX_TICK;\n\n    uint256 internal constant MIN_PRICE = 5800731190957938;\n    uint256 internal constant MAX_PRICE = 19961636804996334433808922353085948875386438476189866322430503;\n\n    uint256 private constant _R0 = 0xfff97272373d413259a46990580e2139; // 2^128 / r^(2^0)\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357cf3c7fdcb;\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624eaa0941ccf;\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db58835c926643;\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896dfb254bf;\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b326b52860;\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1969c3052;\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b479aa3a3;\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074cf7815e53;\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a398e4b70f2;\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7fa6e889d8;\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f792aa5825;\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f90e061e4;\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df62baf32f6;\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505542fcfa5;\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54f3e99bc8;\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329225ee604;\n    uint256 private constant _R17 = 0x2216e584f5fa1ea926041bedfe97;\n    uint256 private constant _R18 = 0x48a170391f7dc42444e8fa2;\n\n    function validateTick(Tick tick) internal pure {\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\n    }\n\n    modifier validatePrice(uint256 price) {\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\n        _;\n    }\n\n    function toTick(uint24 x) internal pure returns (Tick t) {\n        assembly {\n            t := sub(x, 0x800000)\n        }\n    }\n\n    function toUint24(Tick tick) internal pure returns (uint24 r) {\n        assembly {\n            r := add(tick, 0x800000)\n        }\n    }\n\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\n        int256 log = price.log2();\n        int256 tick = log / 49089913871092318234424474366155889;\n        int256 tickLow = (\n            log - int256(uint256((price >> 128 == 0) ? 49089913871092318234424474366155887 : 84124744249948177485425))\n        ) / 49089913871092318234424474366155889;\n\n        if (tick == tickLow) return Tick.wrap(int24(tick));\n\n        if (toPrice(Tick.wrap(int24(tick))) <= price) return Tick.wrap(int24(tick));\n\n        return Tick.wrap(int24(tickLow));\n    }\n\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\n        validateTick(tick);\n        int24 tickValue = Tick.unwrap(tick);\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\n\n        unchecked {\n            if (absTick & 0x1 != 0) price = _R0;\n            else price = 1 << 128;\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 128;\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 128;\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 128;\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 128;\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 128;\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 128;\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 128;\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 128;\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 128;\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 128;\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 128;\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 128;\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 128;\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 128;\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 128;\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 128;\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 128;\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 128;\n        }\n        if (tickValue > 0) price = type(uint256).max / price;\n    }\n\n    function gt(Tick a, Tick b) internal pure returns (bool) {\n        return Tick.unwrap(a) > Tick.unwrap(b);\n    }\n\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\n        return Math.divide((base * tick.toPrice()), 1 << 128, roundingUp);\n    }\n\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\n        // @dev quote = raw(uint64) * unit(uint64) < 2^128\n        //      We don't need to check overflow here\n        return Math.divide(quote << 128, tick.toPrice(), roundingUp);\n    }\n}\n"
    },
    "contracts/external/clober/CloberMarketFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface CloberMarketFactory {\n    /**\n     * @notice Emitted when a new volatile market is created.\n     * @param market The address of the new market.\n     * @param orderToken The address of the new market's order token.\n     * @param quoteToken The address of the new market's quote token.\n     * @param baseToken The address of the new market's base token.\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\n     * @param nonce The nonce for this market.\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The scale factor of the price points.\n     * @param r The common ratio between price points.\n     */\n    event CreateVolatileMarket(\n        address indexed market,\n        address orderToken,\n        address quoteToken,\n        address baseToken,\n        uint256 quoteUnit,\n        uint256 nonce,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 r\n    );\n\n    /**\n     * @notice Emitted when a new stable market is created.\n     * @param market The address of the new market.\n     * @param orderToken The address of the new market's order token.\n     * @param quoteToken The address of the new market's quote token.\n     * @param baseToken The address of the new market's base token.\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\n     * @param nonce The nonce for this market.\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The starting price point.\n     * @param d The common difference between price points.\n     */\n    event CreateStableMarket(\n        address indexed market,\n        address orderToken,\n        address quoteToken,\n        address baseToken,\n        uint256 quoteUnit,\n        uint256 nonce,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 d\n    );\n\n    /**\n     * @notice Emitted when the address of the owner has changed.\n     * @param previousOwner The address of the previous owner.\n     * @param newOwner The address of the new owner.\n     */\n    event ChangeOwner(address previousOwner, address newOwner);\n\n    /**\n     * @notice Emitted when the DAO Treasury address has changed.\n     * @param previousTreasury The address of the previous DAO Treasury.\n     * @param newTreasury The address of the new DAO Treasury.\n     */\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\n\n    /**\n     * @notice Emitted when the host address has changed.\n     * @param market The address of the market that had a change of hosts.\n     * @param previousHost The address of the previous host.\n     * @param newHost The address of a new host.\n     */\n    event ChangeHost(address indexed market, address previousHost, address newHost);\n\n    /**\n     * @notice Returns the address of the deployed GeometricPriceBook.\n     * @return The address of the GeometricPriceBook.\n     */\n    function deployedGeometricPriceBook(uint128 a, uint128 r) external view returns (address);\n\n    /**\n     * @notice Returns the address of the deployed GeometricPriceBook.\n     * @return The address of the GeometricPriceBook.\n     */\n    function deployedArithmeticPriceBook(uint128 a, uint128 d) external view returns (address);\n\n    /**\n     * @notice Returns the address of the MarketDeployer.\n     * @return The address of the MarketDeployer.\n     */\n    function marketDeployer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the priceBookDeployer.\n     * @return The address of the priceBookDeployer.\n     */\n    function priceBookDeployer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the orderTokenDeployer.\n     * @return The address of the orderTokenDeployer.\n     */\n    function orderTokenDeployer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the OrderCanceler.\n     * @return The address of the OrderCanceler.\n     */\n    function canceler() external view returns (address);\n\n    /**\n     * @notice Returns whether the specified token address has been registered as a quote token.\n     * @param token The address of the token to check.\n     * @return bool Whether the token is registered as a quote token.\n     */\n    function registeredQuoteTokens(address token) external view returns (bool);\n\n    /**\n     * @notice Returns the address of the factory owner\n     * @return The address of the factory owner\n     */\n    function owner() external view returns (address);\n\n    /**\n     * @notice Returns the address of the factory owner candidate\n     * @return The address of the factory owner candidate\n     */\n    function futureOwner() external view returns (address);\n\n    /**\n     * @notice Returns the address of the DAO Treasury\n     * @return The address of the DAO Treasury\n     */\n    function daoTreasury() external view returns (address);\n\n    /**\n     * @notice Returns the current nonce\n     * @return The current nonce\n     */\n    function nonce() external view returns (uint256);\n\n    /**\n     * @notice Creates a new market with a VolatilePriceBook.\n     * @param host The address of the new market's host.\n     * @param quoteToken The address of the new market's quote token.\n     * @param baseToken The address of the new market's base token.\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The scale factor of the price points.\n     * @param r The common ratio between price points.\n     * @return The address of the created market.\n     */\n    function createVolatileMarket(\n        address host,\n        address quoteToken,\n        address baseToken,\n        uint96 quoteUnit,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 r\n    ) external returns (address);\n\n    /**\n     * @notice Creates a new market with a StablePriceBook\n     * @param host The address of the new market's host\n     * @param quoteToken The address of the new market's quote token\n     * @param baseToken The address of the new market's base token\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The starting price point.\n     * @param d The common difference between price points.\n     * @return The address of the created market.\n     */\n    function createStableMarket(\n        address host,\n        address quoteToken,\n        address baseToken,\n        uint96 quoteUnit,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 d\n    ) external returns (address);\n\n    /**\n     * @notice Change the DAO Treasury address.\n     * @dev Only the factory owner can call this function.\n     * @param treasury The new address of the DAO Treasury.\n     */\n    function changeDaoTreasury(address treasury) external;\n\n    /**\n     * @notice Sets the new owner address for this contract.\n     * @dev Only the factory owner can call this function.\n     * @param newOwner The new owner address for this contract.\n     */\n    function prepareChangeOwner(address newOwner) external;\n\n    /**\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\n     * @dev Only the future owner can call this function.\n     */\n    function executeChangeOwner() external;\n\n    /**\n     * @notice Returns the host address of the given market.\n     * @param market The address of the target market.\n     * @return The host address of the market.\n     */\n    function getMarketHost(address market) external view returns (address);\n\n    /**\n     * @notice Prepares to set a new host address for the given market address.\n     * @dev Only the market host can call this function.\n     * @param market The market address for which the host will be changed.\n     * @param newHost The new host address for the given market.\n     */\n    function prepareHandOverHost(address market, address newHost) external;\n\n    /**\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\n     * @dev Only the future market host can call this function.\n     * @param market The market address for which the host will be changed.\n     */\n    function executeHandOverHost(address market) external;\n\n    enum MarketType {\n        NONE,\n        VOLATILE,\n        STABLE\n    }\n\n    /**\n     * @notice MarketInfo struct that contains information about a market.\n     * @param host The address of the market host.\n     * @param marketType The market type, either VOLATILE or STABLE.\n     * @param a The starting price point.\n     * @param factor The either the common ratio or common difference between price points.\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\n     */\n    struct MarketInfo {\n        address host;\n        MarketType marketType;\n        uint128 a;\n        uint128 factor;\n        address futureHost;\n    }\n\n    /**\n     * @notice Returns key information about the market.\n     * @param market The address of the market.\n     * @return marketInfo The MarketInfo structure of the given market.\n     */\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\n\n    /**\n     * @notice Allows the specified token to be used as the quote token.\n     * @dev Only the factory owner can call this function.\n     * @param token The address of the token to register.\n     */\n    function registerQuoteToken(address token) external;\n\n    /**\n     * @notice Revokes the token's right to be used as a quote token.\n     * @dev Only the factory owner can call this function.\n     * @param token The address of the token to unregister.\n     */\n    function unregisterQuoteToken(address token) external;\n\n    /**\n     * @notice Returns the order token name.\n     * @param quoteToken The address of the market's quote token.\n     * @param baseToken The address of the market's base token.\n     * @param marketNonce The market nonce.\n     * @return The order token name.\n     */\n    function formatOrderTokenName(address quoteToken, address baseToken, uint256 marketNonce)\n        external\n        view\n        returns (string memory);\n\n    /**\n     * @notice Returns the order token symbol.\n     * @param quoteToken The address of a new market's quote token.\n     * @param baseToken The address of a new market's base token.\n     * @param marketNonce The market nonce.\n     * @return The order token symbol.\n     */\n    function formatOrderTokenSymbol(address quoteToken, address baseToken, uint256 marketNonce)\n        external\n        view\n        returns (string memory);\n}\n"
    },
    "contracts/external/clober/CloberMarketSwapCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface CloberMarketSwapCallbackReceiver {\n    /**\n     * @notice Contracts placing orders on the OrderBook must implement this method.\n     * In this method, the contract has to send the required token, or the transaction will revert.\n     * If there is a claim bounty to be refunded, it will be transferred via msg.value.\n     * @param inputToken The address of the token the user has to send.\n     * @param outputToken The address of the token the user has received.\n     * @param inputAmount The amount of tokens the user has to send.\n     * @param outputAmount The amount of tokens the user has received.\n     * @param data The user's custom callback data.\n     */\n    function cloberMarketSwapCallback(\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        bytes calldata data\n    ) external payable;\n}\n"
    },
    "contracts/external/clober/CloberOrderBook.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"./CloberOrderKey.sol\";\n\ninterface CloberOrderBook {\n    /**\n     * @notice Emitted when an order is created.\n     * @param sender The address who sent the tokens to make the order.\n     * @param user The address with the rights to claim the proceeds of the order.\n     * @param rawAmount The ordered raw amount.\n     * @param orderIndex The order index.\n     * @param priceIndex The price book index.\n     * @param options LSB: 0 - Ask, 1 - Bid.\n     */\n    event MakeOrder(\n        address indexed sender,\n        address indexed user,\n        uint64 rawAmount,\n        uint32 claimBounty,\n        uint256 orderIndex,\n        uint16 priceIndex,\n        uint8 options\n    );\n\n    /**\n     * @notice Emitted when an order takes from the order book.\n     * @param sender The address who sent the tokens to take the order.\n     * @param user The recipient address of the traded token.\n     * @param priceIndex The price book index.\n     * @param rawAmount The ordered raw amount.\n     * @param options MSB: 0 - Limit, 1 - Market / LSB: 0 - Ask, 1 - Bid.\n     */\n    event TakeOrder(address indexed sender, address indexed user, uint16 priceIndex, uint64 rawAmount, uint8 options);\n\n    /**\n     * @notice Emitted when an order is canceled.\n     * @param user The owner of the order.\n     * @param rawAmount The raw amount remaining that was canceled.\n     * @param orderIndex The order index.\n     * @param priceIndex The price book index.\n     * @param isBid The flag indicating whether it's a bid order or an ask order.\n     */\n    event CancelOrder(address indexed user, uint64 rawAmount, uint256 orderIndex, uint16 priceIndex, bool isBid);\n\n    /**\n     * @notice Emitted when the proceeds of an order is claimed.\n     * @param claimer The address that initiated the claim.\n     * @param user The owner of the order.\n     * @param rawAmount The ordered raw amount.\n     * @param bountyAmount The size of the claim bounty.\n     * @param orderIndex The order index.\n     * @param priceIndex The price book index.\n     * @param isBase The flag indicating whether the user receives the base token or the quote token.\n     */\n    event ClaimOrder(\n        address indexed claimer,\n        address indexed user,\n        uint64 rawAmount,\n        uint256 bountyAmount,\n        uint256 orderIndex,\n        uint16 priceIndex,\n        bool isBase\n    );\n\n    /**\n     * @notice Emitted when a flash-loan is taken.\n     * @param caller The caller address of the flash-loan.\n     * @param borrower The address of the flash loan token receiver.\n     * @param quoteAmount The amount of quote tokens the user has borrowed.\n     * @param baseAmount The amount of base tokens the user has borrowed.\n     * @param earnedQuote The amount of quote tokens the protocol earned in quote tokens.\n     * @param earnedBase The amount of base tokens the protocol earned in base tokens.\n     */\n    event Flash(\n        address indexed caller,\n        address indexed borrower,\n        uint256 quoteAmount,\n        uint256 baseAmount,\n        uint256 earnedQuote,\n        uint256 earnedBase\n    );\n\n    /**\n     * @notice A struct that represents an order.\n     * @param amount The raw amount not filled yet. In case of a stale order, the amount not claimed yet.\n     * @param claimBounty The bounty amount in gwei that can be collected by the party that fully claims the order.\n     * @param owner The address of the order owner.\n     */\n    struct Order {\n        uint64 amount;\n        uint32 claimBounty;\n        address owner;\n    }\n\n    /**\n     * @notice A struct that represents a block trade log.\n     * @param blockTime The timestamp of the block.\n     * @param askVolume The volume taken on the ask side.\n     * @param bidVolume The volume taken on the bid side.\n     * @param open The price book index on the open.\n     * @param high The highest price book index in the block.\n     * @param low The lowest price book index in the block.\n     * @param close The price book index on the close.\n     */\n    struct BlockTradeLog {\n        uint64 blockTime;\n        uint64 askVolume;\n        uint64 bidVolume;\n        uint16 open;\n        uint16 high;\n        uint16 low;\n        uint16 close;\n    }\n\n    /**\n     * @notice Take orders better or equal to the given priceIndex and make an order with the remaining tokens.\n     * @dev `msg.value` will be used as the claimBounty.\n     * @param user The taker/maker address.\n     * @param priceIndex The price book index.\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\n     * @param baseAmount The base token amount to trade, utilized by asks.\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - Post only.\n     * @param data Custom callback data\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\n     */\n    function limitOrder(\n        address user,\n        uint16 priceIndex,\n        uint64 rawAmount,\n        uint256 baseAmount,\n        uint8 options,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Returns the expected input amount and output amount.\n     * @param limitPriceIndex The price index to take until.\n     * @param rawAmount The raw amount to trade.\n     * Bid & expendInput => Used as input amount.\n     * Bid & !expendInput => Not used.\n     * Ask & expendInput => Not used.\n     * Ask & !expendInput => Used as output amount.\n     * @param baseAmount The base token amount to trade.\n     * Bid & expendInput => Not used.\n     * Bid & !expendInput => Used as output amount.\n     * Ask & expendInput => Used as input amount.\n     * Ask & !expendInput => Not used.\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\n     */\n    function getExpectedAmount(uint16 limitPriceIndex, uint64 rawAmount, uint256 baseAmount, uint8 options)\n        external\n        view\n        returns (uint256, uint256);\n\n    /**\n     * @notice Take opens orders until certain conditions are met.\n     * @param user The taker address.\n     * @param limitPriceIndex The price index to take until.\n     * @param rawAmount The raw amount to trade.\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\n     * @param baseAmount The base token amount to trade.\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\n     * @param data Custom callback data.\n     */\n    function marketOrder(\n        address user,\n        uint16 limitPriceIndex,\n        uint64 rawAmount,\n        uint256 baseAmount,\n        uint8 options,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @notice Cancel orders.\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\n     * @param receiver The address to receive canceled tokens.\n     * @param orderKeys The order keys of the orders to cancel.\n     */\n    function cancel(address receiver, OrderKey[] calldata orderKeys) external;\n\n    /**\n     * @notice Claim the proceeds of orders.\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\n     * @param claimer The address to receive the claim bounties.\n     * @param orderKeys The order keys of the orders to claim.\n     */\n    function claim(address claimer, OrderKey[] calldata orderKeys) external;\n\n    /**\n     * @notice Get the claimable proceeds of an order.\n     * @param orderKey The order key of the order.\n     * @return claimableRawAmount The claimable raw amount.\n     * @return claimableAmount The claimable amount after fees.\n     * @return feeAmount The maker fee to be paid on claim.\n     * @return rebateAmount The rebate to be received on claim.\n     */\n    function getClaimable(OrderKey calldata orderKey)\n        external\n        view\n        returns (uint64 claimableRawAmount, uint256 claimableAmount, uint256 feeAmount, uint256 rebateAmount);\n\n    /**\n     * @notice Flash loan the tokens in the OrderBook.\n     * @param borrower The address to receive the loan.\n     * @param quoteAmount The quote token amount to borrow.\n     * @param baseAmount The base token amount to borrow.\n     * @param data The user's custom callback data.\n     */\n    function flash(address borrower, uint256 quoteAmount, uint256 baseAmount, bytes calldata data) external;\n\n    /**\n     * @notice Returns the quote unit amount.\n     * @return The amount that one raw amount represent in quote tokens.\n     */\n    function quoteUnit() external view returns (uint256);\n\n    /**\n     * @notice Returns the maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @return The maker fee. 100 = 1bp.\n     */\n    function makerFee() external view returns (int24);\n\n    /**\n     * @notice Returns the take fee\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @return The taker fee. 100 = 1bps.\n     */\n    function takerFee() external view returns (uint24);\n\n    /**\n     * @notice Returns the address of the order NFT contract.\n     * @return The address of the order NFT contract.\n     */\n    function orderToken() external view returns (address);\n\n    /**\n     * @notice Returns the address of the quote token.\n     * @return The address of the quote token.\n     */\n    function quoteToken() external view returns (address);\n\n    /**\n     * @notice Returns the address of the base token.\n     * @return The address of the base token.\n     */\n    function baseToken() external view returns (address);\n\n    /**\n     * @notice Returns the current total open amount at the given price.\n     * @param isBid The flag to choose which side to check the depth for.\n     * @param priceIndex The price book index.\n     * @return The total open amount.\n     */\n    function getDepth(bool isBid, uint16 priceIndex) external view returns (uint64);\n\n    /**\n     * @notice Returns the fee balance that has not been collected yet.\n     * @return quote The current fee balance for the quote token.\n     * @return base The current fee balance for the base token.\n     */\n    function getFeeBalance() external view returns (uint128 quote, uint128 base);\n\n    /**\n     * @notice Returns the amount of tokens that can be collected by the host.\n     * @param token The address of the token to be collected.\n     * @return The amount of tokens that can be collected by the host.\n     */\n    function uncollectedHostFees(address token) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of tokens that can be collected by the dao treasury.\n     * @param token The address of the token to be collected.\n     * @return The amount of tokens that can be collected by the dao treasury.\n     */\n    function uncollectedProtocolFees(address token) external view returns (uint256);\n\n    /**\n     * @notice Returns whether the order book is empty or not.\n     * @param isBid The flag to choose which side to check the emptiness of.\n     * @return Whether the order book is empty or not on that side.\n     */\n    function isEmpty(bool isBid) external view returns (bool);\n\n    /**\n     * @notice Returns the order information.\n     * @param orderKey The order key of the order.\n     * @return The order struct of the given order key.\n     */\n    function getOrder(OrderKey calldata orderKey) external view returns (Order memory);\n\n    /**\n     * @notice Returns the lowest ask price index or the highest bid price index.\n     * @param isBid Returns the lowest ask price if false, highest bid price if true.\n     * @return The current price index. If the order book is empty, it will revert.\n     */\n    function bestPriceIndex(bool isBid) external view returns (uint16);\n\n    /**\n     * @notice Returns the current block trade log index.\n     * @return The current block trade log index.\n     */\n    function blockTradeLogIndex() external view returns (uint16);\n\n    /**\n     * @notice Returns the block trade log for a certain index.\n     * @param index The block trade log index used to query the block trade log.\n     * @return The queried block trade log.\n     */\n    function blockTradeLogs(uint16 index) external view returns (BlockTradeLog memory);\n\n    /**\n     * @notice Converts a raw amount to its corresponding base amount using a given price index.\n     * @param rawAmount The raw amount to be converted.\n     * @param priceIndex The index of the price to be used for the conversion.\n     * @param roundingUp Specifies whether the result should be rounded up or down.\n     * @return The converted base amount.\n     */\n    function rawToBase(uint64 rawAmount, uint16 priceIndex, bool roundingUp) external view returns (uint256);\n\n    /**\n     * @notice Converts a raw amount to its corresponding quote amount.\n     * @param rawAmount The raw amount to be converted.\n     * @return The converted quote amount.\n     */\n    function rawToQuote(uint64 rawAmount) external view returns (uint256);\n\n    /**\n     * @notice Converts a base amount to its corresponding raw amount using a given price index.\n     * @param baseAmount The base amount to be converted.\n     * @param priceIndex The index of the price to be used for the conversion.\n     * @param roundingUp Specifies whether the result should be rounded up or down.\n     * @return The converted raw amount.\n     */\n    function baseToRaw(uint256 baseAmount, uint16 priceIndex, bool roundingUp) external view returns (uint64);\n\n    /**\n     * @notice Converts a quote amount to its corresponding raw amount.\n     * @param quoteAmount The quote amount to be converted.\n     * @param roundingUp Specifies whether the result should be rounded up or down.\n     * @return The converted raw amount.\n     */\n    function quoteToRaw(uint256 quoteAmount, bool roundingUp) external view returns (uint64);\n\n    /**\n     * @notice Collects fees for either the protocol or host.\n     * @param token The token address to collect. It should be the quote token or the base token.\n     * @param destination The destination address to transfer fees.\n     * It should be the dao treasury address or the host address.\n     */\n    function collectFees(address token, address destination) external;\n\n    /**\n     * @notice Change the owner of the order.\n     * @dev Only the OrderToken contract can call this function.\n     * @param orderKey The order key of the order.\n     * @param newOwner The new owner address.\n     */\n    function changeOrderOwner(OrderKey calldata orderKey, address newOwner) external;\n\n    /**\n     * @notice Converts the price index into the actual price.\n     * @param priceIndex The price book index.\n     * @return price The actual price.\n     */\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\n\n    /**\n     * @notice Returns the price book index closest to the provided price.\n     * @param price Provided price.\n     * @param roundingUp Determines whether to round up or down.\n     * @return index The price book index.\n     * @return correctedPrice The actual price for the price book index.\n     */\n    function priceToIndex(uint256 price, bool roundingUp)\n        external\n        view\n        returns (uint16 index, uint256 correctedPrice);\n}\n"
    },
    "contracts/external/clober/CloberOrderKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\n/**\n * @notice A struct that represents a unique key for an order.\n * @param isBid The flag indicating whether it's a bid order or an ask order.\n * @param priceIndex The price book index.\n * @param orderIndex The order index.\n */\nstruct OrderKey {\n    bool isBid;\n    uint16 priceIndex;\n    uint256 orderIndex;\n}\n"
    },
    "contracts/external/eip2470/ISingletonFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface ISingletonFactory {\n    function deploy(bytes calldata initCode, bytes32 salt) external returns (address payable);\n}\n"
    },
    "contracts/external/weth/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IWETH9 is IERC20Metadata {\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "contracts/external/wrapped1155/IWrapped1155Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\n// @author Gnosis (https://github.com/gnosis/1155-to-20)\ninterface IWrapped1155Factory is IERC1155Receiver {\n    function erc20Implementation() external view returns (address);\n\n    function unwrap(address multiToken, uint256 tokenId, uint256 amount, address recipient, bytes calldata data)\n        external;\n\n    function batchUnwrap(\n        address multiToken,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts,\n        address recipient,\n        bytes calldata data\n    ) external;\n\n    function getWrapped1155DeployBytecode(address multiToken, uint256 tokenId, bytes calldata data)\n        external\n        view\n        returns (bytes memory);\n\n    function getWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external view returns (address);\n\n    function requireWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external returns (address);\n}\n"
    },
    "contracts/interfaces/IAaveTokenSubstitute.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {ISubstitute} from \"./ISubstitute.sol\";\n\ninterface IAaveTokenSubstitute is ISubstitute {\n    function aToken() external view returns (address);\n\n    function mintByAToken(uint256 amount, address to) external;\n\n    function burnToAToken(uint256 amount, address to) external;\n}\n"
    },
    "contracts/interfaces/IAssetPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface IAssetPool {\n    error InvalidAccess();\n\n    function isOperator(address operator) external view returns (bool);\n\n    function withdraw(address asset, uint256 amount, address recipient) external;\n}\n"
    },
    "contracts/interfaces/IBondPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IPositionManagerTypes, IPositionManager} from \"./IPositionManager.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {BondPosition} from \"../libraries/BondPosition.sol\";\n\ninterface IBondPositionManagerTypes is IPositionManagerTypes {\n    event RegisterAsset(address indexed asset);\n    event UpdatePosition(uint256 indexed tokenId, uint256 amount, Epoch expiredWith);\n\n    error InvalidAccess();\n    error UnregisteredAsset();\n    error InvalidEpoch();\n    error AlreadyExpired();\n}\n\ninterface IBondPositionManager is IBondPositionManagerTypes, IPositionManager {\n    // View Functions //\n    function MAX_EPOCH() external view returns (Epoch maxEpoch);\n\n    function getPosition(uint256 tokenId) external view returns (BondPosition memory);\n\n    function isAssetRegistered(address asset) external view returns (bool);\n\n    // User Functions //\n    function mint(address asset) external returns (uint256 positionId);\n\n    function adjustPosition(uint256 tokenId, uint256 amount, Epoch expiredWith)\n        external\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta);\n\n    // Admin Functions //\n    function registerAsset(address asset) external;\n}\n"
    },
    "contracts/interfaces/IBorrowController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IController} from \"./IController.sol\";\nimport {ERC20PermitParams, PermitSignature} from \"../libraries/PermitParams.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\n\ninterface IBorrowController is IController {\n    struct SwapParams {\n        address inSubstitute;\n        uint256 amount;\n        bytes data;\n    }\n\n    error CollateralSwapFailed(string reason);\n\n    function borrow(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 maxPayInterest,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable returns (uint256 positionId);\n\n    function adjust(\n        uint256 positionId,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 interestThreshold,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IBorrowControllerV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IControllerV2} from \"./IControllerV2.sol\";\nimport {ERC20PermitParams, PermitSignature} from \"../libraries/PermitParams.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\n\ninterface IBorrowControllerV2 is IControllerV2 {\n    event SwapToken(\n        uint256 indexed positionId,\n        address indexed inToken,\n        address indexed outToken,\n        uint256 inAmount,\n        uint256 outAmount\n    );\n\n    struct SwapParams {\n        address inSubstitute;\n        uint256 amount;\n        bytes data;\n    }\n\n    error CollateralSwapFailed(string reason);\n\n    function borrow(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 maxPayInterest,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable returns (uint256 positionId);\n\n    function adjust(\n        uint256 positionId,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 interestThreshold,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {CouponKey} from \"../libraries/CouponKey.sol\";\n\ninterface IController {\n    event SetCouponMarket(address indexed asset, Epoch indexed epoch, address indexed cloberMarket);\n\n    error InvalidAccess();\n    error InvalidMarket();\n    error ControllerSlippage();\n\n    function getCouponMarket(CouponKey memory couponKey) external view returns (address);\n\n    function setCouponMarket(CouponKey memory couponKey, address cloberMarket) external;\n}\n"
    },
    "contracts/interfaces/IControllerV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {BookId} from \"../external/clober-v2/BookId.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\n\ninterface IControllerV2 {\n    event SetCouponMarket(address indexed asset, Epoch indexed epoch, BookId sellMarketBookId, BookId buyMarketBookId);\n    event CouponTrade(uint256 indexed positionId, int256 cost, Coupon[] couponsToBuy, Coupon[] couponsToSell);\n\n    error InvalidAccess();\n    error InvalidMarket();\n    error ControllerSlippage();\n}\n"
    },
    "contracts/interfaces/ICouponLiquidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {ERC20PermitParams} from \"../libraries/PermitParams.sol\";\n\ninterface ICouponLiquidator {\n    error CollateralSwapFailed(string reason);\n\n    function liquidate(\n        uint256 positionId,\n        uint256 swapAmount,\n        bytes calldata swapData,\n        uint256 allowedSupplementaryAmount,\n        address recipient\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/ICouponManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1155MetadataURI} from \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\n\nimport {CouponKey} from \"../libraries/CouponKey.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {IERC1155Permit} from \"./IERC1155Permit.sol\";\n\ninterface ICouponManager is IERC1155MetadataURI, IERC1155Permit {\n    error InvalidAccess();\n\n    // View Functions //\n    function isMinter(address account) external view returns (bool);\n\n    function currentEpoch() external view returns (Epoch);\n\n    function epochEndTime(Epoch epoch) external pure returns (uint256);\n\n    function baseURI() external view returns (string memory);\n\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    function exists(uint256 id) external view returns (bool);\n\n    // User Functions\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external;\n\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external;\n\n    // Admin Functions //\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external;\n\n    function burnBatch(address user, Coupon[] calldata coupons) external;\n}\n"
    },
    "contracts/interfaces/ICouponMarketRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {CouponKey} from \"../libraries/CouponKey.sol\";\nimport {PermitSignature} from \"../libraries/PermitParams.sol\";\n\ninterface ICouponMarketRouter {\n    struct MarketSellParams {\n        address market;\n        uint64 deadline;\n        uint16 limitPriceIndex;\n        address recipient;\n        uint64 minRawAmount;\n        CouponKey couponKey;\n        uint256 amount;\n    }\n\n    error InvalidAccess();\n    error InvalidMarket();\n    error Deadline();\n    error FailedToSendValue();\n\n    function marketSellCoupons(MarketSellParams calldata params, PermitSignature calldata couponPermitParams)\n        external;\n\n    function batchMarketSellCoupons(MarketSellParams[] calldata paramsList, PermitSignature calldata couponPermitParams)\n        external;\n}\n"
    },
    "contracts/interfaces/ICouponOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface ICouponOracleTypes {\n    error LengthMismatch();\n    error AssetFeedAlreadySet();\n    error InvalidTimeout();\n    error InvalidGracePeriod();\n\n    event SetSequencerOracle(address indexed newSequencerOracle);\n    event SetTimeout(uint256 newTimeout);\n    event SetGracePeriod(uint256 newGracePeriod);\n    event SetFallbackOracle(address indexed newFallbackOracle);\n    event SetFeed(address indexed asset, address[] feeds);\n}\n\ninterface ICouponOracle is ICouponOracleTypes {\n    function decimals() external view returns (uint8);\n\n    function sequencerOracle() external view returns (address);\n\n    function timeout() external view returns (uint256);\n\n    function gracePeriod() external view returns (uint256);\n\n    function fallbackOracle() external view returns (address);\n\n    function getFeeds(address asset) external view returns (address[] memory);\n\n    function getAssetPrice(address asset) external view returns (uint256);\n\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\n\n    function isSequencerValid() external view returns (bool);\n\n    function setFallbackOracle(address newFallbackOracle) external;\n\n    function setFeeds(address[] calldata assets, address[][] calldata feeds) external;\n\n    function setSequencerOracle(address newSequencerOracle) external;\n\n    function setTimeout(uint256 newTimeout) external;\n\n    function setGracePeriod(uint256 newGracePeriod) external;\n}\n"
    },
    "contracts/interfaces/ICouponWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {ERC20PermitParams, PermitSignature} from \"../libraries/PermitParams.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {CouponKey} from \"../libraries/CouponKey.sol\";\n\ninterface ICouponWrapper {\n    function getWrappedCoupon(CouponKey calldata couponKey) external view returns (address wrappedCoupon);\n\n    function getWrappedCoupons(CouponKey[] calldata couponKeys)\n        external\n        view\n        returns (address[] memory wrappedCoupons);\n\n    function buildMetadata(CouponKey calldata couponKey) external view returns (bytes memory metadata);\n\n    function buildBatchMetadata(CouponKey[] calldata couponKeys) external view returns (bytes memory metadata);\n\n    function wrap(Coupon[] calldata coupons, address recipient) external;\n\n    function wrapWithPermit(\n        PermitSignature calldata couponPermitSignature,\n        Coupon[] calldata coupons,\n        address recipient\n    ) external;\n\n    function unwrap(Coupon[] calldata coupons, address recipient) external;\n}\n"
    },
    "contracts/interfaces/IDepositController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IController} from \"./IController.sol\";\nimport {ERC20PermitParams, PermitSignature} from \"../libraries/PermitParams.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\n\ninterface IDepositController is IController {\n    function deposit(\n        address token,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 minEarnInterest,\n        ERC20PermitParams calldata tokenPermitParams\n    ) external payable returns (uint256 positionId);\n\n    function adjust(\n        uint256 positionId,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 interestThreshold,\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IDepositControllerV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IControllerV2} from \"./IControllerV2.sol\";\nimport {ERC20PermitParams, PermitSignature} from \"../libraries/PermitParams.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\n\ninterface IDepositControllerV2 is IControllerV2 {\n    function deposit(\n        address token,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 minEarnInterest,\n        ERC20PermitParams calldata tokenPermitParams\n    ) external payable returns (uint256 positionId);\n\n    function adjust(\n        uint256 positionId,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 interestThreshold,\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IERC1155Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ninterface IERC1155Permit is IERC1155 {\n    error InvalidSignature();\n    error PermitExpired();\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function permit(address owner, address operator, bool approved, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        external;\n\n    function nonces(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IERC721Permit is IERC721 {\n    error InvalidSignature();\n    error PermitExpired();\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    function nonces(uint256 tokenId) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IEthSubstituteMinter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {ISubstitute} from \"./ISubstitute.sol\";\nimport {ERC20PermitParams} from \"../libraries/PermitParams.sol\";\n\ninterface IEthSubstituteMinter {\n    error ExceedsAmount();\n\n    function mint(ERC20PermitParams calldata permitParams, ISubstitute substitute, uint256 amount, address recipient)\n        external\n        payable;\n}\n"
    },
    "contracts/interfaces/ILoanPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IPositionManagerTypes, IPositionManager} from \"./IPositionManager.sol\";\nimport {CouponKey} from \"../libraries/CouponKey.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {LoanPosition} from \"../libraries/LoanPosition.sol\";\n\ninterface ILoanPositionManagerTypes is IPositionManagerTypes {\n    // liquidationFee = liquidator fee + protocol fee\n    // debt = collateral * (1 - liquidationFee)\n    struct LoanConfiguration {\n        uint32 collateralDecimal;\n        uint32 debtDecimal;\n        uint32 liquidationThreshold;\n        uint32 liquidationFee;\n        uint32 liquidationProtocolFee;\n        uint32 liquidationTargetLtv;\n    }\n\n    event SetLoanConfiguration(\n        address indexed collateral,\n        address indexed debt,\n        uint32 liquidationThreshold,\n        uint32 liquidationFee,\n        uint32 liquidationProtocolFee,\n        uint32 liquidationTargetLtv,\n        address hook\n    );\n    event UpdatePosition(uint256 indexed positionId, uint256 collateralAmount, uint256 debtAmount, Epoch unlockedAt);\n    event LiquidatePosition(\n        uint256 indexed positionId,\n        address indexed liquidator,\n        uint256 liquidationAmount,\n        uint256 repayAmount,\n        uint256 protocolFeeAmount\n    );\n    event SetTreasury(address indexed newTreasury);\n\n    error TooSmallDebtLeft();\n    error InvalidAccess();\n    error FullRepaymentRequired();\n    error LiquidationThreshold();\n    error InvalidPair();\n    error InvalidConfiguration();\n    error UnableToLiquidate();\n}\n\ninterface ILoanPositionManager is ILoanPositionManagerTypes, IPositionManager {\n    function treasury() external view returns (address);\n\n    function oracle() external view returns (address);\n\n    function minDebtValueInEth() external view returns (uint256);\n\n    function getPosition(uint256 positionId) external view returns (LoanPosition memory);\n\n    function isPairRegistered(address collateral, address debt) external view returns (bool);\n\n    function getLoanConfiguration(address collateral, address debt) external view returns (LoanConfiguration memory);\n\n    function getOwedCouponAmount(address user, uint256 couponId) external view returns (uint256);\n\n    function getLiquidationStatus(uint256 positionId, uint256 maxRepayAmount)\n        external\n        view\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\n\n    function mint(address collateralToken, address debtToken) external returns (uint256 positionId);\n\n    function adjustPosition(uint256 positionId, uint256 collateralAmount, uint256 debtAmount, Epoch expiredWith)\n        external\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta);\n\n    function liquidate(uint256 positionId, uint256 maxRepayAmount)\n        external\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\n\n    function claimOwedCoupons(CouponKey[] memory couponKeys, bytes calldata data) external;\n\n    function setLoanConfiguration(\n        address collateral,\n        address debt,\n        uint32 liquidationThreshold,\n        uint32 liquidationFee,\n        uint32 liquidationProtocolFee,\n        uint32 liquidationTargetLtv,\n        address hook\n    ) external;\n\n    function setTreasury(address newTreasury) external;\n}\n"
    },
    "contracts/interfaces/IPositionLocker.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface IPositionLocker {\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory);\n}\n"
    },
    "contracts/interfaces/IPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport {IERC721Permit} from \"./IERC721Permit.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\n\ninterface IPositionManagerTypes {\n    error LockedBy(address locker);\n    error NotSettled();\n}\n\ninterface IPositionManager is IERC721Metadata, IERC721Permit, IPositionManagerTypes {\n    function baseURI() external view returns (string memory);\n\n    function contractURI() external view returns (string memory);\n\n    function nextId() external view returns (uint256);\n\n    function assetPool() external view returns (address);\n\n    function lockData() external view returns (uint128, uint128);\n\n    function assetDelta(address locker, uint256 assetId) external view returns (int256);\n\n    function lock(bytes calldata data) external returns (bytes memory);\n\n    function settlePosition(uint256 positionId) external;\n\n    function withdrawToken(address token, address to, uint256 amount) external;\n\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external;\n\n    function depositToken(address token, uint256 amount) external;\n\n    function burnCoupons(Coupon[] calldata coupons) external;\n}\n"
    },
    "contracts/interfaces/ISimpleBondController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {ERC20PermitParams, PermitSignature} from \"../libraries/PermitParams.sol\";\n\ninterface ISimpleBondController is IERC1155Receiver {\n    error InvalidAccess();\n    error InvalidValueTransfer();\n\n    function mint(ERC20PermitParams calldata permitParams, address asset, uint256 amount, Epoch expiredWith)\n        external\n        payable\n        returns (uint256 positionId);\n\n    function mintAndWrapCoupons(\n        ERC20PermitParams calldata permitParams,\n        address asset,\n        uint256 amount,\n        Epoch expiredWith\n    ) external payable returns (uint256 positionId);\n\n    function adjust(\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams,\n        PermitSignature calldata couponPermitParams,\n        uint256 tokenId,\n        uint256 amount,\n        Epoch expiredWith\n    ) external payable;\n\n    function adjustAndWrapCoupons(\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams,\n        PermitSignature calldata couponPermitParams,\n        uint256 tokenId,\n        uint256 amount,\n        Epoch expiredWith\n    ) external payable;\n\n    function withdrawLostToken(address token, address to) external;\n}\n"
    },
    "contracts/interfaces/ISubstitute.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface ISubstitute {\n    event SetTreasury(address indexed newTreasury);\n    event Claim(address indexed treasury, uint256 adminYield);\n\n    error InvalidToken();\n    error ValueTransferFailed();\n\n    function treasury() external view returns (address);\n\n    function underlyingToken() external view returns (address);\n\n    function mint(uint256 amount, address to) external;\n\n    function burn(uint256 amount, address to) external;\n\n    function claim() external;\n\n    function mintableAmount() external view returns (uint256);\n\n    function burnableAmount() external view returns (uint256);\n\n    function setTreasury(address newTreasury) external;\n\n    function withdrawLostToken(address token, address recipient) external;\n}\n"
    },
    "contracts/libraries/BondPosition.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {Epoch, EpochLibrary} from \"./Epoch.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\n\nstruct BondPosition {\n    address asset;\n    uint64 nonce;\n    Epoch expiredWith;\n    bool isSettled;\n    uint256 amount;\n}\n\nlibrary BondPositionLibrary {\n    error UnmatchedPosition();\n    error InvalidPositionEpoch();\n\n    using EpochLibrary for Epoch;\n\n    function getAndIncrementNonce(BondPosition storage positionStorage) internal returns (uint64 nonce) {\n        nonce = positionStorage.nonce++;\n    }\n\n    function calculateCouponRequirement(BondPosition memory oldPosition, BondPosition memory newPosition)\n        internal\n        view\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\n    {\n        if (!(oldPosition.asset == newPosition.asset && oldPosition.nonce == newPosition.nonce)) {\n            revert UnmatchedPosition();\n        }\n\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\n            revert InvalidPositionEpoch();\n        }\n        uint256 mintCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\n        uint256 burnCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\n        unchecked {\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\n            if (newPosition.amount > oldPosition.amount) {\n                burnCouponsLength -= minCount;\n            } else if (newPosition.amount < oldPosition.amount) {\n                mintCouponsLength -= minCount;\n            } else {\n                mintCouponsLength -= minCount;\n                burnCouponsLength -= minCount;\n            }\n        }\n\n        mintCoupons = new Coupon[](mintCouponsLength);\n        burnCoupons = new Coupon[](burnCouponsLength);\n        mintCouponsLength = 0;\n        burnCouponsLength = 0;\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\n        unchecked {\n            Epoch epoch = latestExpiredEpoch;\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\n                epoch = epoch.add(1);\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.amount;\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.amount;\n                if (newAmount > oldAmount) {\n                    mintCoupons[mintCouponsLength++] =\n                        CouponLibrary.from(oldPosition.asset, epoch, newAmount - oldAmount);\n                } else if (newAmount < oldAmount) {\n                    burnCoupons[burnCouponsLength++] =\n                        CouponLibrary.from(oldPosition.asset, epoch, oldAmount - newAmount);\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/Controller.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport {CloberMarketSwapCallbackReceiver} from \"../external/clober/CloberMarketSwapCallbackReceiver.sol\";\nimport {CloberMarketFactory} from \"../external/clober/CloberMarketFactory.sol\";\nimport {IWETH9} from \"../external/weth/IWETH9.sol\";\nimport {IWrapped1155Factory} from \"../external/wrapped1155/IWrapped1155Factory.sol\";\nimport {CloberOrderBook} from \"../external/clober/CloberOrderBook.sol\";\nimport {ICouponManager} from \"../interfaces/ICouponManager.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\nimport {CouponKey, CouponKeyLibrary} from \"./CouponKey.sol\";\nimport {Wrapped1155MetadataBuilder} from \"./Wrapped1155MetadataBuilder.sol\";\nimport {IERC721Permit} from \"../interfaces/IERC721Permit.sol\";\nimport {ISubstitute} from \"../interfaces/ISubstitute.sol\";\nimport {IController} from \"../interfaces/IController.sol\";\nimport {SubstituteLibrary} from \"../libraries/Substitute.sol\";\nimport {ReentrancyGuard} from \"./ReentrancyGuard.sol\";\nimport {SubstituteLibrary} from \"./Substitute.sol\";\n\nimport {Epoch} from \"./Epoch.sol\";\n\nabstract contract Controller is\n    IController,\n    ERC1155Holder,\n    CloberMarketSwapCallbackReceiver,\n    Ownable2Step,\n    ReentrancyGuard\n{\n    using SafeCast for uint256;\n    using SafeERC20 for IERC20;\n    using CouponKeyLibrary for CouponKey;\n    using CouponLibrary for Coupon;\n    using SubstituteLibrary for ISubstitute;\n\n    IWrapped1155Factory internal immutable _wrapped1155Factory;\n    CloberMarketFactory internal immutable _cloberMarketFactory;\n    ICouponManager internal immutable _couponManager;\n    IWETH9 internal immutable _weth;\n\n    mapping(uint256 couponId => address market) internal _couponMarkets;\n\n    constructor(address wrapped1155Factory, address cloberMarketFactory, address couponManager, address weth)\n        Ownable(msg.sender)\n    {\n        _wrapped1155Factory = IWrapped1155Factory(wrapped1155Factory);\n        _cloberMarketFactory = CloberMarketFactory(cloberMarketFactory);\n        _couponManager = ICouponManager(couponManager);\n        _weth = IWETH9(weth);\n    }\n\n    modifier wrapAndRefundETH() {\n        bool hasMsgValue = address(this).balance > 0;\n        if (hasMsgValue) _weth.deposit{value: address(this).balance}();\n        _;\n        if (hasMsgValue) {\n            uint256 leftBalance = _weth.balanceOf(address(this));\n            if (leftBalance > 0) {\n                _weth.withdraw(leftBalance);\n                (bool success,) = msg.sender.call{value: leftBalance}(\"\");\n                require(success);\n            }\n        }\n    }\n\n    function _executeCouponTrade(\n        address user,\n        address token,\n        Coupon[] memory couponsToMint,\n        Coupon[] memory couponsToBurn,\n        uint256 amountToPay,\n        int256 remainingInterest\n    ) internal {\n        if (couponsToBurn.length > 0) {\n            Coupon memory lastCoupon = couponsToBurn[couponsToBurn.length - 1];\n            assembly {\n                mstore(couponsToBurn, sub(mload(couponsToBurn), 1))\n            }\n            bytes memory data =\n                abi.encode(user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, remainingInterest);\n            assembly {\n                mstore(couponsToBurn, add(mload(couponsToBurn), 1))\n            }\n\n            CloberOrderBook market = CloberOrderBook(_couponMarkets[lastCoupon.id()]);\n            uint256 dy = lastCoupon.amount - IERC20(market.baseToken()).balanceOf(address(this));\n            market.marketOrder(address(this), type(uint16).max, type(uint64).max, dy, 1, data);\n        } else if (couponsToMint.length > 0) {\n            Coupon memory lastCoupon = couponsToMint[couponsToMint.length - 1];\n            assembly {\n                mstore(couponsToMint, sub(mload(couponsToMint), 1))\n            }\n            bytes memory data =\n                abi.encode(user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, remainingInterest);\n            assembly {\n                mstore(couponsToMint, add(mload(couponsToMint), 1))\n            }\n\n            CloberOrderBook market = CloberOrderBook(_couponMarkets[lastCoupon.id()]);\n            market.marketOrder(address(this), 0, 0, lastCoupon.amount, 2, data);\n        } else {\n            if (remainingInterest < 0) revert ControllerSlippage();\n            _mintSubstituteAll(token, user, amountToPay);\n        }\n    }\n\n    function cloberMarketSwapCallback(\n        address inputToken,\n        address,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        bytes calldata data\n    ) external payable virtual {\n        // check if caller is registered market\n        if (_cloberMarketFactory.getMarketHost(msg.sender) == address(0)) revert InvalidAccess();\n\n        address asset = CloberOrderBook(msg.sender).quoteToken();\n        address user;\n        Coupon memory lastCoupon;\n        Coupon[] memory couponsToMint;\n        Coupon[] memory couponsToBurn;\n        uint256 amountToPay;\n        int256 remainingInterest;\n        (user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, remainingInterest) =\n            abi.decode(data, (address, Coupon, Coupon[], Coupon[], uint256, int256));\n\n        if (asset == inputToken) {\n            remainingInterest -= inputAmount.toInt256();\n            amountToPay += inputAmount;\n        } else {\n            remainingInterest += outputAmount.toInt256();\n        }\n\n        _executeCouponTrade(user, asset, couponsToMint, couponsToBurn, amountToPay, remainingInterest);\n\n        // transfer input tokens\n        if (inputAmount > 0) IERC20(inputToken).safeTransfer(msg.sender, inputAmount);\n        uint256 couponBalance = IERC20(inputToken).balanceOf(address(this));\n        if (asset != inputToken && couponBalance > 0) {\n            bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(lastCoupon.key);\n            _wrapped1155Factory.unwrap(address(_couponManager), lastCoupon.id(), couponBalance, user, metadata);\n        }\n    }\n\n    function _getUnderlyingToken(address substitute) internal view returns (address) {\n        return ISubstitute(substitute).underlyingToken();\n    }\n\n    function _mintSubstituteAll(address token, address user, uint256 minRequired) internal {\n        ISubstitute(token).mintAll(user, minRequired);\n    }\n\n    function _wrapCoupons(Coupon[] memory coupons) internal {\n        // wrap 1155 to 20\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\n        _couponManager.safeBatchTransferFrom(address(this), address(_wrapped1155Factory), coupons, metadata);\n    }\n\n    function _unwrapCoupons(Coupon[] memory coupons) internal {\n        uint256[] memory tokenIds = new uint256[](coupons.length);\n        uint256[] memory amounts = new uint256[](coupons.length);\n        unchecked {\n            for (uint256 i = 0; i < coupons.length; ++i) {\n                tokenIds[i] = coupons[i].id();\n                amounts[i] = coupons[i].amount;\n            }\n        }\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\n        _wrapped1155Factory.batchUnwrap(address(_couponManager), tokenIds, amounts, address(this), metadata);\n    }\n\n    function getCouponMarket(CouponKey memory couponKey) external view returns (address) {\n        return _couponMarkets[couponKey.toId()];\n    }\n\n    function setCouponMarket(CouponKey memory couponKey, address cloberMarket) external onlyOwner {\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey);\n        uint256 id = couponKey.toId();\n        address wrappedCoupon = _wrapped1155Factory.getWrapped1155(address(_couponManager), id, metadata);\n        CloberMarketFactory.MarketInfo memory marketInfo = _cloberMarketFactory.getMarketInfo(cloberMarket);\n        if (\n            (marketInfo.host == address(0)) || (CloberOrderBook(cloberMarket).baseToken() != wrappedCoupon)\n                || (CloberOrderBook(cloberMarket).quoteToken() != couponKey.asset)\n        ) {\n            revert InvalidMarket();\n        }\n\n        _couponMarkets[id] = cloberMarket;\n        emit SetCouponMarket(couponKey.asset, couponKey.epoch, cloberMarket);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/libraries/ControllerV2.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {CloberMarketSwapCallbackReceiver} from \"../external/clober/CloberMarketSwapCallbackReceiver.sol\";\nimport {IWETH9} from \"../external/weth/IWETH9.sol\";\nimport {IWrapped1155Factory} from \"../external/wrapped1155/IWrapped1155Factory.sol\";\nimport {CloberOrderBook} from \"../external/clober/CloberOrderBook.sol\";\nimport {ICouponManager} from \"../interfaces/ICouponManager.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\nimport {CouponKey, CouponKeyLibrary} from \"./CouponKey.sol\";\nimport {Wrapped1155MetadataBuilder} from \"./Wrapped1155MetadataBuilder.sol\";\nimport {IERC721Permit} from \"../interfaces/IERC721Permit.sol\";\nimport {ISubstitute} from \"../interfaces/ISubstitute.sol\";\nimport {ReentrancyGuard} from \"./ReentrancyGuard.sol\";\nimport {IController} from \"../external/clober-v2/IController.sol\";\nimport {IBookManager} from \"../external/clober-v2/IBookManager.sol\";\nimport {BookId, BookIdLibrary} from \"../external/clober-v2/BookId.sol\";\nimport {CurrencyLibrary, Currency} from \"../external/clober-v2/Currency.sol\";\nimport {IControllerV2} from \"../interfaces/IControllerV2.sol\";\nimport {SubstituteLibrary} from \"./Substitute.sol\";\n\nimport {Epoch} from \"./Epoch.sol\";\n\nabstract contract ControllerV2 is IControllerV2, ERC1155Holder, Ownable2Step, ReentrancyGuard {\n    using SafeCast for uint256;\n    using BookIdLibrary for IBookManager.BookKey;\n    using SafeERC20 for IERC20;\n    using CouponKeyLibrary for CouponKey;\n    using CouponLibrary for Coupon;\n    using CurrencyLibrary for Currency;\n    using SubstituteLibrary for ISubstitute;\n\n    IWrapped1155Factory internal immutable _wrapped1155Factory;\n    IController internal immutable _cloberController;\n    ICouponManager internal immutable _couponManager;\n    IBookManager internal immutable _bookManager;\n    IWETH9 internal immutable _weth;\n\n    mapping(uint256 couponId => IBookManager.BookKey) internal _couponSellMarkets;\n    mapping(uint256 couponId => IBookManager.BookKey) internal _couponBuyMarkets;\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberController,\n        address bookManager,\n        address couponManager,\n        address weth\n    ) Ownable(msg.sender) {\n        _wrapped1155Factory = IWrapped1155Factory(wrapped1155Factory);\n        _cloberController = IController(cloberController);\n        _couponManager = ICouponManager(couponManager);\n        _bookManager = IBookManager(bookManager);\n\n        _couponManager.setApprovalForAll(address(_cloberController), true);\n        _weth = IWETH9(weth);\n    }\n\n    modifier wrapAndRefundETH() {\n        bool hasMsgValue = address(this).balance > 0;\n        if (hasMsgValue) _weth.deposit{value: address(this).balance}();\n        _;\n        if (hasMsgValue) {\n            uint256 leftBalance = _weth.balanceOf(address(this));\n            if (leftBalance > 0) {\n                _weth.withdraw(leftBalance);\n                (bool success,) = msg.sender.call{value: leftBalance}(\"\");\n                require(success);\n            }\n        }\n    }\n\n    function _executeCouponTrade(\n        address user,\n        uint256 positionId,\n        address token,\n        Coupon[] memory couponsToMint,\n        Coupon[] memory couponsToBurn,\n        int256 interestThreshold\n    ) internal {\n        uint256 length = couponsToBurn.length + couponsToMint.length;\n        IController.Action[] memory actionList = new IController.Action[](length);\n        bytes[] memory paramsDataList = new bytes[](length);\n        address[] memory tokensToSettle = new address[](length + 1);\n        tokensToSettle[length] = token;\n\n        uint256 amount;\n        length = couponsToBurn.length;\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[i] = IController.Action.TAKE;\n            IBookManager.BookKey memory key = _couponBuyMarkets[couponsToBurn[i].key.toId()];\n            tokensToSettle[i] = Currency.unwrap(key.quote);\n            amount += couponsToBurn[i].amount;\n            paramsDataList[i] = abi.encode(\n                IController.TakeOrderParams({\n                    id: key.toId(),\n                    limitPrice: 0,\n                    quoteAmount: couponsToBurn[i].amount,\n                    hookData: \"\"\n                })\n            );\n        }\n        if (amount > 0) IERC20(token).approve(address(_cloberController), amount);\n\n        length = couponsToMint.length;\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[couponsToBurn.length + i] = IController.Action.SPEND;\n            IBookManager.BookKey memory key = _couponSellMarkets[couponsToMint[i].key.toId()];\n            tokensToSettle[couponsToBurn.length + i] = Currency.unwrap(key.base);\n            amount = couponsToMint[i].amount;\n            paramsDataList[couponsToBurn.length + i] = abi.encode(\n                IController.SpendOrderParams({id: key.toId(), limitPrice: 0, baseAmount: amount, hookData: \"\"})\n            );\n            // key.base can't be Currency.NATIVE\n            IERC20(Currency.unwrap(key.base)).approve(address(_cloberController), amount);\n        }\n\n        if (interestThreshold > 0) {\n            if (IERC20(token).balanceOf(address(this)) < uint256(interestThreshold)) {\n                address underlyingToken = ISubstitute(token).underlyingToken();\n                amount = Math.min(\n                    IERC20(underlyingToken).allowance(user, address(this)), IERC20(underlyingToken).balanceOf(user)\n                );\n                ISubstitute(token).mintAll(user, Math.min(uint256(interestThreshold), amount));\n            }\n            IERC20(token).approve(address(_cloberController), uint256(interestThreshold));\n        }\n\n        uint256 beforeBalance = IERC20(token).balanceOf(address(this));\n        int256 balanceDiff;\n        unchecked {\n            IController.ERC20PermitParams[] memory erc20PermitParamsList;\n            IController.ERC721PermitParams[] memory erc721PermitParamsList;\n            _cloberController.execute(\n                actionList,\n                paramsDataList,\n                tokensToSettle,\n                erc20PermitParamsList,\n                erc721PermitParamsList,\n                uint64(block.timestamp)\n            );\n            if (interestThreshold > 0) {\n                IERC20(token).approve(address(_cloberController), 0);\n            }\n\n            uint256 afterBalance = IERC20(token).balanceOf(address(this));\n            if (afterBalance > beforeBalance) {\n                balanceDiff = -(afterBalance - beforeBalance).toInt256();\n            } else {\n                balanceDiff = (beforeBalance - afterBalance).toInt256();\n            }\n        }\n        if (interestThreshold < balanceDiff) {\n            revert ControllerSlippage();\n        }\n        emit CouponTrade(positionId, balanceDiff, couponsToBurn, couponsToMint);\n    }\n\n    function _getUnderlyingToken(address substitute) internal view returns (address) {\n        return ISubstitute(substitute).underlyingToken();\n    }\n\n    function _burnAllSubstitute(address substitute, address to) internal {\n        uint256 leftAmount = IERC20(substitute).balanceOf(address(this));\n        if (leftAmount == 0) return;\n        ISubstitute(substitute).burn(leftAmount, to);\n    }\n\n    function _mintSubstituteAll(address token, address user, uint256 minRequired) internal {\n        ISubstitute(token).mintAll(user, minRequired);\n    }\n\n    function _wrapCoupons(Coupon[] memory coupons) internal {\n        // wrap 1155 to 20\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\n        _couponManager.safeBatchTransferFrom(address(this), address(_wrapped1155Factory), coupons, metadata);\n    }\n\n    function _unwrapCoupons(Coupon[] memory coupons) internal {\n        uint256[] memory tokenIds = new uint256[](coupons.length);\n        uint256[] memory amounts = new uint256[](coupons.length);\n        unchecked {\n            for (uint256 i = 0; i < coupons.length; ++i) {\n                tokenIds[i] = coupons[i].id();\n                amounts[i] = coupons[i].amount;\n            }\n        }\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\n        _wrapped1155Factory.batchUnwrap(address(_couponManager), tokenIds, amounts, address(this), metadata);\n    }\n\n    function getCouponMarket(CouponKey memory couponKey)\n        external\n        view\n        returns (IBookManager.BookKey memory, IBookManager.BookKey memory)\n    {\n        return (_couponSellMarkets[couponKey.toId()], _couponBuyMarkets[couponKey.toId()]);\n    }\n\n    function setCouponBookKey(\n        CouponKey memory couponKey,\n        IBookManager.BookKey calldata sellBookKey,\n        IBookManager.BookKey calldata buyBookKey\n    ) public virtual onlyOwner {\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey);\n        uint256 couponId = couponKey.toId();\n        address wrappedCoupon = _wrapped1155Factory.getWrapped1155(address(_couponManager), couponId, metadata);\n\n        BookId sellMarketBookId = sellBookKey.toId();\n        BookId buyMarketBookId = buyBookKey.toId();\n        if (\n            _bookManager.getBookKey(sellMarketBookId).unit != sellBookKey.unit\n                || _bookManager.getBookKey(buyMarketBookId).unit != buyBookKey.unit\n                || Currency.unwrap(sellBookKey.quote) != couponKey.asset\n                || Currency.unwrap(sellBookKey.base) != wrappedCoupon || Currency.unwrap(buyBookKey.quote) != wrappedCoupon\n                || Currency.unwrap(buyBookKey.base) != couponKey.asset\n        ) {\n            revert InvalidMarket();\n        }\n\n        _couponSellMarkets[couponId] = sellBookKey;\n        _couponBuyMarkets[couponId] = buyBookKey;\n\n        emit SetCouponMarket(couponKey.asset, couponKey.epoch, sellMarketBookId, buyMarketBookId);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/libraries/Coupon.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {CouponKey, CouponKeyLibrary} from \"./CouponKey.sol\";\n\nstruct Coupon {\n    CouponKey key;\n    uint256 amount;\n}\n\nlibrary CouponLibrary {\n    using CouponKeyLibrary for CouponKey;\n\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\n    }\n\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\n        return Coupon({key: couponKey, amount: amount});\n    }\n\n    function id(Coupon memory coupon) internal pure returns (uint256) {\n        return coupon.key.toId();\n    }\n}\n"
    },
    "contracts/libraries/CouponKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"./Epoch.sol\";\n\nstruct CouponKey {\n    address asset;\n    Epoch epoch;\n}\n\nlibrary CouponKeyLibrary {\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\n        uint16 epoch = Epoch.unwrap(key.epoch);\n        address asset = key.asset;\n        assembly {\n            id := add(asset, shl(160, epoch))\n        }\n    }\n}\n"
    },
    "contracts/libraries/Epoch.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.19;\n\ntype Epoch is uint16;\n\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==, ne as !=} for Epoch global;\n\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\n}\n\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\n}\n\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\n}\n\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\n}\n\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\n}\n\nfunction ne(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) != Epoch.unwrap(b);\n}\n\nlibrary EpochLibrary {\n    using EpochLibrary for Epoch;\n\n    error EpochOverflow();\n\n    uint256 internal constant MONTHS_PER_EPOCH = 1;\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    function startTime(Epoch epoch) internal pure returns (uint256) {\n        uint16 currentEpoch = Epoch.unwrap(epoch);\n        if (currentEpoch == 0) return 0;\n        unchecked {\n            return _epochToTimestamp(currentEpoch - 1) + 1;\n        }\n    }\n\n    function endTime(Epoch epoch) internal pure returns (uint256) {\n        return _epochToTimestamp(Epoch.unwrap(epoch));\n    }\n\n    function lastExpiredEpoch() internal view returns (Epoch) {\n        return current().sub(1);\n    }\n\n    function current() internal view returns (Epoch) {\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\n    }\n\n    function add(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\n    }\n\n    function sub(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\n    }\n\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint16) {\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\n    }\n\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\n        return a > b ? a : b;\n    }\n\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\n    // ------------------------------------------------------------------------\n    // Calculate year/month/day from the number of days since 1970/01/01 using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // int L = days + 68569 + offset\n    // int N = 4 * L / 146097\n    // L = L - (146097 * N + 3) / 4\n    // year = 4000 * (L + 1) / 1461001\n    // L = L - 1461 * year / 4 + 31\n    // month = 80 * L / 2447\n    // dd = L - 2447 * month / 80\n    // L = month / 11\n    // month = month + 2 - 12 * L\n    // year = 100 * (N - 49) + year + L\n    // ------------------------------------------------------------------------\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint16) {\n        unchecked {\n            uint256 _days = timestamp / SECONDS_PER_DAY;\n            int256 __days = int256(_days);\n\n            int256 L = __days + 68569 + OFFSET19700101;\n            int256 N = (4 * L) / 146097;\n            L = L - (146097 * N + 3) / 4;\n            int256 _year = (4000 * (L + 1)) / 1461001;\n            L = L - (1461 * _year) / 4 + 31;\n            int256 _month = (80 * L) / 2447;\n            L = _month / 11;\n            _month = _month + 2 - 12 * L;\n            _year = 100 * (N - 49) + _year + L;\n\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\n            if (epoch > type(uint16).max) revert EpochOverflow();\n            return uint16(epoch);\n        }\n    }\n\n    function _epochToTimestamp(uint16 epoch) internal pure returns (uint256) {\n        unchecked {\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\n            uint256 year = months / 12 + 1970;\n            months = (months % 12) << 4;\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\n            } else {\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\n            }\n            return (\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\n            ) * SECONDS_PER_DAY - 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/LoanPosition.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {Epoch, EpochLibrary} from \"./Epoch.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\n\nstruct LoanPosition {\n    uint64 nonce;\n    Epoch expiredWith;\n    bool isSettled;\n    address collateralToken;\n    address debtToken;\n    uint256 collateralAmount;\n    uint256 debtAmount;\n}\n\nlibrary LoanPositionLibrary {\n    error UnmatchedPosition();\n    error InvalidPositionEpoch();\n\n    using EpochLibrary for Epoch;\n\n    function getAndIncrementNonce(LoanPosition storage positionStorage) internal returns (uint64 nonce) {\n        nonce = positionStorage.nonce++;\n    }\n\n    function calculateCouponRequirement(LoanPosition memory oldPosition, LoanPosition memory newPosition)\n        internal\n        view\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\n    {\n        if (\n            !(\n                oldPosition.collateralToken == newPosition.collateralToken\n                    && oldPosition.debtToken == newPosition.debtToken && oldPosition.nonce == newPosition.nonce\n            )\n        ) revert UnmatchedPosition();\n\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\n            revert InvalidPositionEpoch();\n        }\n\n        uint256 mintCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\n        uint256 burnCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\n        unchecked {\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\n            if (newPosition.debtAmount > oldPosition.debtAmount) {\n                mintCouponsLength -= minCount;\n            } else if (newPosition.debtAmount < oldPosition.debtAmount) {\n                burnCouponsLength -= minCount;\n            } else {\n                burnCouponsLength -= minCount;\n                mintCouponsLength -= minCount;\n            }\n        }\n\n        mintCoupons = new Coupon[](mintCouponsLength);\n        burnCoupons = new Coupon[](burnCouponsLength);\n        mintCouponsLength = 0;\n        burnCouponsLength = 0;\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\n        unchecked {\n            Epoch epoch = latestExpiredEpoch;\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\n                epoch = epoch.add(1);\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.debtAmount;\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.debtAmount;\n                if (newAmount > oldAmount) {\n                    burnCoupons[burnCouponsLength++] =\n                        CouponLibrary.from(oldPosition.debtToken, epoch, newAmount - oldAmount);\n                } else if (newAmount < oldAmount) {\n                    mintCoupons[mintCouponsLength++] =\n                        CouponLibrary.from(oldPosition.debtToken, epoch, oldAmount - newAmount);\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/PermitParams.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {IERC721Permit} from \"../interfaces/IERC721Permit.sol\";\nimport {IERC1155Permit} from \"../interfaces/IERC1155Permit.sol\";\n\nstruct ERC20PermitParams {\n    uint256 permitAmount;\n    PermitSignature signature;\n}\n\nstruct PermitSignature {\n    uint256 deadline;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n}\n\nlibrary PermitParamsLibrary {\n    function tryPermit(ERC20PermitParams memory params, address token, address from, address to)\n        internal\n        returns (bool)\n    {\n        return tryPermit(params.signature, IERC20Permit(token), params.permitAmount, from, to);\n    }\n\n    function tryPermit(PermitSignature memory params, IERC20Permit token, uint256 amount, address from, address to)\n        internal\n        returns (bool)\n    {\n        if (params.deadline > 0) {\n            try token.permit(from, to, amount, params.deadline, params.v, params.r, params.s) {\n                return true;\n            } catch {}\n        }\n        return false;\n    }\n\n    function tryPermit(PermitSignature memory params, IERC721Permit token, uint256 positionId, address to)\n        internal\n        returns (bool)\n    {\n        if (params.deadline > 0) {\n            try token.permit(to, positionId, params.deadline, params.v, params.r, params.s) {\n                return true;\n            } catch {}\n        }\n        return false;\n    }\n\n    function tryPermit(PermitSignature memory params, IERC1155Permit token, address from, address to, bool approved)\n        internal\n        returns (bool)\n    {\n        if (params.deadline > 0) {\n            try token.permit(from, to, approved, params.deadline, params.v, params.r, params.s) {\n                return true;\n            } catch {}\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/libraries/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Clober (https://github.com/clober-dex/coupon-finance/blob/main/contracts/libraries/ReentrancyGuard.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    error Reentrancy();\n\n    uint256 internal _locked = 1;\n\n    modifier nonReentrant() virtual {\n        if (_locked != 1) revert Reentrancy();\n\n        _locked = 2;\n\n        _;\n\n        _locked = 1;\n    }\n}\n"
    },
    "contracts/libraries/Substitute.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {ISubstitute} from \"../interfaces/ISubstitute.sol\";\n\nlibrary SubstituteLibrary {\n    using SafeERC20 for IERC20;\n\n    function mintAll(ISubstitute substitute, address payer, uint256 minRequiredBalance) internal {\n        address underlyingToken = substitute.underlyingToken();\n        uint256 thisBalance = IERC20(address(substitute)).balanceOf(address(this));\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\n        if (minRequiredBalance > thisBalance + underlyingBalance) {\n            unchecked {\n                IERC20(underlyingToken).safeTransferFrom(\n                    payer, address(this), minRequiredBalance - thisBalance - underlyingBalance\n                );\n                underlyingBalance = minRequiredBalance - thisBalance;\n            }\n        }\n        if (underlyingBalance > 0) {\n            IERC20(underlyingToken).approve(address(substitute), underlyingBalance);\n            substitute.mint(underlyingBalance, address(this));\n        }\n    }\n\n    function burnAll(ISubstitute substitute, address to) internal {\n        uint256 leftAmount = IERC20(address(substitute)).balanceOf(address(this));\n        if (leftAmount > 0) {\n            ISubstitute(substitute).burn(leftAmount, to);\n        }\n    }\n}\n"
    },
    "contracts/libraries/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// https://github.com/aave/aave-v3-core/blob/6070e82d962d9b12835c88e68210d0e63f08d035/contracts/protocol/libraries/math/WadRayMath.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @title WadRayMath library\n * @author Aave\n * @notice Provides functions to perform calculations with Wad and Ray units\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\n * with 27 digits of precision)\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\n */\nlibrary WadRayMath {\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant HALF_WAD = 0.5e18;\n\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant HALF_RAY = 0.5e27;\n\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n    /**\n     * @dev Multiplies two wad, rounding half up to the nearest wad\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Wad\n     * @param b Wad\n     * @return c = a*b, in wad\n     */\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\n        assembly {\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) { revert(0, 0) }\n\n            c := div(add(mul(a, b), HALF_WAD), WAD)\n        }\n    }\n\n    /**\n     * @dev Divides two wad, rounding half up to the nearest wad\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Wad\n     * @param b Wad\n     * @return c = a/b, in wad\n     */\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\n        assembly {\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) { revert(0, 0) }\n\n            c := div(add(mul(a, WAD), div(b, 2)), b)\n        }\n    }\n\n    /**\n     * @notice Multiplies two ray, rounding half up to the nearest ray\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Ray\n     * @param b Ray\n     * @return c = a raymul b\n     */\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\n        assembly {\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) { revert(0, 0) }\n\n            c := div(add(mul(a, b), HALF_RAY), RAY)\n        }\n    }\n\n    /**\n     * @notice Divides two ray, rounding half up to the nearest ray\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Ray\n     * @param b Ray\n     * @return c = a raydiv b\n     */\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\n        assembly {\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) { revert(0, 0) }\n\n            c := div(add(mul(a, RAY), div(b, 2)), b)\n        }\n    }\n\n    /**\n     * @dev Casts ray down to wad\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Ray\n     * @return b = a converted to wad, rounded half up to the nearest wad\n     */\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\n        assembly {\n            b := div(a, WAD_RAY_RATIO)\n            let remainder := mod(a, WAD_RAY_RATIO)\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) { b := add(b, 1) }\n        }\n    }\n\n    /**\n     * @dev Converts wad up to ray\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Wad\n     * @return b = a converted in ray\n     */\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\n        // to avoid overflow, b/WAD_RAY_RATIO == a\n        assembly {\n            b := mul(a, WAD_RAY_RATIO)\n\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) { revert(0, 0) }\n        }\n    }\n}\n"
    },
    "contracts/libraries/Wrapped1155MetadataBuilder.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport {CouponKey} from \"./CouponKey.sol\";\nimport {Coupon} from \"./Coupon.sol\";\nimport {Epoch} from \"./Epoch.sol\";\n\nlibrary Wrapped1155MetadataBuilder {\n    function buildWrapped1155Metadata(CouponKey memory couponKey) internal view returns (bytes memory) {\n        string memory tokenSymbol = IERC20Metadata(couponKey.asset).symbol();\n        string memory epochString = Strings.toString(Epoch.unwrap(couponKey.epoch));\n        // @dev assume that tokenSymbol.length <= 12\n        bytes32 nameData = bytes32(abi.encodePacked(tokenSymbol, \" Bond Coupon (\", epochString, \")\"));\n        bytes32 symbolData = bytes32(abi.encodePacked(tokenSymbol, \"-CP\", epochString));\n        assembly {\n            let addLength := mul(2, add(mload(tokenSymbol), mload(epochString)))\n            nameData := add(nameData, add(30, addLength))\n            symbolData := add(symbolData, add(6, addLength))\n        }\n        return abi.encodePacked(nameData, symbolData, bytes1(IERC20Metadata(couponKey.asset).decimals()));\n    }\n\n    function buildWrapped1155BatchMetadata(CouponKey[] memory couponKeys) internal view returns (bytes memory data) {\n        unchecked {\n            for (uint256 i = 0; i < couponKeys.length; ++i) {\n                data = bytes.concat(data, buildWrapped1155Metadata(couponKeys[i]));\n            }\n        }\n    }\n\n    function buildWrapped1155BatchMetadata(Coupon[] memory coupons) internal view returns (bytes memory data) {\n        unchecked {\n            for (uint256 i = 0; i < coupons.length; ++i) {\n                data = bytes.concat(data, buildWrapped1155Metadata(coupons[i].key));\n            }\n        }\n    }\n}\n"
    },
    "contracts/SimpleBondController.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\n\nimport {ISimpleBondController} from \"./interfaces/ISimpleBondController.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {ICouponManager} from \"./interfaces/ICouponManager.sol\";\nimport {IBondPositionManager} from \"./interfaces/IBondPositionManager.sol\";\nimport {ICouponWrapper} from \"./interfaces/ICouponWrapper.sol\";\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {Epoch} from \"./libraries/Epoch.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {Wrapped1155MetadataBuilder} from \"./libraries/Wrapped1155MetadataBuilder.sol\";\nimport {PermitParamsLibrary, ERC20PermitParams, PermitSignature} from \"./libraries/PermitParams.sol\";\nimport {SubstituteLibrary} from \"./libraries/Substitute.sol\";\nimport {IWETH9} from \"./external/weth/IWETH9.sol\";\n\ncontract SimpleBondController is IPositionLocker, ERC1155Holder, ISimpleBondController, Ownable2Step {\n    using SubstituteLibrary for ISubstitute;\n    using PermitParamsLibrary for *;\n    using SafeERC20 for IERC20;\n\n    IWETH9 private immutable _weth;\n    IBondPositionManager private immutable _bondPositionManager;\n    ICouponManager private immutable _couponManager;\n    ICouponWrapper private immutable _couponWrapper;\n\n    constructor(\n        address weth_,\n        address bondPositionManager_,\n        address couponManager_,\n        address couponWrapper_,\n        address owner_\n    ) Ownable(owner_) {\n        _weth = IWETH9(weth_);\n        _bondPositionManager = IBondPositionManager(bondPositionManager_);\n        _couponManager = ICouponManager(couponManager_);\n        _couponWrapper = ICouponWrapper(couponWrapper_);\n        _couponManager.setApprovalForAll(address(_couponWrapper), true);\n    }\n\n    modifier wrapAndRefundETH() {\n        bool hasMsgValue = address(this).balance > 0;\n        if (hasMsgValue) _weth.deposit{value: address(this).balance}();\n        _;\n        if (hasMsgValue) {\n            uint256 leftBalance = _weth.balanceOf(address(this));\n            if (leftBalance > 0) {\n                _weth.withdraw(leftBalance);\n                (bool success,) = msg.sender.call{value: leftBalance}(\"\");\n                require(success);\n            }\n        }\n    }\n\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory result) {\n        if (msg.sender != address(_bondPositionManager)) revert InvalidAccess();\n        (address user, uint256 tokenId, uint256 amount, Epoch expiredWith, bool wrapCoupons, address asset) =\n            abi.decode(data, (address, uint256, uint256, Epoch, bool, address));\n        if (tokenId == 0) {\n            tokenId = _bondPositionManager.mint(asset);\n            result = abi.encode(tokenId);\n        }\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta) =\n            _bondPositionManager.adjustPosition(tokenId, amount, expiredWith);\n        if (amountDelta > 0) {\n            ISubstitute(asset).mintAll(user, uint256(amountDelta));\n            IERC20(asset).approve(address(_bondPositionManager), uint256(amountDelta));\n            _bondPositionManager.depositToken(address(asset), uint256(amountDelta));\n        } else if (amountDelta < 0) {\n            _bondPositionManager.withdrawToken(asset, address(this), uint256(-amountDelta));\n            ISubstitute(asset).burn(uint256(-amountDelta), user);\n        }\n        if (couponsToMint.length > 0) {\n            if (wrapCoupons) {\n                _bondPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n                _couponWrapper.wrap(couponsToMint, user);\n            } else {\n                _bondPositionManager.mintCoupons(couponsToMint, user, \"\");\n            }\n        }\n        if (couponsToBurn.length > 0) {\n            _couponManager.safeBatchTransferFrom(user, address(this), couponsToBurn, \"\");\n            _bondPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _bondPositionManager.settlePosition(tokenId);\n    }\n\n    function mint(ERC20PermitParams calldata permitParams, address asset, uint256 amount, Epoch expiredWith)\n        external\n        payable\n        returns (uint256)\n    {\n        return _mint(permitParams, asset, amount, expiredWith, false);\n    }\n\n    function mintAndWrapCoupons(\n        ERC20PermitParams calldata permitParams,\n        address asset,\n        uint256 amount,\n        Epoch expiredWith\n    ) external payable returns (uint256) {\n        return _mint(permitParams, asset, amount, expiredWith, true);\n    }\n\n    function _mint(\n        ERC20PermitParams calldata permitParams,\n        address asset,\n        uint256 amount,\n        Epoch expiredWith,\n        bool wrapCoupons\n    ) internal wrapAndRefundETH returns (uint256 positionId) {\n        address underlyingToken = ISubstitute(asset).underlyingToken();\n        permitParams.tryPermit(underlyingToken, msg.sender, address(this));\n        bytes memory result =\n            _bondPositionManager.lock(abi.encode(msg.sender, 0, amount, expiredWith, wrapCoupons, asset));\n        positionId = abi.decode(result, (uint256));\n        _bondPositionManager.transferFrom(address(this), msg.sender, positionId);\n    }\n\n    function adjust(\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams,\n        PermitSignature calldata couponPermitParams,\n        uint256 tokenId,\n        uint256 amount,\n        Epoch expiredWith\n    ) external payable {\n        _adjust(tokenPermitParams, positionPermitParams, couponPermitParams, tokenId, amount, expiredWith, false);\n    }\n\n    function adjustAndWrapCoupons(\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams,\n        PermitSignature calldata couponPermitParams,\n        uint256 tokenId,\n        uint256 amount,\n        Epoch expiredWith\n    ) external payable {\n        _adjust(tokenPermitParams, positionPermitParams, couponPermitParams, tokenId, amount, expiredWith, true);\n    }\n\n    function _adjust(\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams,\n        PermitSignature calldata couponPermitParams,\n        uint256 tokenId,\n        uint256 amount,\n        Epoch expiredWith,\n        bool wrapCoupons\n    ) internal wrapAndRefundETH {\n        positionPermitParams.tryPermit(_bondPositionManager, tokenId, address(this));\n        couponPermitParams.tryPermit(_couponManager, msg.sender, address(this), true);\n        address asset = _bondPositionManager.getPosition(tokenId).asset;\n        address underlyingToken = ISubstitute(asset).underlyingToken();\n        tokenPermitParams.tryPermit(underlyingToken, msg.sender, address(this));\n\n        _bondPositionManager.lock(abi.encode(msg.sender, tokenId, amount, expiredWith, wrapCoupons, asset));\n    }\n\n    function withdrawLostToken(address token, address to) external onlyOwner {\n        IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/SimpleSubstitute.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\n\ncontract SimpleSubstitute is ISubstitute, ERC20Permit, Ownable2Step {\n    using SafeERC20 for IERC20;\n\n    address public immutable override underlyingToken;\n    uint8 private immutable _decimals;\n\n    address public override treasury;\n\n    constructor(string memory name_, string memory symbol_, address underlyingToken_, address treasury_, address owner_)\n        ERC20Permit(name_)\n        ERC20(name_, symbol_)\n        Ownable(owner_)\n    {\n        underlyingToken = underlyingToken_;\n        _decimals = IERC20Metadata(underlyingToken_).decimals();\n        treasury = treasury_;\n        emit SetTreasury(treasury_);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function mintableAmount() external pure returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function burnableAmount() external view returns (uint256) {\n        return totalSupply();\n    }\n\n    function mint(uint256 amount, address to) external {\n        IERC20(underlyingToken).safeTransferFrom(msg.sender, address(this), amount);\n        _mint(to, amount);\n    }\n\n    function burn(uint256 amount, address to) external {\n        _burn(msg.sender, amount);\n        IERC20(underlyingToken).safeTransfer(to, amount);\n    }\n\n    function claim() external pure {\n        revert(\"Not implemented\");\n    }\n\n    function setTreasury(address newTreasury) external onlyOwner {\n        treasury = newTreasury;\n        emit SetTreasury(newTreasury);\n    }\n\n    function withdrawLostToken(address token, address recipient) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        if (token == underlyingToken) {\n            balance -= totalSupply();\n        }\n        if (balance > 0) {\n            IERC20(token).safeTransfer(recipient, balance);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
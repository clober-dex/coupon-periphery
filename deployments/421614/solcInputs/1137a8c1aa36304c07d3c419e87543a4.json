{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165, ERC165} from \"../../../utils/introspection/ERC165.sol\";\nimport {IERC1155Receiver} from \"../IERC1155Receiver.sol\";\n\n/**\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n */\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/BorrowControllerV2.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IBorrowControllerV2} from \"./interfaces/IBorrowControllerV2.sol\";\nimport {ILoanPositionManager} from \"./interfaces/ILoanPositionManager.sol\";\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {LoanPosition} from \"./libraries/LoanPosition.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\nimport {ControllerV2} from \"./libraries/ControllerV2.sol\";\nimport {ERC20PermitParams, PermitSignature, PermitParamsLibrary} from \"./libraries/PermitParams.sol\";\n\ncontract BorrowControllerV2 is IBorrowControllerV2, ControllerV2, IPositionLocker {\n    using PermitParamsLibrary for *;\n    using EpochLibrary for Epoch;\n\n    ILoanPositionManager private immutable _loanPositionManager;\n    address private immutable _router;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_loanPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberController,\n        address bookManager,\n        address couponManager,\n        address weth,\n        address loanPositionManager,\n        address router\n    ) ControllerV2(wrapped1155Factory, cloberController, bookManager, couponManager, weth) {\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\n        _router = router;\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\n        if (msg.sender != address(_loanPositionManager)) revert InvalidAccess();\n\n        uint256 positionId;\n        address user;\n        SwapParams memory swapParams;\n        (positionId, user, swapParams, data) = abi.decode(data, (uint256, address, SwapParams, bytes));\n        if (positionId == 0) {\n            address collateralToken;\n            address debtToken;\n            (collateralToken, debtToken, data) = abi.decode(data, (address, address, bytes));\n            positionId = _loanPositionManager.mint(collateralToken, debtToken);\n            result = abi.encode(positionId);\n        }\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n\n        int256 interestThreshold;\n        (position.collateralAmount, position.debtAmount, position.expiredWith, interestThreshold) =\n            abi.decode(data, (uint256, uint256, Epoch, int256));\n\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta) =\n        _loanPositionManager.adjustPosition(\n            positionId, position.collateralAmount, position.debtAmount, position.expiredWith\n        );\n        if (collateralDelta < 0) {\n            _loanPositionManager.withdrawToken(position.collateralToken, address(this), uint256(-collateralDelta));\n        }\n        if (debtDelta > 0) _loanPositionManager.withdrawToken(position.debtToken, address(this), uint256(debtDelta));\n        if (couponsToMint.length > 0) {\n            _loanPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n            _wrapCoupons(couponsToMint);\n        }\n\n        if (swapParams.inSubstitute == position.collateralToken) {\n            _swap(positionId, position.collateralToken, position.debtToken, swapParams.amount, swapParams.data);\n        } else if (swapParams.inSubstitute == position.debtToken) {\n            _swap(positionId, position.debtToken, position.collateralToken, swapParams.amount, swapParams.data);\n        }\n\n        _executeCouponTrade(user, positionId, position.debtToken, couponsToMint, couponsToBurn, interestThreshold);\n\n        if (collateralDelta > 0) {\n            _mintSubstituteAll(position.collateralToken, user, uint256(collateralDelta));\n            IERC20(position.collateralToken).approve(address(_loanPositionManager), uint256(collateralDelta));\n            _loanPositionManager.depositToken(position.collateralToken, uint256(collateralDelta));\n        }\n        if (debtDelta < 0) {\n            _mintSubstituteAll(position.debtToken, user, uint256(-debtDelta));\n            IERC20(position.debtToken).approve(address(_loanPositionManager), uint256(-debtDelta));\n            _loanPositionManager.depositToken(position.debtToken, uint256(-debtDelta));\n        }\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _loanPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _loanPositionManager.settlePosition(positionId);\n    }\n\n    function borrow(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 maxPayInterest,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable nonReentrant wrapAndRefundETH returns (uint256 positionId) {\n        collateralPermitParams.tryPermit(_getUnderlyingToken(collateralToken), msg.sender, address(this));\n\n        bytes memory lockData = abi.encode(collateralAmount, debtAmount, expiredWith, maxPayInterest);\n        lockData = abi.encode(0, msg.sender, swapParams, abi.encode(collateralToken, debtToken, lockData));\n        bytes memory result = _loanPositionManager.lock(lockData);\n        positionId = abi.decode(result, (uint256));\n\n        _burnAllSubstitute(collateralToken, msg.sender);\n        _burnAllSubstitute(debtToken, msg.sender);\n        _loanPositionManager.transferFrom(address(this), msg.sender, positionId);\n    }\n\n    function adjust(\n        uint256 positionId,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 interestThreshold,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable nonReentrant wrapAndRefundETH onlyPositionOwner(positionId) {\n        positionPermitParams.tryPermit(_loanPositionManager, positionId, address(this));\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        collateralPermitParams.tryPermit(_getUnderlyingToken(position.collateralToken), msg.sender, address(this));\n        debtPermitParams.tryPermit(_getUnderlyingToken(position.debtToken), msg.sender, address(this));\n\n        position.collateralAmount = collateralAmount;\n        position.debtAmount = debtAmount;\n        position.expiredWith = expiredWith;\n\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, interestThreshold, swapParams));\n\n        _burnAllSubstitute(position.collateralToken, msg.sender);\n        _burnAllSubstitute(position.debtToken, msg.sender);\n    }\n\n    function _swap(\n        uint256 positionId,\n        address inSubstitute,\n        address outSubstitute,\n        uint256 inAmount,\n        bytes memory swapParams\n    ) internal returns (uint256 outAmount) {\n        address inToken = ISubstitute(inSubstitute).underlyingToken();\n        address outToken = ISubstitute(outSubstitute).underlyingToken();\n        uint256 beforeOutTokenBalance = IERC20(outToken).balanceOf(address(this));\n\n        ISubstitute(inSubstitute).burn(inAmount, address(this));\n        if (inToken == address(_weth)) _weth.deposit{value: inAmount}();\n        IERC20(inToken).approve(_router, inAmount);\n        (bool success, bytes memory result) = _router.call(swapParams);\n        if (!success) revert CollateralSwapFailed(string(result));\n        IERC20(inToken).approve(_router, 0);\n\n        unchecked {\n            outAmount = IERC20(outToken).balanceOf(address(this)) - beforeOutTokenBalance;\n        }\n        emit SwapToken(positionId, inToken, outToken, inAmount, outAmount);\n\n        IERC20(outToken).approve(outSubstitute, outAmount);\n        ISubstitute(outSubstitute).mint(outAmount, address(this));\n    }\n\n    function _encodeAdjustData(\n        uint256 id,\n        LoanPosition memory p,\n        int256 interestThreshold,\n        SwapParams memory swapParams\n    ) internal view returns (bytes memory) {\n        bytes memory data = abi.encode(p.collateralAmount, p.debtAmount, p.expiredWith, interestThreshold);\n        return abi.encode(id, msg.sender, swapParams, data);\n    }\n}\n"
    },
    "contracts/DepositControllerV2.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IDepositControllerV2} from \"./interfaces/IDepositControllerV2.sol\";\nimport {IBondPositionManager} from \"./interfaces/IBondPositionManager.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {BondPosition} from \"./libraries/BondPosition.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {ControllerV2} from \"./libraries/ControllerV2.sol\";\nimport {ERC20PermitParams, PermitSignature, PermitParamsLibrary} from \"./libraries/PermitParams.sol\";\n\ncontract DepositControllerV2 is IDepositControllerV2, ControllerV2, IPositionLocker {\n    using PermitParamsLibrary for *;\n    using EpochLibrary for Epoch;\n\n    IBondPositionManager private immutable _bondPositionManager;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_bondPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberController,\n        address bookManager,\n        address couponManager,\n        address weth,\n        address bondPositionManager\n    ) ControllerV2(wrapped1155Factory, cloberController, bookManager, couponManager, weth) {\n        _bondPositionManager = IBondPositionManager(bondPositionManager);\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\n        if (msg.sender != address(_bondPositionManager)) revert InvalidAccess();\n\n        uint256 positionId;\n        address user;\n        (positionId, user, data) = abi.decode(data, (uint256, address, bytes));\n        if (positionId == 0) {\n            address asset;\n            (asset, data) = abi.decode(data, (address, bytes));\n            positionId = _bondPositionManager.mint(asset);\n            result = abi.encode(positionId);\n        }\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\n\n        int256 interestThreshold;\n        (position.amount, position.expiredWith, interestThreshold) = abi.decode(data, (uint256, Epoch, int256));\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta) =\n            _bondPositionManager.adjustPosition(positionId, position.amount, position.expiredWith);\n        if (amountDelta < 0) _bondPositionManager.withdrawToken(position.asset, address(this), uint256(-amountDelta));\n        if (couponsToMint.length > 0) {\n            _bondPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n            _wrapCoupons(couponsToMint);\n        }\n\n        _executeCouponTrade(user, positionId, position.asset, couponsToMint, couponsToBurn, interestThreshold);\n\n        if (amountDelta > 0) {\n            _mintSubstituteAll(position.asset, user, uint256(amountDelta));\n            IERC20(position.asset).approve(address(_bondPositionManager), uint256(amountDelta));\n            _bondPositionManager.depositToken(position.asset, uint256(amountDelta));\n        }\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _bondPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _bondPositionManager.settlePosition(positionId);\n    }\n\n    function deposit(\n        address asset,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 minEarnInterest,\n        ERC20PermitParams calldata tokenPermitParams\n    ) external payable nonReentrant wrapAndRefundETH returns (uint256 positionId) {\n        tokenPermitParams.tryPermit(_getUnderlyingToken(asset), msg.sender, address(this));\n        bytes memory lockData = abi.encode(amount, expiredWith, -minEarnInterest);\n        bytes memory result = _bondPositionManager.lock(abi.encode(0, msg.sender, abi.encode(asset, lockData)));\n        positionId = abi.decode(result, (uint256));\n\n        _burnAllSubstitute(asset, msg.sender);\n\n        _bondPositionManager.transferFrom(address(this), msg.sender, positionId);\n    }\n\n    function adjust(\n        uint256 positionId,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 interestThreshold,\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams\n    ) external payable nonReentrant wrapAndRefundETH onlyPositionOwner(positionId) {\n        positionPermitParams.tryPermit(_bondPositionManager, positionId, address(this));\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\n        tokenPermitParams.tryPermit(position.asset, msg.sender, address(this));\n\n        bytes memory lockData = abi.encode(amount, expiredWith, interestThreshold);\n        _bondPositionManager.lock(abi.encode(positionId, msg.sender, lockData));\n\n        _burnAllSubstitute(position.asset, msg.sender);\n    }\n}\n"
    },
    "contracts/external/clober-v2/BookId.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {IBookManager} from \"./IBookManager.sol\";\n\ntype BookId is uint192;\n\nlibrary BookIdLibrary {\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\n        bytes32 hash = keccak256(abi.encode(bookKey));\n        assembly {\n            id := hash\n        }\n    }\n}\n"
    },
    "contracts/external/clober-v2/Currency.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ntype Currency is address;\n\n/// @title CurrencyLibrary\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\nlibrary CurrencyLibrary {\n    using CurrencyLibrary for Currency;\n\n    /// @notice Thrown when a native transfer fails\n    error NativeTransferFailed();\n\n    /// @notice Thrown when an ERC20 transfer fails\n    error ERC20TransferFailed();\n\n    Currency public constant NATIVE = Currency.wrap(address(0));\n\n    function transfer(Currency currency, address to, uint256 amount) internal {\n        // implementation from\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\n\n        bool success;\n        if (currency.isNative()) {\n            assembly {\n                // Transfer the ETH and store if it succeeded or not.\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n\n            if (!success) revert NativeTransferFailed();\n        } else {\n            assembly {\n                // Get a pointer to some free memory.\n                let freeMemoryPointer := mload(0x40)\n\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n                success :=\n                    and(\n                        // Set success to whether the call reverted, if not we check it either\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                        // Counterintuitively, this call must be positioned second to the or() call in the\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\n                    )\n            }\n\n            if (!success) revert ERC20TransferFailed();\n        }\n    }\n\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\n        if (currency.isNative()) return address(this).balance;\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\n    }\n\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\n        return Currency.unwrap(currency) == Currency.unwrap(other);\n    }\n\n    function isNative(Currency currency) internal pure returns (bool) {\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\n    }\n\n    function toId(Currency currency) internal pure returns (uint256) {\n        return uint160(Currency.unwrap(currency));\n    }\n\n    function fromId(uint256 id) internal pure returns (Currency) {\n        return Currency.wrap(address(uint160(id)));\n    }\n}\n"
    },
    "contracts/external/clober-v2/FeePolicy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./Math.sol\";\n\ntype FeePolicy is uint24;\n\nlibrary FeePolicyLibrary {\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\n    int256 internal constant MAX_FEE_RATE = 500000;\n    int256 internal constant MIN_FEE_RATE = -500000;\n\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\n\n    error InvalidFeePolicy();\n\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\n            revert InvalidFeePolicy();\n        }\n\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\n        assembly {\n            feePolicy := or(mask, add(rate_, MAX_FEE_RATE))\n        }\n    }\n\n    function isValid(FeePolicy self) internal pure returns (bool) {\n        int24 r = rate(self);\n\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\n    }\n\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\n        assembly {\n            f := shr(23, self)\n        }\n    }\n\n    function rate(FeePolicy self) internal pure returns (int24 r) {\n        assembly {\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\n        }\n    }\n\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\n        int24 r = rate(self);\n\n        bool positive = r > 0;\n        uint256 absRate;\n        unchecked {\n            absRate = uint256(uint24(positive ? r : -r));\n        }\n        // @dev absFee must be less than type(int256).max\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\n        fee = positive ? int256(absFee) : -int256(absFee);\n    }\n\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\n        internal\n        pure\n        returns (uint256 originalAmount)\n    {\n        int24 r = rate(self);\n\n        bool positive = r > 0;\n        uint256 divider;\n        assembly {\n            if reverseFee { r := sub(0, r) }\n            divider := add(RATE_PRECISION, r)\n        }\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\n    }\n}\n"
    },
    "contracts/external/clober-v2/IBookManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport {BookId} from \"./BookId.sol\";\nimport {Currency} from \"./Currency.sol\";\nimport {OrderId} from \"./OrderId.sol\";\nimport {Tick} from \"./Tick.sol\";\nimport {FeePolicy} from \"./FeePolicy.sol\";\nimport {IERC721Permit} from \"./IERC721Permit.sol\";\nimport {IHooks} from \"./IHooks.sol\";\n\n/**\n * @title IBookManager\n * @notice The interface for the BookManager contract\n */\ninterface IBookManager is IERC721Metadata, IERC721Permit {\n    error InvalidUnit();\n    error InvalidFeePolicy();\n    error InvalidProvider(address provider);\n    error LockedBy(address locker, address hook);\n    error CurrencyNotSettled();\n\n    /**\n     * @notice Event emitted when a new book is opened\n     * @param id The book id\n     * @param base The base currency\n     * @param quote The quote currency\n     * @param unit The unit of the book\n     * @param makerPolicy The maker fee policy\n     * @param takerPolicy The taker fee policy\n     * @param hooks The hooks contract\n     */\n    event Open(\n        BookId indexed id,\n        Currency indexed base,\n        Currency indexed quote,\n        uint64 unit,\n        FeePolicy makerPolicy,\n        FeePolicy takerPolicy,\n        IHooks hooks\n    );\n\n    /**\n     * @notice Event emitted when a new order is made\n     * @param bookId The book id\n     * @param user The user address\n     * @param tick The order tick\n     * @param orderIndex The order index\n     * @param amount The order amount\n     * @param provider The provider address\n     */\n    event Make(\n        BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 amount, address provider\n    );\n\n    /**\n     * @notice Event emitted when an order is taken\n     * @param bookId The book id\n     * @param user The user address\n     * @param tick The order tick\n     * @param amount The order amount\n     */\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 amount);\n\n    /**\n     * @notice Event emitted when an order is canceled\n     * @param orderId The order id\n     * @param canceledAmount The canceled amount\n     */\n    event Cancel(OrderId indexed orderId, uint64 canceledAmount);\n\n    /**\n     * @notice Event emitted when an order is claimed\n     * @param orderId The order id\n     * @param rawAmount The claimed amount\n     */\n    event Claim(OrderId indexed orderId, uint64 rawAmount);\n\n    /**\n     * @notice Event emitted when a provider is whitelisted\n     * @param provider The provider address\n     */\n    event Whitelist(address indexed provider);\n\n    /**\n     * @notice Event emitted when a provider is delisted\n     * @param provider The provider address\n     */\n    event Delist(address indexed provider);\n\n    /**\n     * @notice Event emitted when a provider collects fees\n     * @param provider The provider address\n     * @param currency The currency\n     * @param amount The collected amount\n     */\n    event Collect(address indexed provider, Currency indexed currency, uint256 amount);\n\n    /**\n     * @notice Event emitted when new default provider is set\n     * @param newDefaultProvider The new default provider address\n     */\n    event SetDefaultProvider(address indexed newDefaultProvider);\n\n    struct BookKey {\n        Currency base;\n        uint64 unit;\n        Currency quote;\n        FeePolicy makerPolicy;\n        IHooks hooks;\n        FeePolicy takerPolicy;\n    }\n\n    /**\n     * @notice Returns the base URI\n     * @return The base URI\n     */\n    function baseURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the contract URI\n     * @return The contract URI\n     */\n    function contractURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the default provider\n     * @return The default provider\n     */\n    function defaultProvider() external view returns (address);\n\n    /**\n     * @notice Calculates the currency balance changes for a given locker\n     * @param locker The address of the locker\n     * @param currency The currency in question\n     * @return The net change in currency balance\n     */\n    function currencyDelta(address locker, Currency currency) external view returns (int256);\n\n    /**\n     * @notice Returns the total reserves of a given currency\n     * @param currency The currency in question\n     * @return The total reserves amount\n     */\n    function reservesOf(Currency currency) external view returns (uint256);\n\n    /**\n     * @notice Checks if a provider is whitelisted\n     * @param provider The address of the provider\n     * @return True if the provider is whitelisted, false otherwise\n     */\n    function isWhitelisted(address provider) external view returns (bool);\n\n    /**\n     * @notice Verifies if an owner has authorized a spender for a token\n     * @param owner The address of the token owner\n     * @param spender The address of the spender\n     * @param tokenId The token ID\n     */\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\n\n    /**\n     * @notice Calculates the amount owed to a provider in a given currency\n     * @param provider The provider's address\n     * @param currency The currency in question\n     * @return The owed amount\n     */\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\n\n    /**\n     * @notice Retrieves the book key for a given book ID\n     * @param id The book ID\n     * @return The book key\n     */\n    function getBookKey(BookId id) external view returns (BookKey memory);\n\n    struct OrderInfo {\n        address provider;\n        uint64 open;\n        uint64 claimable;\n    }\n\n    /**\n     * @notice Provides information about an order\n     * @param id The order ID\n     * @return Order information including provider, open status, and claimable amount\n     */\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\n\n    /**\n     * @notice Retrieves the locker and caller addresses for a given lock\n     * @param i The index of the lock\n     * @return locker The locker's address\n     * @return lockCaller The caller's address\n     */\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\n\n    /**\n     * @notice Provides the lock data\n     * @return The lock data including necessary numeric values\n     */\n    function getLockData() external view returns (uint128, uint128);\n\n    /**\n     * @notice Returns the depth of a given book ID and tick\n     * @param id The book ID\n     * @param tick The tick\n     * @return The depth of the tick\n     */\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\n\n    /**\n     * @notice Retrieves the highest tick for a given book ID\n     * @param id The book ID\n     * @return tick The highest tick\n     */\n    function getHighest(BookId id) external view returns (Tick tick);\n\n    /**\n     * @notice Finds the maximum tick less than a specified tick in a book\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the lowest\n     * @param id The book ID\n     * @param tick The specified tick\n     * @return The next lower tick\n     */\n    function maxLessThan(BookId id, Tick tick) external view returns (Tick);\n\n    /**\n     * @notice Checks if a book is empty\n     * @param id The book ID\n     * @return True if the book is empty, false otherwise\n     */\n    function isEmpty(BookId id) external view returns (bool);\n\n    /**\n     * @notice Loads a value from a specific storage slot\n     * @param slot The storage slot\n     * @return The value in the slot\n     */\n    function load(bytes32 slot) external view returns (bytes32);\n\n    /**\n     * @notice Loads a sequence of values starting from a specific slot\n     * @param startSlot The starting slot\n     * @param nSlot The number of slots to load\n     * @return The sequence of values\n     */\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\n\n    /**\n     * @notice Opens a new book\n     * @param key The book key\n     * @param hookData The hook data\n     */\n    function open(BookKey calldata key, bytes calldata hookData) external;\n\n    /**\n     * @notice Locks a book manager function\n     * @param locker The locker address\n     * @param data The lock data\n     * @return The lock return data\n     */\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\n\n    struct MakeParams {\n        BookKey key;\n        Tick tick;\n        uint64 amount; // times 10**unitDecimals to get actual bid amount\n        /// @notice The limit order service provider address to collect fees\n        address provider;\n    }\n\n    /**\n     * @notice Make a limit order\n     * @param params The order parameters\n     * @param hookData The hook data\n     * @return id The order id. Returns 0 if the order is not settled\n     * @return quoteAmount The amount of quote currency to be paid\n     */\n    function make(MakeParams calldata params, bytes calldata hookData)\n        external\n        returns (OrderId id, uint256 quoteAmount);\n\n    struct TakeParams {\n        BookKey key;\n        Tick tick;\n        uint64 maxAmount;\n    }\n\n    /**\n     * @notice Take a limit order at specific tick\n     * @param params The order parameters\n     * @param hookData The hook data\n     * @return quoteAmount The amount of quote currency to be received\n     * @return baseAmount The amount of base currency to be paid\n     */\n    function take(TakeParams calldata params, bytes calldata hookData)\n        external\n        returns (uint256 quoteAmount, uint256 baseAmount);\n\n    struct CancelParams {\n        OrderId id;\n        uint64 to;\n    }\n\n    /**\n     * @notice Cancel a limit order\n     * @param params The order parameters\n     * @param hookData The hook data\n     * @return canceledAmount The amount of quote currency canceled\n     */\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\n\n    /**\n     * @notice Claims an order\n     * @param id The order ID\n     * @param hookData The hook data\n     * @return claimedAmount The amount claimed\n     */\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\n\n    /**\n     * @notice Collects fees from a provider\n     * @param provider The provider address\n     * @param currency The currency\n     */\n    function collect(address provider, Currency currency) external;\n\n    /**\n     * @notice Withdraws a currency\n     * @param currency The currency\n     * @param to The recipient address\n     * @param amount The amount\n     */\n    function withdraw(Currency currency, address to, uint256 amount) external;\n\n    /**\n     * @notice Settles a currency\n     * @param currency The currency\n     * @return The settled amount\n     */\n    function settle(Currency currency) external payable returns (uint256);\n\n    /**\n     * @notice Whitelists a provider\n     * @param provider The provider address\n     */\n    function whitelist(address provider) external;\n\n    /**\n     * @notice Delists a provider\n     * @param provider The provider address\n     */\n    function delist(address provider) external;\n\n    /**\n     * @notice Sets the default provider\n     * @param newDefaultProvider The new default provider address\n     */\n    function setDefaultProvider(address newDefaultProvider) external;\n}\n"
    },
    "contracts/external/clober-v2/IController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\n\nimport {OrderId} from \"./OrderId.sol\";\nimport {BookId} from \"./BookId.sol\";\nimport {Tick} from \"./Tick.sol\";\nimport {IBookManager} from \"./IBookManager.sol\";\n\n/**\n * @title IController\n * @notice Interface for the controller contract\n */\ninterface IController {\n    // Error messages\n    error InvalidAccess();\n    error InvalidLength();\n    error Deadline();\n    error InvalidMarket();\n    error ControllerSlippage();\n    error ValueTransferFailed();\n    error InvalidAction();\n\n    /**\n     * @notice Enum for the different actions that can be performed\n     */\n    enum Action {\n        OPEN,\n        MAKE,\n        LIMIT,\n        TAKE,\n        SPEND,\n        CLAIM,\n        CANCEL\n    }\n\n    /**\n     * @notice Struct for the parameters of the ERC20 permit\n     */\n    struct ERC20PermitParams {\n        address token;\n        uint256 permitAmount;\n        PermitSignature signature;\n    }\n\n    /**\n     * @notice Struct for the parameters of the ERC721 permit\n     */\n    struct ERC721PermitParams {\n        uint256 tokenId;\n        PermitSignature signature;\n    }\n\n    /**\n     * @notice Struct for the signature of the permit\n     */\n    struct PermitSignature {\n        uint256 deadline;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /**\n     * @notice Struct for the parameters of the open book action\n     */\n    struct OpenBookParams {\n        IBookManager.BookKey key;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the make order action\n     */\n    struct MakeOrderParams {\n        BookId id;\n        Tick tick;\n        uint256 quoteAmount;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the limit order action\n     */\n    struct LimitOrderParams {\n        BookId takeBookId;\n        BookId makeBookId;\n        uint256 limitPrice;\n        Tick tick;\n        uint256 quoteAmount;\n        bytes takeHookData;\n        bytes makeHookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the take order action\n     */\n    struct TakeOrderParams {\n        BookId id;\n        uint256 limitPrice;\n        uint256 quoteAmount;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the spend order action\n     */\n    struct SpendOrderParams {\n        BookId id;\n        uint256 limitPrice;\n        uint256 baseAmount;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the claim order action\n     */\n    struct ClaimOrderParams {\n        OrderId id;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Struct for the parameters of the cancel order action\n     */\n    struct CancelOrderParams {\n        OrderId id;\n        uint256 leftQuoteAmount;\n        bytes hookData;\n    }\n\n    /**\n     * @notice Opens a book\n     * @param openBookParamsList The parameters of the open book action\n     * @param deadline The deadline for the action\n     */\n    function open(OpenBookParams[] calldata openBookParamsList, uint64 deadline) external;\n\n    /**\n     * @notice Returns the depth of a book\n     * @param id The id of the book\n     * @param tick The tick of the book\n     * @return The depth of the book in quote amount\n     */\n    function getDepth(BookId id, Tick tick) external view returns (uint256);\n\n    /**\n     * @notice Returns the highest price of a book\n     * @param id The id of the book\n     * @return The highest price of the book with 2**128 precision\n     */\n    function getHighestPrice(BookId id) external view returns (uint256);\n\n    /**\n     * @notice Returns the details of an order\n     * @param orderId The id of the order\n     * @return provider The provider of the order\n     * @return price The price of the order with 2**128 precision\n     * @return openAmount The open quote amount of the order\n     * @return claimableAmount The claimable base amount of the order\n     */\n    function getOrder(OrderId orderId)\n        external\n        view\n        returns (address provider, uint256 price, uint256 openAmount, uint256 claimableAmount);\n\n    /**\n     * @notice Converts a price to a tick\n     * @param price The price to convert\n     * @return The tick\n     */\n    function fromPrice(uint256 price) external pure returns (Tick);\n\n    /**\n     * @notice Converts a tick to a price\n     * @param tick The tick to convert\n     * @return The price with 2**128 precision\n     */\n    function toPrice(Tick tick) external pure returns (uint256);\n\n    /**\n     * @notice Executes a list of actions\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param actionList The list of actions to execute\n     * @param paramsDataList The parameters of the actions\n     * @param tokensToSettle The tokens to settle\n     * @param erc20PermitParamsList The parameters of the ERC20 permits\n     * @param erc721PermitParamsList The parameters of the ERC721 permits\n     * @param deadline The deadline for the actions\n     * @return ids The ids of the orders\n     */\n    function execute(\n        Action[] calldata actionList,\n        bytes[] calldata paramsDataList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata erc20PermitParamsList,\n        ERC721PermitParams[] calldata erc721PermitParamsList,\n        uint64 deadline\n    ) external payable returns (OrderId[] memory ids);\n\n    /**\n     * @notice Makes a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to make\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     * @return ids The ids of the orders\n     */\n    function make(\n        MakeOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable returns (OrderId[] memory ids);\n\n    /**\n     * @notice Takes a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to take\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     */\n    function take(\n        TakeOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable;\n\n    /**\n     * @notice Spends to take a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to spend\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     */\n    function spend(\n        SpendOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable;\n\n    /**\n     * @notice Claims a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to claim\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     */\n    function claim(\n        ClaimOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC721PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external;\n\n    /**\n     * @notice Cancels a list of orders\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\n     * @param orderParamsList The list of actions to cancel\n     * @param tokensToSettle The tokens to settle\n     * @param permitParamsList The parameters of the permits\n     * @param deadline The deadline for the actions\n     */\n    function cancel(\n        CancelOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC721PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external;\n}\n"
    },
    "contracts/external/clober-v2/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title IERC721Permit\n * @notice An interface for the ERC721 permit extension\n */\ninterface IERC721Permit is IERC721 {\n    error InvalidSignature();\n    error PermitExpired();\n\n    /**\n     * @notice The EIP-712 typehash for the permit struct used by the contract\n     */\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /**\n     * @notice The EIP-712 domain separator for this contract\n     */\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /**\n     * @notice Approve the spender to transfer the given tokenId\n     * @param spender The address to approve\n     * @param tokenId The tokenId to approve\n     * @param deadline The deadline for the signature\n     * @param v The recovery id of the signature\n     * @param r The r value of the signature\n     * @param s The s value of the signature\n     */\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @notice Get the current nonce for a token\n     * @param tokenId The tokenId to get the nonce for\n     * @return The current nonce\n     */\n    function nonces(uint256 tokenId) external view returns (uint256);\n}\n"
    },
    "contracts/external/clober-v2/IHooks.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {IBookManager} from \"./IBookManager.sol\";\nimport {OrderId} from \"./OrderId.sol\";\n\n/**\n * @title IHooks\n * @notice Interface for the hooks contract\n */\ninterface IHooks {\n    /**\n     * @notice Hook called before opening a new book\n     * @param sender The sender of the open transaction\n     * @param key The key of the book being opened\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after opening a new book\n     * @param sender The sender of the open transaction\n     * @param key The key of the book being opened\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called before making a new order\n     * @param sender The sender of the make transaction\n     * @param params The parameters of the make transaction\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after making a new order\n     * @param sender The sender of the make transaction\n     * @param params The parameters of the make transaction\n     * @param orderId The id of the order that was made\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterMake(\n        address sender,\n        IBookManager.MakeParams calldata params,\n        OrderId orderId,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /**\n     * @notice Hook called before taking an order\n     * @param sender The sender of the take transaction\n     * @param params The parameters of the take transaction\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after taking an order\n     * @param sender The sender of the take transaction\n     * @param params The parameters of the take transaction\n     * @param takenAmount The amount that was taken\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterTake(\n        address sender,\n        IBookManager.TakeParams calldata params,\n        uint64 takenAmount,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /**\n     * @notice Hook called before canceling an order\n     * @param sender The sender of the cancel transaction\n     * @param params The parameters of the cancel transaction\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after canceling an order\n     * @param sender The sender of the cancel transaction\n     * @param params The parameters of the cancel transaction\n     * @param canceledAmount The amount that was canceled\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterCancel(\n        address sender,\n        IBookManager.CancelParams calldata params,\n        uint64 canceledAmount,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /**\n     * @notice Hook called before claiming an order\n     * @param sender The sender of the claim transaction\n     * @param orderId The id of the order being claimed\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\n\n    /**\n     * @notice Hook called after claiming an order\n     * @param sender The sender of the claim transaction\n     * @param orderId The id of the order being claimed\n     * @param claimedAmount The amount that was claimed\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterClaim(address sender, OrderId orderId, uint64 claimedAmount, bytes calldata hookData)\n        external\n        returns (bytes4);\n}\n"
    },
    "contracts/external/clober-v2/Math.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {SignificantBit} from \"./SignificantBit.sol\";\n\nlibrary Math {\n    using SignificantBit for uint256;\n\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\n        // In the OrderBook contract code, b is never zero.\n        assembly {\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\n        }\n    }\n\n    function log2(uint256 x) internal pure returns (int256) {\n        require(x > 0);\n\n        uint8 msb = x.mostSignificantBit();\n\n        if (msb > 128) x >>= msb - 128;\n        else if (msb < 128) x <<= 128 - msb;\n\n        x &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n        int256 result = (int256(uint256(msb)) - 128) << 128; // Integer part of log_2\n\n        int256 bit = 0x80000000000000000000000000000000;\n        for (uint8 i = 0; i < 128 && x > 0; i++) {\n            x = (x << 1) + ((x * x + 0x80000000000000000000000000000000) >> 128);\n            if (x > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\n                result |= bit;\n                x = (x >> 1) - 0x80000000000000000000000000000000;\n            }\n            bit >>= 1;\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/external/clober-v2/OrderId.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Tick} from \"./Tick.sol\";\nimport {BookId} from \"./BookId.sol\";\n\ntype OrderId is uint256;\n\nlibrary OrderIdLibrary {\n    /**\n     * @dev Encode the order id.\n     * @param bookId The book id.\n     * @param tick The tick.\n     * @param index The index.\n     * @return id The order id.\n     */\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\n        //      Therefore, we have to safely cast tick into uint256 first.\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\n        assembly {\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\n        }\n    }\n\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\n        assembly {\n            bookId := shr(64, id)\n            tick := shr(40, id)\n            index := id\n        }\n    }\n\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\n        assembly {\n            bookId := shr(64, id)\n        }\n    }\n}\n"
    },
    "contracts/external/clober-v2/SignificantBit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nlibrary SignificantBit {\n    // http://supertech.csail.mit.edu/papers/debruijn.pdf\n    uint256 internal constant DEBRUIJN_SEQ = 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF;\n    bytes internal constant DEBRUIJN_INDEX =\n        hex\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\";\n\n    /**\n     * @notice Finds the index of the least significant bit.\n     * @param x The value to compute the least significant bit for. Must be a non-zero value.\n     * @return ret The index of the least significant bit.\n     */\n    function leastSignificantBit(uint256 x) internal pure returns (uint8) {\n        require(x > 0);\n        uint256 index;\n        assembly {\n            index := shr(248, mul(and(x, add(not(x), 1)), DEBRUIJN_SEQ))\n        }\n        return uint8(DEBRUIJN_INDEX[index]); // can optimize with CODECOPY opcode\n    }\n\n    function mostSignificantBit(uint256 x) internal pure returns (uint8) {\n        require(x > 0);\n        uint256 msb;\n        assembly {\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(5, gt(x, 0xFFFFFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(4, gt(x, 0xFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(3, gt(x, 0xFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(2, gt(x, 0xF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(1, gt(x, 0x3))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n        return uint8(msb);\n    }\n}\n"
    },
    "contracts/external/clober-v2/Tick.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./Math.sol\";\n\ntype Tick is int24;\n\nlibrary TickLibrary {\n    using Math for uint256;\n    using TickLibrary for Tick;\n\n    error InvalidTick();\n    error InvalidPrice();\n    error TickOverflow();\n\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\n    int24 internal constant MIN_TICK = -MAX_TICK;\n\n    uint256 internal constant MIN_PRICE = 5800731190957938;\n    uint256 internal constant MAX_PRICE = 19961636804996334433808922353085948875386438476189866322430503;\n\n    uint256 private constant _R0 = 0xfff97272373d413259a46990580e2139; // 2^128 / r^(2^0)\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357cf3c7fdcb;\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624eaa0941ccf;\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db58835c926643;\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896dfb254bf;\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b326b52860;\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1969c3052;\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b479aa3a3;\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074cf7815e53;\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a398e4b70f2;\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7fa6e889d8;\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f792aa5825;\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f90e061e4;\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df62baf32f6;\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505542fcfa5;\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54f3e99bc8;\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329225ee604;\n    uint256 private constant _R17 = 0x2216e584f5fa1ea926041bedfe97;\n    uint256 private constant _R18 = 0x48a170391f7dc42444e8fa2;\n\n    function validateTick(Tick tick) internal pure {\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\n    }\n\n    modifier validatePrice(uint256 price) {\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\n        _;\n    }\n\n    function toTick(uint24 x) internal pure returns (Tick t) {\n        assembly {\n            t := sub(x, 0x800000)\n        }\n    }\n\n    function toUint24(Tick tick) internal pure returns (uint24 r) {\n        assembly {\n            r := add(tick, 0x800000)\n        }\n    }\n\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\n        int256 log = price.log2();\n        int256 tick = log / 49089913871092318234424474366155889;\n        int256 tickLow = (\n            log - int256(uint256((price >> 128 == 0) ? 49089913871092318234424474366155887 : 84124744249948177485425))\n        ) / 49089913871092318234424474366155889;\n\n        if (tick == tickLow) return Tick.wrap(int24(tick));\n\n        if (toPrice(Tick.wrap(int24(tick))) <= price) return Tick.wrap(int24(tick));\n\n        return Tick.wrap(int24(tickLow));\n    }\n\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\n        validateTick(tick);\n        int24 tickValue = Tick.unwrap(tick);\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\n\n        unchecked {\n            if (absTick & 0x1 != 0) price = _R0;\n            else price = 1 << 128;\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 128;\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 128;\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 128;\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 128;\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 128;\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 128;\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 128;\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 128;\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 128;\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 128;\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 128;\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 128;\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 128;\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 128;\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 128;\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 128;\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 128;\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 128;\n        }\n        if (tickValue > 0) price = type(uint256).max / price;\n    }\n\n    function gt(Tick a, Tick b) internal pure returns (bool) {\n        return Tick.unwrap(a) > Tick.unwrap(b);\n    }\n\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\n        return Math.divide((base * tick.toPrice()), 1 << 128, roundingUp);\n    }\n\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\n        // @dev quote = raw(uint64) * unit(uint64) < 2^128\n        //      We don't need to check overflow here\n        return Math.divide(quote << 128, tick.toPrice(), roundingUp);\n    }\n}\n"
    },
    "contracts/external/weth/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IWETH9 is IERC20Metadata {\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "contracts/external/wrapped1155/IWrapped1155Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\n// @author Gnosis (https://github.com/gnosis/1155-to-20)\ninterface IWrapped1155Factory is IERC1155Receiver {\n    function erc20Implementation() external view returns (address);\n\n    function unwrap(address multiToken, uint256 tokenId, uint256 amount, address recipient, bytes calldata data)\n        external;\n\n    function batchUnwrap(\n        address multiToken,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts,\n        address recipient,\n        bytes calldata data\n    ) external;\n\n    function getWrapped1155DeployBytecode(address multiToken, uint256 tokenId, bytes calldata data)\n        external\n        view\n        returns (bytes memory);\n\n    function getWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external view returns (address);\n\n    function requireWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external returns (address);\n}\n"
    },
    "contracts/interfaces/IBondPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IPositionManagerTypes, IPositionManager} from \"./IPositionManager.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {BondPosition} from \"../libraries/BondPosition.sol\";\n\ninterface IBondPositionManagerTypes is IPositionManagerTypes {\n    event RegisterAsset(address indexed asset);\n    event UpdatePosition(uint256 indexed tokenId, uint256 amount, Epoch expiredWith);\n\n    error InvalidAccess();\n    error UnregisteredAsset();\n    error InvalidEpoch();\n    error AlreadyExpired();\n}\n\ninterface IBondPositionManager is IBondPositionManagerTypes, IPositionManager {\n    // View Functions //\n    function MAX_EPOCH() external view returns (Epoch maxEpoch);\n\n    function getPosition(uint256 tokenId) external view returns (BondPosition memory);\n\n    function isAssetRegistered(address asset) external view returns (bool);\n\n    // User Functions //\n    function mint(address asset) external returns (uint256 positionId);\n\n    function adjustPosition(uint256 tokenId, uint256 amount, Epoch expiredWith)\n        external\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta);\n\n    // Admin Functions //\n    function registerAsset(address asset) external;\n}\n"
    },
    "contracts/interfaces/IBorrowControllerV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IControllerV2} from \"./IControllerV2.sol\";\nimport {ERC20PermitParams, PermitSignature} from \"../libraries/PermitParams.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\n\ninterface IBorrowControllerV2 is IControllerV2 {\n    event SwapToken(\n        uint256 indexed positionId,\n        address indexed inToken,\n        address indexed outToken,\n        uint256 inAmount,\n        uint256 outAmount\n    );\n\n    struct SwapParams {\n        address inSubstitute;\n        uint256 amount;\n        bytes data;\n    }\n\n    error CollateralSwapFailed(string reason);\n\n    function borrow(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 maxPayInterest,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable returns (uint256 positionId);\n\n    function adjust(\n        uint256 positionId,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        int256 interestThreshold,\n        Epoch expiredWith,\n        SwapParams calldata swapParams,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IControllerV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {BookId} from \"../external/clober-v2/BookId.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\n\ninterface IControllerV2 {\n    event SetCouponMarket(address indexed asset, Epoch indexed epoch, BookId sellMarketBookId, BookId buyMarketBookId);\n    event CouponTrade(uint256 indexed positionId, int256 cost, Coupon[] couponsToBuy, Coupon[] couponsToSell);\n\n    error InvalidAccess();\n    error InvalidMarket();\n    error ControllerSlippage();\n}\n"
    },
    "contracts/interfaces/ICouponManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1155MetadataURI} from \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\n\nimport {CouponKey} from \"../libraries/CouponKey.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {IERC1155Permit} from \"./IERC1155Permit.sol\";\n\ninterface ICouponManager is IERC1155MetadataURI, IERC1155Permit {\n    error InvalidAccess();\n\n    // View Functions //\n    function isMinter(address account) external view returns (bool);\n\n    function currentEpoch() external view returns (Epoch);\n\n    function epochEndTime(Epoch epoch) external pure returns (uint256);\n\n    function baseURI() external view returns (string memory);\n\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    function exists(uint256 id) external view returns (bool);\n\n    // User Functions\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external;\n\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external;\n\n    // Admin Functions //\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external;\n\n    function burnBatch(address user, Coupon[] calldata coupons) external;\n}\n"
    },
    "contracts/interfaces/IDepositControllerV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IControllerV2} from \"./IControllerV2.sol\";\nimport {ERC20PermitParams, PermitSignature} from \"../libraries/PermitParams.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\n\ninterface IDepositControllerV2 is IControllerV2 {\n    function deposit(\n        address token,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 minEarnInterest,\n        ERC20PermitParams calldata tokenPermitParams\n    ) external payable returns (uint256 positionId);\n\n    function adjust(\n        uint256 positionId,\n        uint256 amount,\n        Epoch expiredWith,\n        int256 interestThreshold,\n        ERC20PermitParams calldata tokenPermitParams,\n        PermitSignature calldata positionPermitParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IERC1155Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ninterface IERC1155Permit is IERC1155 {\n    error InvalidSignature();\n    error PermitExpired();\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function permit(address owner, address operator, bool approved, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        external;\n\n    function nonces(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IERC721Permit is IERC721 {\n    error InvalidSignature();\n    error PermitExpired();\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    function nonces(uint256 tokenId) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ILoanPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IPositionManagerTypes, IPositionManager} from \"./IPositionManager.sol\";\nimport {CouponKey} from \"../libraries/CouponKey.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {LoanPosition} from \"../libraries/LoanPosition.sol\";\n\ninterface ILoanPositionManagerTypes is IPositionManagerTypes {\n    // liquidationFee = liquidator fee + protocol fee\n    // debt = collateral * (1 - liquidationFee)\n    struct LoanConfiguration {\n        uint32 collateralDecimal;\n        uint32 debtDecimal;\n        uint32 liquidationThreshold;\n        uint32 liquidationFee;\n        uint32 liquidationProtocolFee;\n        uint32 liquidationTargetLtv;\n    }\n\n    event SetLoanConfiguration(\n        address indexed collateral,\n        address indexed debt,\n        uint32 liquidationThreshold,\n        uint32 liquidationFee,\n        uint32 liquidationProtocolFee,\n        uint32 liquidationTargetLtv,\n        address hook\n    );\n    event UpdatePosition(uint256 indexed positionId, uint256 collateralAmount, uint256 debtAmount, Epoch unlockedAt);\n    event LiquidatePosition(\n        uint256 indexed positionId,\n        address indexed liquidator,\n        uint256 liquidationAmount,\n        uint256 repayAmount,\n        uint256 protocolFeeAmount\n    );\n    event SetTreasury(address indexed newTreasury);\n\n    error TooSmallDebtLeft();\n    error InvalidAccess();\n    error FullRepaymentRequired();\n    error LiquidationThreshold();\n    error InvalidPair();\n    error InvalidConfiguration();\n    error UnableToLiquidate();\n}\n\ninterface ILoanPositionManager is ILoanPositionManagerTypes, IPositionManager {\n    function treasury() external view returns (address);\n\n    function oracle() external view returns (address);\n\n    function minDebtValueInEth() external view returns (uint256);\n\n    function getPosition(uint256 positionId) external view returns (LoanPosition memory);\n\n    function isPairRegistered(address collateral, address debt) external view returns (bool);\n\n    function getLoanConfiguration(address collateral, address debt) external view returns (LoanConfiguration memory);\n\n    function getOwedCouponAmount(address user, uint256 couponId) external view returns (uint256);\n\n    function getLiquidationStatus(uint256 positionId, uint256 maxRepayAmount)\n        external\n        view\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\n\n    function mint(address collateralToken, address debtToken) external returns (uint256 positionId);\n\n    function adjustPosition(uint256 positionId, uint256 collateralAmount, uint256 debtAmount, Epoch expiredWith)\n        external\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta);\n\n    function liquidate(uint256 positionId, uint256 maxRepayAmount)\n        external\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\n\n    function claimOwedCoupons(CouponKey[] memory couponKeys, bytes calldata data) external;\n\n    function setLoanConfiguration(\n        address collateral,\n        address debt,\n        uint32 liquidationThreshold,\n        uint32 liquidationFee,\n        uint32 liquidationProtocolFee,\n        uint32 liquidationTargetLtv,\n        address hook\n    ) external;\n\n    function setTreasury(address newTreasury) external;\n}\n"
    },
    "contracts/interfaces/IPositionLocker.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface IPositionLocker {\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory);\n}\n"
    },
    "contracts/interfaces/IPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport {IERC721Permit} from \"./IERC721Permit.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\n\ninterface IPositionManagerTypes {\n    error LockedBy(address locker);\n    error NotSettled();\n}\n\ninterface IPositionManager is IERC721Metadata, IERC721Permit, IPositionManagerTypes {\n    function baseURI() external view returns (string memory);\n\n    function contractURI() external view returns (string memory);\n\n    function nextId() external view returns (uint256);\n\n    function assetPool() external view returns (address);\n\n    function lockData() external view returns (uint128, uint128);\n\n    function assetDelta(address locker, uint256 assetId) external view returns (int256);\n\n    function lock(bytes calldata data) external returns (bytes memory);\n\n    function settlePosition(uint256 positionId) external;\n\n    function withdrawToken(address token, address to, uint256 amount) external;\n\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external;\n\n    function depositToken(address token, uint256 amount) external;\n\n    function burnCoupons(Coupon[] calldata coupons) external;\n}\n"
    },
    "contracts/interfaces/ISubstitute.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface ISubstitute {\n    event SetTreasury(address indexed newTreasury);\n    event Claim(address indexed treasury, uint256 adminYield);\n\n    error InvalidToken();\n    error ValueTransferFailed();\n\n    function treasury() external view returns (address);\n\n    function underlyingToken() external view returns (address);\n\n    function mint(uint256 amount, address to) external;\n\n    function burn(uint256 amount, address to) external;\n\n    function claim() external;\n\n    function mintableAmount() external view returns (uint256);\n\n    function burnableAmount() external view returns (uint256);\n\n    function setTreasury(address newTreasury) external;\n\n    function withdrawLostToken(address token, address recipient) external;\n}\n"
    },
    "contracts/libraries/BondPosition.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {Epoch, EpochLibrary} from \"./Epoch.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\n\nstruct BondPosition {\n    address asset;\n    uint64 nonce;\n    Epoch expiredWith;\n    bool isSettled;\n    uint256 amount;\n}\n\nlibrary BondPositionLibrary {\n    error UnmatchedPosition();\n    error InvalidPositionEpoch();\n\n    using EpochLibrary for Epoch;\n\n    function getAndIncrementNonce(BondPosition storage positionStorage) internal returns (uint64 nonce) {\n        nonce = positionStorage.nonce++;\n    }\n\n    function calculateCouponRequirement(BondPosition memory oldPosition, BondPosition memory newPosition)\n        internal\n        view\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\n    {\n        if (!(oldPosition.asset == newPosition.asset && oldPosition.nonce == newPosition.nonce)) {\n            revert UnmatchedPosition();\n        }\n\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\n            revert InvalidPositionEpoch();\n        }\n        uint256 mintCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\n        uint256 burnCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\n        unchecked {\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\n            if (newPosition.amount > oldPosition.amount) {\n                burnCouponsLength -= minCount;\n            } else if (newPosition.amount < oldPosition.amount) {\n                mintCouponsLength -= minCount;\n            } else {\n                mintCouponsLength -= minCount;\n                burnCouponsLength -= minCount;\n            }\n        }\n\n        mintCoupons = new Coupon[](mintCouponsLength);\n        burnCoupons = new Coupon[](burnCouponsLength);\n        mintCouponsLength = 0;\n        burnCouponsLength = 0;\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\n        unchecked {\n            Epoch epoch = latestExpiredEpoch;\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\n                epoch = epoch.add(1);\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.amount;\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.amount;\n                if (newAmount > oldAmount) {\n                    mintCoupons[mintCouponsLength++] =\n                        CouponLibrary.from(oldPosition.asset, epoch, newAmount - oldAmount);\n                } else if (newAmount < oldAmount) {\n                    burnCoupons[burnCouponsLength++] =\n                        CouponLibrary.from(oldPosition.asset, epoch, oldAmount - newAmount);\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/ControllerV2.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {IWETH9} from \"../external/weth/IWETH9.sol\";\nimport {IWrapped1155Factory} from \"../external/wrapped1155/IWrapped1155Factory.sol\";\nimport {ICouponManager} from \"../interfaces/ICouponManager.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\nimport {CouponKey, CouponKeyLibrary} from \"./CouponKey.sol\";\nimport {Wrapped1155MetadataBuilder} from \"./Wrapped1155MetadataBuilder.sol\";\nimport {ISubstitute} from \"../interfaces/ISubstitute.sol\";\nimport {ReentrancyGuard} from \"./ReentrancyGuard.sol\";\nimport {IController} from \"../external/clober-v2/IController.sol\";\nimport {IBookManager} from \"../external/clober-v2/IBookManager.sol\";\nimport {BookId, BookIdLibrary} from \"../external/clober-v2/BookId.sol\";\nimport {CurrencyLibrary, Currency} from \"../external/clober-v2/Currency.sol\";\nimport {IControllerV2} from \"../interfaces/IControllerV2.sol\";\nimport {SubstituteLibrary} from \"./Substitute.sol\";\nimport {Epoch} from \"./Epoch.sol\";\n\nabstract contract ControllerV2 is IControllerV2, ERC1155Holder, Ownable2Step, ReentrancyGuard {\n    using SafeCast for uint256;\n    using BookIdLibrary for IBookManager.BookKey;\n    using SafeERC20 for IERC20;\n    using CouponKeyLibrary for CouponKey;\n    using CouponLibrary for Coupon;\n    using CurrencyLibrary for Currency;\n    using SubstituteLibrary for ISubstitute;\n\n    IWrapped1155Factory internal immutable _wrapped1155Factory;\n    IController internal immutable _cloberController;\n    ICouponManager internal immutable _couponManager;\n    IBookManager internal immutable _bookManager;\n    IWETH9 internal immutable _weth;\n\n    mapping(uint256 couponId => IBookManager.BookKey) internal _couponSellMarkets;\n    mapping(uint256 couponId => IBookManager.BookKey) internal _couponBuyMarkets;\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberController,\n        address bookManager,\n        address couponManager,\n        address weth\n    ) Ownable(msg.sender) {\n        _wrapped1155Factory = IWrapped1155Factory(wrapped1155Factory);\n        _cloberController = IController(cloberController);\n        _couponManager = ICouponManager(couponManager);\n        _bookManager = IBookManager(bookManager);\n\n        _couponManager.setApprovalForAll(address(_cloberController), true);\n        _weth = IWETH9(weth);\n    }\n\n    modifier wrapAndRefundETH() {\n        bool hasMsgValue = address(this).balance > 0;\n        if (hasMsgValue) _weth.deposit{value: address(this).balance}();\n        _;\n        if (hasMsgValue) {\n            uint256 leftBalance = _weth.balanceOf(address(this));\n            if (leftBalance > 0) {\n                _weth.withdraw(leftBalance);\n                (bool success,) = msg.sender.call{value: leftBalance}(\"\");\n                require(success);\n            }\n        }\n    }\n\n    function _executeCouponTrade(\n        address user,\n        uint256 positionId,\n        address token,\n        Coupon[] memory couponsToMint,\n        Coupon[] memory couponsToBurn,\n        int256 interestThreshold\n    ) internal {\n        uint256 length = couponsToBurn.length + couponsToMint.length;\n        IController.Action[] memory actionList = new IController.Action[](length);\n        bytes[] memory paramsDataList = new bytes[](length);\n        address[] memory tokensToSettle = new address[](length + 1);\n        tokensToSettle[length] = token;\n\n        uint256 amount;\n        length = couponsToBurn.length;\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[i] = IController.Action.TAKE;\n            IBookManager.BookKey memory key = _couponBuyMarkets[couponsToBurn[i].key.toId()];\n            tokensToSettle[i] = Currency.unwrap(key.quote);\n            amount += couponsToBurn[i].amount;\n            paramsDataList[i] = abi.encode(\n                IController.TakeOrderParams({\n                    id: key.toId(),\n                    limitPrice: 0,\n                    quoteAmount: couponsToBurn[i].amount,\n                    hookData: \"\"\n                })\n            );\n        }\n        if (amount > 0) IERC20(token).approve(address(_cloberController), amount);\n\n        length = couponsToMint.length;\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[couponsToBurn.length + i] = IController.Action.SPEND;\n            IBookManager.BookKey memory key = _couponSellMarkets[couponsToMint[i].key.toId()];\n            tokensToSettle[couponsToBurn.length + i] = Currency.unwrap(key.base);\n            amount = couponsToMint[i].amount;\n            paramsDataList[couponsToBurn.length + i] = abi.encode(\n                IController.SpendOrderParams({id: key.toId(), limitPrice: 0, baseAmount: amount, hookData: \"\"})\n            );\n            // key.base can't be Currency.NATIVE\n            IERC20(Currency.unwrap(key.base)).approve(address(_cloberController), amount);\n        }\n\n        if (interestThreshold > 0) {\n            if (IERC20(token).balanceOf(address(this)) < uint256(interestThreshold)) {\n                address underlyingToken = ISubstitute(token).underlyingToken();\n                amount = Math.min(\n                    IERC20(underlyingToken).allowance(user, address(this)), IERC20(underlyingToken).balanceOf(user)\n                );\n                ISubstitute(token).mintAll(user, Math.min(uint256(interestThreshold), amount));\n            }\n            IERC20(token).approve(address(_cloberController), uint256(interestThreshold));\n        }\n\n        uint256 beforeBalance = IERC20(token).balanceOf(address(this));\n        int256 balanceDiff;\n        unchecked {\n            IController.ERC20PermitParams[] memory erc20PermitParamsList;\n            IController.ERC721PermitParams[] memory erc721PermitParamsList;\n            _cloberController.execute(\n                actionList,\n                paramsDataList,\n                tokensToSettle,\n                erc20PermitParamsList,\n                erc721PermitParamsList,\n                uint64(block.timestamp)\n            );\n            if (interestThreshold > 0) {\n                IERC20(token).approve(address(_cloberController), 0);\n            }\n\n            uint256 afterBalance = IERC20(token).balanceOf(address(this));\n            if (afterBalance > beforeBalance) {\n                balanceDiff = -(afterBalance - beforeBalance).toInt256();\n            } else {\n                balanceDiff = (beforeBalance - afterBalance).toInt256();\n            }\n        }\n        if (interestThreshold < balanceDiff) {\n            revert ControllerSlippage();\n        }\n        emit CouponTrade(positionId, balanceDiff, couponsToBurn, couponsToMint);\n    }\n\n    function _getUnderlyingToken(address substitute) internal view returns (address) {\n        return ISubstitute(substitute).underlyingToken();\n    }\n\n    function _burnAllSubstitute(address substitute, address to) internal {\n        uint256 leftAmount = IERC20(substitute).balanceOf(address(this));\n        if (leftAmount == 0) return;\n        ISubstitute(substitute).burn(leftAmount, to);\n    }\n\n    function _mintSubstituteAll(address token, address user, uint256 minRequired) internal {\n        ISubstitute(token).mintAll(user, minRequired);\n    }\n\n    function _wrapCoupons(Coupon[] memory coupons) internal {\n        // wrap 1155 to 20\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\n        _couponManager.safeBatchTransferFrom(address(this), address(_wrapped1155Factory), coupons, metadata);\n    }\n\n    function _unwrapCoupons(Coupon[] memory coupons) internal {\n        uint256[] memory tokenIds = new uint256[](coupons.length);\n        uint256[] memory amounts = new uint256[](coupons.length);\n        unchecked {\n            for (uint256 i = 0; i < coupons.length; ++i) {\n                tokenIds[i] = coupons[i].id();\n                amounts[i] = coupons[i].amount;\n            }\n        }\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\n        _wrapped1155Factory.batchUnwrap(address(_couponManager), tokenIds, amounts, address(this), metadata);\n    }\n\n    function getCouponMarket(CouponKey memory couponKey)\n        external\n        view\n        returns (IBookManager.BookKey memory, IBookManager.BookKey memory)\n    {\n        return (_couponSellMarkets[couponKey.toId()], _couponBuyMarkets[couponKey.toId()]);\n    }\n\n    function setCouponBookKey(\n        CouponKey memory couponKey,\n        IBookManager.BookKey calldata sellBookKey,\n        IBookManager.BookKey calldata buyBookKey\n    ) public virtual onlyOwner {\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey);\n        uint256 couponId = couponKey.toId();\n        address wrappedCoupon = _wrapped1155Factory.getWrapped1155(address(_couponManager), couponId, metadata);\n\n        BookId sellMarketBookId = sellBookKey.toId();\n        BookId buyMarketBookId = buyBookKey.toId();\n        if (\n            _bookManager.getBookKey(sellMarketBookId).unit != sellBookKey.unit\n                || _bookManager.getBookKey(buyMarketBookId).unit != buyBookKey.unit\n                || Currency.unwrap(sellBookKey.quote) != couponKey.asset\n                || Currency.unwrap(sellBookKey.base) != wrappedCoupon || Currency.unwrap(buyBookKey.quote) != wrappedCoupon\n                || Currency.unwrap(buyBookKey.base) != couponKey.asset\n        ) {\n            revert InvalidMarket();\n        }\n\n        _couponSellMarkets[couponId] = sellBookKey;\n        _couponBuyMarkets[couponId] = buyBookKey;\n\n        emit SetCouponMarket(couponKey.asset, couponKey.epoch, sellMarketBookId, buyMarketBookId);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/libraries/Coupon.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {CouponKey, CouponKeyLibrary} from \"./CouponKey.sol\";\n\nstruct Coupon {\n    CouponKey key;\n    uint256 amount;\n}\n\nlibrary CouponLibrary {\n    using CouponKeyLibrary for CouponKey;\n\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\n    }\n\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\n        return Coupon({key: couponKey, amount: amount});\n    }\n\n    function id(Coupon memory coupon) internal pure returns (uint256) {\n        return coupon.key.toId();\n    }\n}\n"
    },
    "contracts/libraries/CouponKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"./Epoch.sol\";\n\nstruct CouponKey {\n    address asset;\n    Epoch epoch;\n}\n\nlibrary CouponKeyLibrary {\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\n        uint16 epoch = Epoch.unwrap(key.epoch);\n        address asset = key.asset;\n        assembly {\n            id := add(asset, shl(160, epoch))\n        }\n    }\n}\n"
    },
    "contracts/libraries/Epoch.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.19;\n\ntype Epoch is uint16;\n\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==, ne as !=} for Epoch global;\n\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\n}\n\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\n}\n\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\n}\n\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\n}\n\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\n}\n\nfunction ne(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) != Epoch.unwrap(b);\n}\n\nlibrary EpochLibrary {\n    using EpochLibrary for Epoch;\n\n    error EpochOverflow();\n\n    uint256 internal constant MONTHS_PER_EPOCH = 1;\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    function startTime(Epoch epoch) internal pure returns (uint256) {\n        uint16 currentEpoch = Epoch.unwrap(epoch);\n        if (currentEpoch == 0) return 0;\n        unchecked {\n            return _epochToTimestamp(currentEpoch - 1) + 1;\n        }\n    }\n\n    function endTime(Epoch epoch) internal pure returns (uint256) {\n        return _epochToTimestamp(Epoch.unwrap(epoch));\n    }\n\n    function lastExpiredEpoch() internal view returns (Epoch) {\n        return current().sub(1);\n    }\n\n    function current() internal view returns (Epoch) {\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\n    }\n\n    function add(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\n    }\n\n    function sub(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\n    }\n\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint16) {\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\n    }\n\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\n        return a > b ? a : b;\n    }\n\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\n    // ------------------------------------------------------------------------\n    // Calculate year/month/day from the number of days since 1970/01/01 using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // int L = days + 68569 + offset\n    // int N = 4 * L / 146097\n    // L = L - (146097 * N + 3) / 4\n    // year = 4000 * (L + 1) / 1461001\n    // L = L - 1461 * year / 4 + 31\n    // month = 80 * L / 2447\n    // dd = L - 2447 * month / 80\n    // L = month / 11\n    // month = month + 2 - 12 * L\n    // year = 100 * (N - 49) + year + L\n    // ------------------------------------------------------------------------\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint16) {\n        unchecked {\n            uint256 _days = timestamp / SECONDS_PER_DAY;\n            int256 __days = int256(_days);\n\n            int256 L = __days + 68569 + OFFSET19700101;\n            int256 N = (4 * L) / 146097;\n            L = L - (146097 * N + 3) / 4;\n            int256 _year = (4000 * (L + 1)) / 1461001;\n            L = L - (1461 * _year) / 4 + 31;\n            int256 _month = (80 * L) / 2447;\n            L = _month / 11;\n            _month = _month + 2 - 12 * L;\n            _year = 100 * (N - 49) + _year + L;\n\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\n            if (epoch > type(uint16).max) revert EpochOverflow();\n            return uint16(epoch);\n        }\n    }\n\n    function _epochToTimestamp(uint16 epoch) internal pure returns (uint256) {\n        unchecked {\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\n            uint256 year = months / 12 + 1970;\n            months = (months % 12) << 4;\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\n            } else {\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\n            }\n            return (\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\n            ) * SECONDS_PER_DAY - 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/LoanPosition.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {Epoch, EpochLibrary} from \"./Epoch.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\n\nstruct LoanPosition {\n    uint64 nonce;\n    Epoch expiredWith;\n    bool isSettled;\n    address collateralToken;\n    address debtToken;\n    uint256 collateralAmount;\n    uint256 debtAmount;\n}\n\nlibrary LoanPositionLibrary {\n    error UnmatchedPosition();\n    error InvalidPositionEpoch();\n\n    using EpochLibrary for Epoch;\n\n    function getAndIncrementNonce(LoanPosition storage positionStorage) internal returns (uint64 nonce) {\n        nonce = positionStorage.nonce++;\n    }\n\n    function calculateCouponRequirement(LoanPosition memory oldPosition, LoanPosition memory newPosition)\n        internal\n        view\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\n    {\n        if (\n            !(\n                oldPosition.collateralToken == newPosition.collateralToken\n                    && oldPosition.debtToken == newPosition.debtToken && oldPosition.nonce == newPosition.nonce\n            )\n        ) revert UnmatchedPosition();\n\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\n            revert InvalidPositionEpoch();\n        }\n\n        uint256 mintCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\n        uint256 burnCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\n        unchecked {\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\n            if (newPosition.debtAmount > oldPosition.debtAmount) {\n                mintCouponsLength -= minCount;\n            } else if (newPosition.debtAmount < oldPosition.debtAmount) {\n                burnCouponsLength -= minCount;\n            } else {\n                burnCouponsLength -= minCount;\n                mintCouponsLength -= minCount;\n            }\n        }\n\n        mintCoupons = new Coupon[](mintCouponsLength);\n        burnCoupons = new Coupon[](burnCouponsLength);\n        mintCouponsLength = 0;\n        burnCouponsLength = 0;\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\n        unchecked {\n            Epoch epoch = latestExpiredEpoch;\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\n                epoch = epoch.add(1);\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.debtAmount;\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.debtAmount;\n                if (newAmount > oldAmount) {\n                    burnCoupons[burnCouponsLength++] =\n                        CouponLibrary.from(oldPosition.debtToken, epoch, newAmount - oldAmount);\n                } else if (newAmount < oldAmount) {\n                    mintCoupons[mintCouponsLength++] =\n                        CouponLibrary.from(oldPosition.debtToken, epoch, oldAmount - newAmount);\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/PermitParams.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {IERC721Permit} from \"../interfaces/IERC721Permit.sol\";\nimport {IERC1155Permit} from \"../interfaces/IERC1155Permit.sol\";\n\nstruct ERC20PermitParams {\n    uint256 permitAmount;\n    PermitSignature signature;\n}\n\nstruct PermitSignature {\n    uint256 deadline;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n}\n\nlibrary PermitParamsLibrary {\n    function tryPermit(ERC20PermitParams memory params, address token, address from, address to)\n        internal\n        returns (bool)\n    {\n        return tryPermit(params.signature, IERC20Permit(token), params.permitAmount, from, to);\n    }\n\n    function tryPermit(PermitSignature memory params, IERC20Permit token, uint256 amount, address from, address to)\n        internal\n        returns (bool)\n    {\n        if (params.deadline > 0) {\n            try token.permit(from, to, amount, params.deadline, params.v, params.r, params.s) {\n                return true;\n            } catch {}\n        }\n        return false;\n    }\n\n    function tryPermit(PermitSignature memory params, IERC721Permit token, uint256 positionId, address to)\n        internal\n        returns (bool)\n    {\n        if (params.deadline > 0) {\n            try token.permit(to, positionId, params.deadline, params.v, params.r, params.s) {\n                return true;\n            } catch {}\n        }\n        return false;\n    }\n\n    function tryPermit(PermitSignature memory params, IERC1155Permit token, address from, address to, bool approved)\n        internal\n        returns (bool)\n    {\n        if (params.deadline > 0) {\n            try token.permit(from, to, approved, params.deadline, params.v, params.r, params.s) {\n                return true;\n            } catch {}\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/libraries/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Clober (https://github.com/clober-dex/coupon-finance/blob/main/contracts/libraries/ReentrancyGuard.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    error Reentrancy();\n\n    uint256 internal _locked = 1;\n\n    modifier nonReentrant() virtual {\n        if (_locked != 1) revert Reentrancy();\n\n        _locked = 2;\n\n        _;\n\n        _locked = 1;\n    }\n}\n"
    },
    "contracts/libraries/Substitute.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {ISubstitute} from \"../interfaces/ISubstitute.sol\";\n\nlibrary SubstituteLibrary {\n    using SafeERC20 for IERC20;\n\n    function mintAll(ISubstitute substitute, address payer, uint256 minRequiredBalance) internal {\n        address underlyingToken = substitute.underlyingToken();\n        uint256 thisBalance = IERC20(address(substitute)).balanceOf(address(this));\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\n        if (minRequiredBalance > thisBalance + underlyingBalance) {\n            unchecked {\n                IERC20(underlyingToken).safeTransferFrom(\n                    payer, address(this), minRequiredBalance - thisBalance - underlyingBalance\n                );\n                underlyingBalance = minRequiredBalance - thisBalance;\n            }\n        }\n        if (underlyingBalance > 0) {\n            IERC20(underlyingToken).approve(address(substitute), underlyingBalance);\n            substitute.mint(underlyingBalance, address(this));\n        }\n    }\n\n    function burnAll(ISubstitute substitute, address to) internal {\n        uint256 leftAmount = IERC20(address(substitute)).balanceOf(address(this));\n        if (leftAmount > 0) {\n            ISubstitute(substitute).burn(leftAmount, to);\n        }\n    }\n}\n"
    },
    "contracts/libraries/Wrapped1155MetadataBuilder.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport {CouponKey} from \"./CouponKey.sol\";\nimport {Coupon} from \"./Coupon.sol\";\nimport {Epoch} from \"./Epoch.sol\";\n\nlibrary Wrapped1155MetadataBuilder {\n    function buildWrapped1155Metadata(CouponKey memory couponKey) internal view returns (bytes memory) {\n        string memory tokenSymbol = IERC20Metadata(couponKey.asset).symbol();\n        string memory epochString = Strings.toString(Epoch.unwrap(couponKey.epoch));\n        // @dev assume that tokenSymbol.length <= 12\n        bytes32 nameData = bytes32(abi.encodePacked(tokenSymbol, \" Bond Coupon (\", epochString, \")\"));\n        bytes32 symbolData = bytes32(abi.encodePacked(tokenSymbol, \"-CP\", epochString));\n        assembly {\n            let addLength := mul(2, add(mload(tokenSymbol), mload(epochString)))\n            nameData := add(nameData, add(30, addLength))\n            symbolData := add(symbolData, add(6, addLength))\n        }\n        return abi.encodePacked(nameData, symbolData, bytes1(IERC20Metadata(couponKey.asset).decimals()));\n    }\n\n    function buildWrapped1155BatchMetadata(CouponKey[] memory couponKeys) internal view returns (bytes memory data) {\n        unchecked {\n            for (uint256 i = 0; i < couponKeys.length; ++i) {\n                data = bytes.concat(data, buildWrapped1155Metadata(couponKeys[i]));\n            }\n        }\n    }\n\n    function buildWrapped1155BatchMetadata(Coupon[] memory coupons) internal view returns (bytes memory data) {\n        unchecked {\n            for (uint256 i = 0; i < coupons.length; ++i) {\n                data = bytes.concat(data, buildWrapped1155Metadata(coupons[i].key));\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
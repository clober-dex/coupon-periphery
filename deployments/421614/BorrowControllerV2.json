{
  "address": "0x1B3c13c5CD7907334d68cBef6109CE0fC249C309",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapped1155Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cloberController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bookManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "couponManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loanPositionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "CollateralSwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ControllerSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMarket",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrancy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintToInt",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "cost",
          "type": "int256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "Epoch",
                  "name": "epoch",
                  "type": "uint16"
                }
              ],
              "internalType": "struct CouponKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Coupon[]",
          "name": "couponsToBuy",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "Epoch",
                  "name": "epoch",
                  "type": "uint16"
                }
              ],
              "internalType": "struct CouponKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Coupon[]",
          "name": "couponsToSell",
          "type": "tuple[]"
        }
      ],
      "name": "CouponTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Epoch",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "BookId",
          "name": "sellMarketBookId",
          "type": "uint192"
        },
        {
          "indexed": false,
          "internalType": "BookId",
          "name": "buyMarketBookId",
          "type": "uint192"
        }
      ],
      "name": "SetCouponMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "outToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "name": "SwapToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "interestThreshold",
          "type": "int256"
        },
        {
          "internalType": "Epoch",
          "name": "expiredWith",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inSubstitute",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IBorrowControllerV2.SwapParams",
          "name": "swapParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermitSignature",
          "name": "positionPermitParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC20PermitParams",
          "name": "collateralPermitParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC20PermitParams",
          "name": "debtPermitParams",
          "type": "tuple"
        }
      ],
      "name": "adjust",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "maxPayInterest",
          "type": "int256"
        },
        {
          "internalType": "Epoch",
          "name": "expiredWith",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inSubstitute",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IBorrowControllerV2.SwapParams",
          "name": "swapParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC20PermitParams",
          "name": "collateralPermitParams",
          "type": "tuple"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "Epoch",
              "name": "epoch",
              "type": "uint16"
            }
          ],
          "internalType": "struct CouponKey",
          "name": "couponKey",
          "type": "tuple"
        }
      ],
      "name": "getCouponMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unit",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unit",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "positionLockAcquired",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "Epoch",
              "name": "epoch",
              "type": "uint16"
            }
          ],
          "internalType": "struct CouponKey",
          "name": "couponKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unit",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "sellBookKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unit",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "buyBookKey",
          "type": "tuple"
        }
      ],
      "name": "setCouponBookKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe900ae8afa63a1728cbcb854364ecf08e1f7feee13ebea776dc25a9891e3fd93",
  "receipt": {
    "to": null,
    "from": "0xa0E3174f4D222C5CBf705A138C6a9369935EeD81",
    "contractAddress": "0x1B3c13c5CD7907334d68cBef6109CE0fC249C309",
    "transactionIndex": 2,
    "gasUsed": "14445633",
    "logsBloom": "0x40000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000080000000000020000000000000000000000000000800000000001021000008000000000000000000000002000000022000000000000000000c00000000000000000000000000000000400000000000000000800000000004000000000000004000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000001000000080000020000000200800000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x048cbbbb3db0d7b57167cfea6d76e97482e450f6e4051107b85c0be7d063639c",
    "transactionHash": "0xe900ae8afa63a1728cbcb854364ecf08e1f7feee13ebea776dc25a9891e3fd93",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 27827674,
        "transactionHash": "0xe900ae8afa63a1728cbcb854364ecf08e1f7feee13ebea776dc25a9891e3fd93",
        "address": "0x1B3c13c5CD7907334d68cBef6109CE0fC249C309",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a0e3174f4d222c5cbf705a138c6a9369935eed81"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x048cbbbb3db0d7b57167cfea6d76e97482e450f6e4051107b85c0be7d063639c"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 27827674,
        "transactionHash": "0xe900ae8afa63a1728cbcb854364ecf08e1f7feee13ebea776dc25a9891e3fd93",
        "address": "0xF4723F17a6CCb33cF7221636cc07ee7752F865FA",
        "topics": [
          "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
          "0x0000000000000000000000001b3c13c5cd7907334d68cbef6109ce0fc249c309",
          "0x0000000000000000000000002489e8daffb7a4900074840c24e8096a25e2eeb0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 2,
        "blockHash": "0x048cbbbb3db0d7b57167cfea6d76e97482e450f6e4051107b85c0be7d063639c"
      }
    ],
    "blockNumber": 27827674,
    "cumulativeGasUsed": "14633062",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfcBE16BfD991E4949244E59d9b524e6964b8BB75",
    "0x2489e8daffb7A4900074840C24e8096A25e2Eeb0",
    "0x6411E5f824E1386d62ea20bFE5d815933F7E8491",
    "0xF4723F17a6CCb33cF7221636cc07ee7752F865FA",
    "0xE0dBCB42CCAc63C949cE3EF879A647DDb662916d",
    "0xa9c39C3B106023282F3E4da74B601585f15c3e0F",
    "0xfd71fBe411E839220b625826858578454f58F4b2"
  ],
  "numDeployments": 1,
  "solcInputHash": "1137a8c1aa36304c07d3c419e87543a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapped1155Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cloberController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bookManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"couponManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CollateralSwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ControllerSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMarket\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct CouponKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Coupon[]\",\"name\":\"couponsToBuy\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct CouponKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Coupon[]\",\"name\":\"couponsToSell\",\"type\":\"tuple[]\"}],\"name\":\"CouponTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"BookId\",\"name\":\"sellMarketBookId\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"BookId\",\"name\":\"buyMarketBookId\",\"type\":\"uint192\"}],\"name\":\"SetCouponMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"SwapToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"interestThreshold\",\"type\":\"int256\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inSubstitute\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IBorrowControllerV2.SwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"positionPermitParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC20PermitParams\",\"name\":\"collateralPermitParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC20PermitParams\",\"name\":\"debtPermitParams\",\"type\":\"tuple\"}],\"name\":\"adjust\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"maxPayInterest\",\"type\":\"int256\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inSubstitute\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IBorrowControllerV2.SwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC20PermitParams\",\"name\":\"collateralPermitParams\",\"type\":\"tuple\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct CouponKey\",\"name\":\"couponKey\",\"type\":\"tuple\"}],\"name\":\"getCouponMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"positionLockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct CouponKey\",\"name\":\"couponKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"sellBookKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"buyBookKey\",\"type\":\"tuple\"}],\"name\":\"setCouponBookKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BorrowControllerV2.sol\":\"BorrowControllerV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BorrowControllerV2.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IBorrowControllerV2} from \\\"./interfaces/IBorrowControllerV2.sol\\\";\\nimport {ILoanPositionManager} from \\\"./interfaces/ILoanPositionManager.sol\\\";\\nimport {ISubstitute} from \\\"./interfaces/ISubstitute.sol\\\";\\nimport {IPositionLocker} from \\\"./interfaces/IPositionLocker.sol\\\";\\nimport {LoanPosition} from \\\"./libraries/LoanPosition.sol\\\";\\nimport {Coupon} from \\\"./libraries/Coupon.sol\\\";\\nimport {Epoch, EpochLibrary} from \\\"./libraries/Epoch.sol\\\";\\nimport {ControllerV2} from \\\"./libraries/ControllerV2.sol\\\";\\nimport {ERC20PermitParams, PermitSignature, PermitParamsLibrary} from \\\"./libraries/PermitParams.sol\\\";\\n\\ncontract BorrowControllerV2 is IBorrowControllerV2, ControllerV2, IPositionLocker {\\n    using PermitParamsLibrary for *;\\n    using EpochLibrary for Epoch;\\n\\n    ILoanPositionManager private immutable _loanPositionManager;\\n    address private immutable _router;\\n\\n    modifier onlyPositionOwner(uint256 positionId) {\\n        if (_loanPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\\n        _;\\n    }\\n\\n    constructor(\\n        address wrapped1155Factory,\\n        address cloberController,\\n        address bookManager,\\n        address couponManager,\\n        address weth,\\n        address loanPositionManager,\\n        address router\\n    ) ControllerV2(wrapped1155Factory, cloberController, bookManager, couponManager, weth) {\\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\\n        _router = router;\\n    }\\n\\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\\n        if (msg.sender != address(_loanPositionManager)) revert InvalidAccess();\\n\\n        uint256 positionId;\\n        address user;\\n        SwapParams memory swapParams;\\n        (positionId, user, swapParams, data) = abi.decode(data, (uint256, address, SwapParams, bytes));\\n        if (positionId == 0) {\\n            address collateralToken;\\n            address debtToken;\\n            (collateralToken, debtToken, data) = abi.decode(data, (address, address, bytes));\\n            positionId = _loanPositionManager.mint(collateralToken, debtToken);\\n            result = abi.encode(positionId);\\n        }\\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\\n\\n        int256 interestThreshold;\\n        (position.collateralAmount, position.debtAmount, position.expiredWith, interestThreshold) =\\n            abi.decode(data, (uint256, uint256, Epoch, int256));\\n\\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta) =\\n        _loanPositionManager.adjustPosition(\\n            positionId, position.collateralAmount, position.debtAmount, position.expiredWith\\n        );\\n        if (collateralDelta < 0) {\\n            _loanPositionManager.withdrawToken(position.collateralToken, address(this), uint256(-collateralDelta));\\n        }\\n        if (debtDelta > 0) _loanPositionManager.withdrawToken(position.debtToken, address(this), uint256(debtDelta));\\n        if (couponsToMint.length > 0) {\\n            _loanPositionManager.mintCoupons(couponsToMint, address(this), \\\"\\\");\\n            _wrapCoupons(couponsToMint);\\n        }\\n\\n        if (swapParams.inSubstitute == position.collateralToken) {\\n            _swap(positionId, position.collateralToken, position.debtToken, swapParams.amount, swapParams.data);\\n        } else if (swapParams.inSubstitute == position.debtToken) {\\n            _swap(positionId, position.debtToken, position.collateralToken, swapParams.amount, swapParams.data);\\n        }\\n\\n        _executeCouponTrade(user, positionId, position.debtToken, couponsToMint, couponsToBurn, interestThreshold);\\n\\n        if (collateralDelta > 0) {\\n            _mintSubstituteAll(position.collateralToken, user, uint256(collateralDelta));\\n            IERC20(position.collateralToken).approve(address(_loanPositionManager), uint256(collateralDelta));\\n            _loanPositionManager.depositToken(position.collateralToken, uint256(collateralDelta));\\n        }\\n        if (debtDelta < 0) {\\n            _mintSubstituteAll(position.debtToken, user, uint256(-debtDelta));\\n            IERC20(position.debtToken).approve(address(_loanPositionManager), uint256(-debtDelta));\\n            _loanPositionManager.depositToken(position.debtToken, uint256(-debtDelta));\\n        }\\n        if (couponsToBurn.length > 0) {\\n            _unwrapCoupons(couponsToBurn);\\n            _loanPositionManager.burnCoupons(couponsToBurn);\\n        }\\n\\n        _loanPositionManager.settlePosition(positionId);\\n    }\\n\\n    function borrow(\\n        address collateralToken,\\n        address debtToken,\\n        uint256 collateralAmount,\\n        uint256 debtAmount,\\n        int256 maxPayInterest,\\n        Epoch expiredWith,\\n        SwapParams calldata swapParams,\\n        ERC20PermitParams calldata collateralPermitParams\\n    ) external payable nonReentrant wrapAndRefundETH returns (uint256 positionId) {\\n        collateralPermitParams.tryPermit(_getUnderlyingToken(collateralToken), msg.sender, address(this));\\n\\n        bytes memory lockData = abi.encode(collateralAmount, debtAmount, expiredWith, maxPayInterest);\\n        lockData = abi.encode(0, msg.sender, swapParams, abi.encode(collateralToken, debtToken, lockData));\\n        bytes memory result = _loanPositionManager.lock(lockData);\\n        positionId = abi.decode(result, (uint256));\\n\\n        _burnAllSubstitute(collateralToken, msg.sender);\\n        _burnAllSubstitute(debtToken, msg.sender);\\n        _loanPositionManager.transferFrom(address(this), msg.sender, positionId);\\n    }\\n\\n    function adjust(\\n        uint256 positionId,\\n        uint256 collateralAmount,\\n        uint256 debtAmount,\\n        int256 interestThreshold,\\n        Epoch expiredWith,\\n        SwapParams calldata swapParams,\\n        PermitSignature calldata positionPermitParams,\\n        ERC20PermitParams calldata collateralPermitParams,\\n        ERC20PermitParams calldata debtPermitParams\\n    ) external payable nonReentrant wrapAndRefundETH onlyPositionOwner(positionId) {\\n        positionPermitParams.tryPermit(_loanPositionManager, positionId, address(this));\\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\\n        collateralPermitParams.tryPermit(_getUnderlyingToken(position.collateralToken), msg.sender, address(this));\\n        debtPermitParams.tryPermit(_getUnderlyingToken(position.debtToken), msg.sender, address(this));\\n\\n        position.collateralAmount = collateralAmount;\\n        position.debtAmount = debtAmount;\\n        position.expiredWith = expiredWith;\\n\\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, interestThreshold, swapParams));\\n\\n        _burnAllSubstitute(position.collateralToken, msg.sender);\\n        _burnAllSubstitute(position.debtToken, msg.sender);\\n    }\\n\\n    function _swap(\\n        uint256 positionId,\\n        address inSubstitute,\\n        address outSubstitute,\\n        uint256 inAmount,\\n        bytes memory swapParams\\n    ) internal returns (uint256 outAmount) {\\n        address inToken = ISubstitute(inSubstitute).underlyingToken();\\n        address outToken = ISubstitute(outSubstitute).underlyingToken();\\n        uint256 beforeOutTokenBalance = IERC20(outToken).balanceOf(address(this));\\n\\n        ISubstitute(inSubstitute).burn(inAmount, address(this));\\n        if (inToken == address(_weth)) _weth.deposit{value: inAmount}();\\n        IERC20(inToken).approve(_router, inAmount);\\n        (bool success, bytes memory result) = _router.call(swapParams);\\n        if (!success) revert CollateralSwapFailed(string(result));\\n        IERC20(inToken).approve(_router, 0);\\n\\n        unchecked {\\n            outAmount = IERC20(outToken).balanceOf(address(this)) - beforeOutTokenBalance;\\n        }\\n        emit SwapToken(positionId, inToken, outToken, inAmount, outAmount);\\n\\n        IERC20(outToken).approve(outSubstitute, outAmount);\\n        ISubstitute(outSubstitute).mint(outAmount, address(this));\\n    }\\n\\n    function _encodeAdjustData(\\n        uint256 id,\\n        LoanPosition memory p,\\n        int256 interestThreshold,\\n        SwapParams memory swapParams\\n    ) internal view returns (bytes memory) {\\n        bytes memory data = abi.encode(p.collateralAmount, p.debtAmount, p.expiredWith, interestThreshold);\\n        return abi.encode(id, msg.sender, swapParams, data);\\n    }\\n}\\n\",\"keccak256\":\"0x684962921cc98eb0b5ab81f8998a1b44ffa48b56ac244818387a6dedff90dd5b\",\"license\":\"-\"},\"contracts/external/clober-v2/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := hash\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21c07efc647d3a7e4d7da25ee901343674e35850c32a490195dbe6eaa9dc9f5f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xf04f76015a51981ad0f84fd3ebb0a4eb6c31685604c22584669915aa8dd7ac54\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(rate_, MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\\n    }\\n}\\n\",\"keccak256\":\"0x7a4cd1d64d5c55f9f13144b5e0711317b5c83582b869def9a6a0c7cd0cc4c332\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {BookId} from \\\"./BookId.sol\\\";\\nimport {Currency} from \\\"./Currency.sol\\\";\\nimport {OrderId} from \\\"./OrderId.sol\\\";\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {FeePolicy} from \\\"./FeePolicy.sol\\\";\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnit();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unit The unit of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unit,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param amount The order amount\\n     * @param provider The provider address\\n     */\\n    event Make(\\n        BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 amount, address provider\\n    );\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param amount The order amount\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 amount);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param canceledAmount The canceled amount\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 canceledAmount);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param rawAmount The claimed amount\\n     */\\n    event Claim(OrderId indexed orderId, uint64 rawAmount);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed newDefaultProvider);\\n\\n    struct BookKey {\\n        Currency base;\\n        uint64 unit;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function currencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable amount\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the highest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The highest tick\\n     */\\n    function getHighest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the maximum tick less than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the lowest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next lower tick\\n     */\\n    function maxLessThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 amount; // times 10**unitDecimals to get actual bid amount\\n        /// @notice The limit order service provider address to collect fees\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxAmount;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 to;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param provider The provider address\\n     * @param currency The currency\\n     */\\n    function collect(address provider, Currency currency) external;\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0x478c569e102496c5548b784520b816c2fa149dd1811c6f0b6157213fb720b5b8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/IController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\nimport {OrderId} from \\\"./OrderId.sol\\\";\\nimport {BookId} from \\\"./BookId.sol\\\";\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\n\\n/**\\n * @title IController\\n * @notice Interface for the controller contract\\n */\\ninterface IController {\\n    // Error messages\\n    error InvalidAccess();\\n    error InvalidLength();\\n    error Deadline();\\n    error InvalidMarket();\\n    error ControllerSlippage();\\n    error ValueTransferFailed();\\n    error InvalidAction();\\n\\n    /**\\n     * @notice Enum for the different actions that can be performed\\n     */\\n    enum Action {\\n        OPEN,\\n        MAKE,\\n        LIMIT,\\n        TAKE,\\n        SPEND,\\n        CLAIM,\\n        CANCEL\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the ERC20 permit\\n     */\\n    struct ERC20PermitParams {\\n        address token;\\n        uint256 permitAmount;\\n        PermitSignature signature;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the ERC721 permit\\n     */\\n    struct ERC721PermitParams {\\n        uint256 tokenId;\\n        PermitSignature signature;\\n    }\\n\\n    /**\\n     * @notice Struct for the signature of the permit\\n     */\\n    struct PermitSignature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the open book action\\n     */\\n    struct OpenBookParams {\\n        IBookManager.BookKey key;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the make order action\\n     */\\n    struct MakeOrderParams {\\n        BookId id;\\n        Tick tick;\\n        uint256 quoteAmount;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the limit order action\\n     */\\n    struct LimitOrderParams {\\n        BookId takeBookId;\\n        BookId makeBookId;\\n        uint256 limitPrice;\\n        Tick tick;\\n        uint256 quoteAmount;\\n        bytes takeHookData;\\n        bytes makeHookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the take order action\\n     */\\n    struct TakeOrderParams {\\n        BookId id;\\n        uint256 limitPrice;\\n        uint256 quoteAmount;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the spend order action\\n     */\\n    struct SpendOrderParams {\\n        BookId id;\\n        uint256 limitPrice;\\n        uint256 baseAmount;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the claim order action\\n     */\\n    struct ClaimOrderParams {\\n        OrderId id;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the cancel order action\\n     */\\n    struct CancelOrderParams {\\n        OrderId id;\\n        uint256 leftQuoteAmount;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Opens a book\\n     * @param openBookParamsList The parameters of the open book action\\n     * @param deadline The deadline for the action\\n     */\\n    function open(OpenBookParams[] calldata openBookParamsList, uint64 deadline) external;\\n\\n    /**\\n     * @notice Returns the depth of a book\\n     * @param id The id of the book\\n     * @param tick The tick of the book\\n     * @return The depth of the book in quote amount\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the highest price of a book\\n     * @param id The id of the book\\n     * @return The highest price of the book with 2**128 precision\\n     */\\n    function getHighestPrice(BookId id) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the details of an order\\n     * @param orderId The id of the order\\n     * @return provider The provider of the order\\n     * @return price The price of the order with 2**128 precision\\n     * @return openAmount The open quote amount of the order\\n     * @return claimableAmount The claimable base amount of the order\\n     */\\n    function getOrder(OrderId orderId)\\n        external\\n        view\\n        returns (address provider, uint256 price, uint256 openAmount, uint256 claimableAmount);\\n\\n    /**\\n     * @notice Converts a price to a tick\\n     * @param price The price to convert\\n     * @return The tick\\n     */\\n    function fromPrice(uint256 price) external pure returns (Tick);\\n\\n    /**\\n     * @notice Converts a tick to a price\\n     * @param tick The tick to convert\\n     * @return The price with 2**128 precision\\n     */\\n    function toPrice(Tick tick) external pure returns (uint256);\\n\\n    /**\\n     * @notice Executes a list of actions\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param actionList The list of actions to execute\\n     * @param paramsDataList The parameters of the actions\\n     * @param tokensToSettle The tokens to settle\\n     * @param erc20PermitParamsList The parameters of the ERC20 permits\\n     * @param erc721PermitParamsList The parameters of the ERC721 permits\\n     * @param deadline The deadline for the actions\\n     * @return ids The ids of the orders\\n     */\\n    function execute(\\n        Action[] calldata actionList,\\n        bytes[] calldata paramsDataList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata erc20PermitParamsList,\\n        ERC721PermitParams[] calldata erc721PermitParamsList,\\n        uint64 deadline\\n    ) external payable returns (OrderId[] memory ids);\\n\\n    /**\\n     * @notice Makes a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to make\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     * @return ids The ids of the orders\\n     */\\n    function make(\\n        MakeOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable returns (OrderId[] memory ids);\\n\\n    /**\\n     * @notice Takes a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to take\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     */\\n    function take(\\n        TakeOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable;\\n\\n    /**\\n     * @notice Spends to take a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to spend\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     */\\n    function spend(\\n        SpendOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable;\\n\\n    /**\\n     * @notice Claims a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to claim\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     */\\n    function claim(\\n        ClaimOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC721PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external;\\n\\n    /**\\n     * @notice Cancels a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to cancel\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     */\\n    function cancel(\\n        CancelOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC721PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xda93a7904fd1826aefee239a9d3de42f7569d2b1f4782bca775fc097cbf1f001\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4d9d80441c88885319565bc701c35d50c73bfa100a49a5fc8e5102fb416aabf\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\nimport {OrderId} from \\\"./OrderId.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenAmount The amount that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledAmount The amount that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedAmount The amount that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedAmount, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xea60e3378e73b34fe31e91684cb50a8a33e37a352667f593f02d6a81cc5ec79f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {SignificantBit} from \\\"./SignificantBit.sol\\\";\\n\\nlibrary Math {\\n    using SignificantBit for uint256;\\n\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (int256) {\\n        require(x > 0);\\n\\n        uint8 msb = x.mostSignificantBit();\\n\\n        if (msb > 128) x >>= msb - 128;\\n        else if (msb < 128) x <<= 128 - msb;\\n\\n        x &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        int256 result = (int256(uint256(msb)) - 128) << 128; // Integer part of log_2\\n\\n        int256 bit = 0x80000000000000000000000000000000;\\n        for (uint8 i = 0; i < 128 && x > 0; i++) {\\n            x = (x << 1) + ((x * x + 0x80000000000000000000000000000000) >> 128);\\n            if (x > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                result |= bit;\\n                x = (x >> 1) - 0x80000000000000000000000000000000;\\n            }\\n            bit >>= 1;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x44a5703a0cdbdf56c972cb7ddeb5205996e4879ee3d09a5f5c785adc4de076ab\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {BookId} from \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := shr(40, id)\\n            index := id\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x795bc60823e06a4e534b549bd13173a983f92a0d9ff840129caee9ee26fa661d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/SignificantBit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignificantBit {\\n    // http://supertech.csail.mit.edu/papers/debruijn.pdf\\n    uint256 internal constant DEBRUIJN_SEQ = 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF;\\n    bytes internal constant DEBRUIJN_INDEX =\\n        hex\\\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\\\";\\n\\n    /**\\n     * @notice Finds the index of the least significant bit.\\n     * @param x The value to compute the least significant bit for. Must be a non-zero value.\\n     * @return ret The index of the least significant bit.\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 index;\\n        assembly {\\n            index := shr(248, mul(and(x, add(not(x), 1)), DEBRUIJN_SEQ))\\n        }\\n        return uint8(DEBRUIJN_INDEX[index]); // can optimize with CODECOPY opcode\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 msb;\\n        assembly {\\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(5, gt(x, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(4, gt(x, 0xFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(3, gt(x, 0xFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(2, gt(x, 0xF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(1, gt(x, 0x3))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := gt(x, 0x1)\\n            msb := or(msb, f)\\n        }\\n        return uint8(msb);\\n    }\\n}\\n\",\"keccak256\":\"0x8dae2286bc0000fa7607b781f9ad044e81b48d10742cde8ecc050e58b1390c9b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober-v2/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for uint256;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 5800731190957938;\\n    uint256 internal constant MAX_PRICE = 19961636804996334433808922353085948875386438476189866322430503;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990580e2139; // 2^128 / r^(2^0)\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357cf3c7fdcb;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624eaa0941ccf;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db58835c926643;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896dfb254bf;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b326b52860;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1969c3052;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b479aa3a3;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074cf7815e53;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a398e4b70f2;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7fa6e889d8;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f792aa5825;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f90e061e4;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df62baf32f6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505542fcfa5;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54f3e99bc8;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329225ee604;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea926041bedfe97;\\n    uint256 private constant _R18 = 0x48a170391f7dc42444e8fa2;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function toTick(uint24 x) internal pure returns (Tick t) {\\n        assembly {\\n            t := sub(x, 0x800000)\\n        }\\n    }\\n\\n    function toUint24(Tick tick) internal pure returns (uint24 r) {\\n        assembly {\\n            r := add(tick, 0x800000)\\n        }\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        int256 log = price.log2();\\n        int256 tick = log / 49089913871092318234424474366155889;\\n        int256 tickLow = (\\n            log - int256(uint256((price >> 128 == 0) ? 49089913871092318234424474366155887 : 84124744249948177485425))\\n        ) / 49089913871092318234424474366155889;\\n\\n        if (tick == tickLow) return Tick.wrap(int24(tick));\\n\\n        if (toPrice(Tick.wrap(int24(tick))) <= price) return Tick.wrap(int24(tick));\\n\\n        return Tick.wrap(int24(tickLow));\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 128;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 128;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 128;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 128;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 128;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 128;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 128;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 128;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 128;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 128;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 128;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 128;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 128;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 128;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 128;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 128;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 128;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 128;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 128;\\n        }\\n        if (tickValue > 0) price = type(uint256).max / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 128, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = raw(uint64) * unit(uint64) < 2^128\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 128, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0xb16d803debbca272bfbf72925254a341a560c868b020db23ff9a888bd3d1b42b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/weth/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IWETH9 is IERC20Metadata {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x2ee71d25c3fbf9b954291eb2c76b1149fc9cf6456944019adbb6b051ff1bda11\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/wrapped1155/IWrapped1155Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n// @author Gnosis (https://github.com/gnosis/1155-to-20)\\ninterface IWrapped1155Factory is IERC1155Receiver {\\n    function erc20Implementation() external view returns (address);\\n\\n    function unwrap(address multiToken, uint256 tokenId, uint256 amount, address recipient, bytes calldata data)\\n        external;\\n\\n    function batchUnwrap(\\n        address multiToken,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    function getWrapped1155DeployBytecode(address multiToken, uint256 tokenId, bytes calldata data)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function getWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external view returns (address);\\n\\n    function requireWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external returns (address);\\n}\\n\",\"keccak256\":\"0x2b36f8a611877ddea2dff0d422220b3775618fd92c2180c5456b891bc10ab94d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBorrowControllerV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IControllerV2} from \\\"./IControllerV2.sol\\\";\\nimport {ERC20PermitParams, PermitSignature} from \\\"../libraries/PermitParams.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\n\\ninterface IBorrowControllerV2 is IControllerV2 {\\n    event SwapToken(\\n        uint256 indexed positionId,\\n        address indexed inToken,\\n        address indexed outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    );\\n\\n    struct SwapParams {\\n        address inSubstitute;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    error CollateralSwapFailed(string reason);\\n\\n    function borrow(\\n        address collateralToken,\\n        address debtToken,\\n        uint256 collateralAmount,\\n        uint256 debtAmount,\\n        int256 maxPayInterest,\\n        Epoch expiredWith,\\n        SwapParams calldata swapParams,\\n        ERC20PermitParams calldata collateralPermitParams\\n    ) external payable returns (uint256 positionId);\\n\\n    function adjust(\\n        uint256 positionId,\\n        uint256 collateralAmount,\\n        uint256 debtAmount,\\n        int256 interestThreshold,\\n        Epoch expiredWith,\\n        SwapParams calldata swapParams,\\n        PermitSignature calldata positionPermitParams,\\n        ERC20PermitParams calldata collateralPermitParams,\\n        ERC20PermitParams calldata debtPermitParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x502b0cef0cbdc948fa265f8b04964f0c80ccf5bf49bbe98280d21ebcc363854c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IControllerV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {BookId} from \\\"../external/clober-v2/BookId.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\n\\ninterface IControllerV2 {\\n    event SetCouponMarket(address indexed asset, Epoch indexed epoch, BookId sellMarketBookId, BookId buyMarketBookId);\\n    event CouponTrade(uint256 indexed positionId, int256 cost, Coupon[] couponsToBuy, Coupon[] couponsToSell);\\n\\n    error InvalidAccess();\\n    error InvalidMarket();\\n    error ControllerSlippage();\\n}\\n\",\"keccak256\":\"0x6168882ce235c3a035b591a6b94f8ec911ce606cdb4bcc128feaafc9c897b162\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICouponManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {IERC1155Permit} from \\\"./IERC1155Permit.sol\\\";\\n\\ninterface ICouponManager is IERC1155MetadataURI, IERC1155Permit {\\n    error InvalidAccess();\\n\\n    // View Functions //\\n    function isMinter(address account) external view returns (bool);\\n\\n    function currentEpoch() external view returns (Epoch);\\n\\n    function epochEndTime(Epoch epoch) external pure returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function exists(uint256 id) external view returns (bool);\\n\\n    // User Functions\\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external;\\n\\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external;\\n\\n    // Admin Functions //\\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external;\\n\\n    function burnBatch(address user, Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0x3d9b688ee858ec954505c293318a3a2f546d1d3a416ce4b998b32565e93e4696\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC1155Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IERC1155Permit is IERC1155 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address owner, address operator, bool approved, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe282b9a0962aaa2d952ab82ee224ecaf918e1e572b8a5bc21ad23f044ce99844\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6970e2181dc25efdcd17b3df6ff9be05bfdc421d9cdb691976c4621e8e0aaae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ILoanPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPositionManagerTypes, IPositionManager} from \\\"./IPositionManager.sol\\\";\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {LoanPosition} from \\\"../libraries/LoanPosition.sol\\\";\\n\\ninterface ILoanPositionManagerTypes is IPositionManagerTypes {\\n    // liquidationFee = liquidator fee + protocol fee\\n    // debt = collateral * (1 - liquidationFee)\\n    struct LoanConfiguration {\\n        uint32 collateralDecimal;\\n        uint32 debtDecimal;\\n        uint32 liquidationThreshold;\\n        uint32 liquidationFee;\\n        uint32 liquidationProtocolFee;\\n        uint32 liquidationTargetLtv;\\n    }\\n\\n    event SetLoanConfiguration(\\n        address indexed collateral,\\n        address indexed debt,\\n        uint32 liquidationThreshold,\\n        uint32 liquidationFee,\\n        uint32 liquidationProtocolFee,\\n        uint32 liquidationTargetLtv,\\n        address hook\\n    );\\n    event UpdatePosition(uint256 indexed positionId, uint256 collateralAmount, uint256 debtAmount, Epoch unlockedAt);\\n    event LiquidatePosition(\\n        uint256 indexed positionId,\\n        address indexed liquidator,\\n        uint256 liquidationAmount,\\n        uint256 repayAmount,\\n        uint256 protocolFeeAmount\\n    );\\n    event SetTreasury(address indexed newTreasury);\\n\\n    error TooSmallDebtLeft();\\n    error InvalidAccess();\\n    error FullRepaymentRequired();\\n    error LiquidationThreshold();\\n    error InvalidPair();\\n    error InvalidConfiguration();\\n    error UnableToLiquidate();\\n}\\n\\ninterface ILoanPositionManager is ILoanPositionManagerTypes, IPositionManager {\\n    function treasury() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function minDebtValueInEth() external view returns (uint256);\\n\\n    function getPosition(uint256 positionId) external view returns (LoanPosition memory);\\n\\n    function isPairRegistered(address collateral, address debt) external view returns (bool);\\n\\n    function getLoanConfiguration(address collateral, address debt) external view returns (LoanConfiguration memory);\\n\\n    function getOwedCouponAmount(address user, uint256 couponId) external view returns (uint256);\\n\\n    function getLiquidationStatus(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        view\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\\n\\n    function mint(address collateralToken, address debtToken) external returns (uint256 positionId);\\n\\n    function adjustPosition(uint256 positionId, uint256 collateralAmount, uint256 debtAmount, Epoch expiredWith)\\n        external\\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta);\\n\\n    function liquidate(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\\n\\n    function claimOwedCoupons(CouponKey[] memory couponKeys, bytes calldata data) external;\\n\\n    function setLoanConfiguration(\\n        address collateral,\\n        address debt,\\n        uint32 liquidationThreshold,\\n        uint32 liquidationFee,\\n        uint32 liquidationProtocolFee,\\n        uint32 liquidationTargetLtv,\\n        address hook\\n    ) external;\\n\\n    function setTreasury(address newTreasury) external;\\n}\\n\",\"keccak256\":\"0x9a7457f1c0ef0c959bc942c71bf9a2ff1699ba32a56d395e05f9d28787633317\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPositionLocker {\\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x884c5b53d68aa13b4e81affe68958aceb335ce59cf4b46cebbba6524cdbfe728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\n\\ninterface IPositionManagerTypes {\\n    error LockedBy(address locker);\\n    error NotSettled();\\n}\\n\\ninterface IPositionManager is IERC721Metadata, IERC721Permit, IPositionManagerTypes {\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function nextId() external view returns (uint256);\\n\\n    function assetPool() external view returns (address);\\n\\n    function lockData() external view returns (uint128, uint128);\\n\\n    function assetDelta(address locker, uint256 assetId) external view returns (int256);\\n\\n    function lock(bytes calldata data) external returns (bytes memory);\\n\\n    function settlePosition(uint256 positionId) external;\\n\\n    function withdrawToken(address token, address to, uint256 amount) external;\\n\\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external;\\n\\n    function depositToken(address token, uint256 amount) external;\\n\\n    function burnCoupons(Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0xf4e8029d7b7f2be9318bb10e9e0a184b0d47954d37bf9d2cdbca6560d076ac40\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISubstitute.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISubstitute {\\n    event SetTreasury(address indexed newTreasury);\\n    event Claim(address indexed treasury, uint256 adminYield);\\n\\n    error InvalidToken();\\n    error ValueTransferFailed();\\n\\n    function treasury() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function mint(uint256 amount, address to) external;\\n\\n    function burn(uint256 amount, address to) external;\\n\\n    function claim() external;\\n\\n    function mintableAmount() external view returns (uint256);\\n\\n    function burnableAmount() external view returns (uint256);\\n\\n    function setTreasury(address newTreasury) external;\\n\\n    function withdrawLostToken(address token, address recipient) external;\\n}\\n\",\"keccak256\":\"0xa6d6ff8684f2d6b02d5a1a249a48bb07d39333f68e4d93e64ed551f4bdbf93f1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/ControllerV2.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {IWETH9} from \\\"../external/weth/IWETH9.sol\\\";\\nimport {IWrapped1155Factory} from \\\"../external/wrapped1155/IWrapped1155Factory.sol\\\";\\nimport {ICouponManager} from \\\"../interfaces/ICouponManager.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\nimport {Wrapped1155MetadataBuilder} from \\\"./Wrapped1155MetadataBuilder.sol\\\";\\nimport {ISubstitute} from \\\"../interfaces/ISubstitute.sol\\\";\\nimport {ReentrancyGuard} from \\\"./ReentrancyGuard.sol\\\";\\nimport {IController} from \\\"../external/clober-v2/IController.sol\\\";\\nimport {IBookManager} from \\\"../external/clober-v2/IBookManager.sol\\\";\\nimport {BookId, BookIdLibrary} from \\\"../external/clober-v2/BookId.sol\\\";\\nimport {CurrencyLibrary, Currency} from \\\"../external/clober-v2/Currency.sol\\\";\\nimport {IControllerV2} from \\\"../interfaces/IControllerV2.sol\\\";\\nimport {SubstituteLibrary} from \\\"./Substitute.sol\\\";\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nabstract contract ControllerV2 is IControllerV2, ERC1155Holder, Ownable2Step, ReentrancyGuard {\\n    using SafeCast for uint256;\\n    using BookIdLibrary for IBookManager.BookKey;\\n    using SafeERC20 for IERC20;\\n    using CouponKeyLibrary for CouponKey;\\n    using CouponLibrary for Coupon;\\n    using CurrencyLibrary for Currency;\\n    using SubstituteLibrary for ISubstitute;\\n\\n    IWrapped1155Factory internal immutable _wrapped1155Factory;\\n    IController internal immutable _cloberController;\\n    ICouponManager internal immutable _couponManager;\\n    IBookManager internal immutable _bookManager;\\n    IWETH9 internal immutable _weth;\\n\\n    mapping(uint256 couponId => IBookManager.BookKey) internal _couponSellMarkets;\\n    mapping(uint256 couponId => IBookManager.BookKey) internal _couponBuyMarkets;\\n\\n    constructor(\\n        address wrapped1155Factory,\\n        address cloberController,\\n        address bookManager,\\n        address couponManager,\\n        address weth\\n    ) Ownable(msg.sender) {\\n        _wrapped1155Factory = IWrapped1155Factory(wrapped1155Factory);\\n        _cloberController = IController(cloberController);\\n        _couponManager = ICouponManager(couponManager);\\n        _bookManager = IBookManager(bookManager);\\n\\n        _couponManager.setApprovalForAll(address(_cloberController), true);\\n        _weth = IWETH9(weth);\\n    }\\n\\n    modifier wrapAndRefundETH() {\\n        bool hasMsgValue = address(this).balance > 0;\\n        if (hasMsgValue) _weth.deposit{value: address(this).balance}();\\n        _;\\n        if (hasMsgValue) {\\n            uint256 leftBalance = _weth.balanceOf(address(this));\\n            if (leftBalance > 0) {\\n                _weth.withdraw(leftBalance);\\n                (bool success,) = msg.sender.call{value: leftBalance}(\\\"\\\");\\n                require(success);\\n            }\\n        }\\n    }\\n\\n    function _executeCouponTrade(\\n        address user,\\n        uint256 positionId,\\n        address token,\\n        Coupon[] memory couponsToMint,\\n        Coupon[] memory couponsToBurn,\\n        int256 interestThreshold\\n    ) internal {\\n        uint256 length = couponsToBurn.length + couponsToMint.length;\\n        IController.Action[] memory actionList = new IController.Action[](length);\\n        bytes[] memory paramsDataList = new bytes[](length);\\n        address[] memory tokensToSettle = new address[](length + 1);\\n        tokensToSettle[length] = token;\\n\\n        uint256 amount;\\n        length = couponsToBurn.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            actionList[i] = IController.Action.TAKE;\\n            IBookManager.BookKey memory key = _couponBuyMarkets[couponsToBurn[i].key.toId()];\\n            tokensToSettle[i] = Currency.unwrap(key.quote);\\n            amount += couponsToBurn[i].amount;\\n            paramsDataList[i] = abi.encode(\\n                IController.TakeOrderParams({\\n                    id: key.toId(),\\n                    limitPrice: 0,\\n                    quoteAmount: couponsToBurn[i].amount,\\n                    hookData: \\\"\\\"\\n                })\\n            );\\n        }\\n        if (amount > 0) IERC20(token).approve(address(_cloberController), amount);\\n\\n        length = couponsToMint.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            actionList[couponsToBurn.length + i] = IController.Action.SPEND;\\n            IBookManager.BookKey memory key = _couponSellMarkets[couponsToMint[i].key.toId()];\\n            tokensToSettle[couponsToBurn.length + i] = Currency.unwrap(key.base);\\n            amount = couponsToMint[i].amount;\\n            paramsDataList[couponsToBurn.length + i] = abi.encode(\\n                IController.SpendOrderParams({id: key.toId(), limitPrice: 0, baseAmount: amount, hookData: \\\"\\\"})\\n            );\\n            // key.base can't be Currency.NATIVE\\n            IERC20(Currency.unwrap(key.base)).approve(address(_cloberController), amount);\\n        }\\n\\n        if (interestThreshold > 0) {\\n            if (IERC20(token).balanceOf(address(this)) < uint256(interestThreshold)) {\\n                address underlyingToken = ISubstitute(token).underlyingToken();\\n                amount = Math.min(\\n                    IERC20(underlyingToken).allowance(user, address(this)), IERC20(underlyingToken).balanceOf(user)\\n                );\\n                ISubstitute(token).mintAll(user, Math.min(uint256(interestThreshold), amount));\\n            }\\n            IERC20(token).approve(address(_cloberController), uint256(interestThreshold));\\n        }\\n\\n        uint256 beforeBalance = IERC20(token).balanceOf(address(this));\\n        int256 balanceDiff;\\n        unchecked {\\n            IController.ERC20PermitParams[] memory erc20PermitParamsList;\\n            IController.ERC721PermitParams[] memory erc721PermitParamsList;\\n            _cloberController.execute(\\n                actionList,\\n                paramsDataList,\\n                tokensToSettle,\\n                erc20PermitParamsList,\\n                erc721PermitParamsList,\\n                uint64(block.timestamp)\\n            );\\n            if (interestThreshold > 0) {\\n                IERC20(token).approve(address(_cloberController), 0);\\n            }\\n\\n            uint256 afterBalance = IERC20(token).balanceOf(address(this));\\n            if (afterBalance > beforeBalance) {\\n                balanceDiff = -(afterBalance - beforeBalance).toInt256();\\n            } else {\\n                balanceDiff = (beforeBalance - afterBalance).toInt256();\\n            }\\n        }\\n        if (interestThreshold < balanceDiff) {\\n            revert ControllerSlippage();\\n        }\\n        emit CouponTrade(positionId, balanceDiff, couponsToBurn, couponsToMint);\\n    }\\n\\n    function _getUnderlyingToken(address substitute) internal view returns (address) {\\n        return ISubstitute(substitute).underlyingToken();\\n    }\\n\\n    function _burnAllSubstitute(address substitute, address to) internal {\\n        uint256 leftAmount = IERC20(substitute).balanceOf(address(this));\\n        if (leftAmount == 0) return;\\n        ISubstitute(substitute).burn(leftAmount, to);\\n    }\\n\\n    function _mintSubstituteAll(address token, address user, uint256 minRequired) internal {\\n        ISubstitute(token).mintAll(user, minRequired);\\n    }\\n\\n    function _wrapCoupons(Coupon[] memory coupons) internal {\\n        // wrap 1155 to 20\\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\\n        _couponManager.safeBatchTransferFrom(address(this), address(_wrapped1155Factory), coupons, metadata);\\n    }\\n\\n    function _unwrapCoupons(Coupon[] memory coupons) internal {\\n        uint256[] memory tokenIds = new uint256[](coupons.length);\\n        uint256[] memory amounts = new uint256[](coupons.length);\\n        unchecked {\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                tokenIds[i] = coupons[i].id();\\n                amounts[i] = coupons[i].amount;\\n            }\\n        }\\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\\n        _wrapped1155Factory.batchUnwrap(address(_couponManager), tokenIds, amounts, address(this), metadata);\\n    }\\n\\n    function getCouponMarket(CouponKey memory couponKey)\\n        external\\n        view\\n        returns (IBookManager.BookKey memory, IBookManager.BookKey memory)\\n    {\\n        return (_couponSellMarkets[couponKey.toId()], _couponBuyMarkets[couponKey.toId()]);\\n    }\\n\\n    function setCouponBookKey(\\n        CouponKey memory couponKey,\\n        IBookManager.BookKey calldata sellBookKey,\\n        IBookManager.BookKey calldata buyBookKey\\n    ) public virtual onlyOwner {\\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey);\\n        uint256 couponId = couponKey.toId();\\n        address wrappedCoupon = _wrapped1155Factory.getWrapped1155(address(_couponManager), couponId, metadata);\\n\\n        BookId sellMarketBookId = sellBookKey.toId();\\n        BookId buyMarketBookId = buyBookKey.toId();\\n        if (\\n            _bookManager.getBookKey(sellMarketBookId).unit != sellBookKey.unit\\n                || _bookManager.getBookKey(buyMarketBookId).unit != buyBookKey.unit\\n                || Currency.unwrap(sellBookKey.quote) != couponKey.asset\\n                || Currency.unwrap(sellBookKey.base) != wrappedCoupon || Currency.unwrap(buyBookKey.quote) != wrappedCoupon\\n                || Currency.unwrap(buyBookKey.base) != couponKey.asset\\n        ) {\\n            revert InvalidMarket();\\n        }\\n\\n        _couponSellMarkets[couponId] = sellBookKey;\\n        _couponBuyMarkets[couponId] = buyBookKey;\\n\\n        emit SetCouponMarket(couponKey.asset, couponKey.epoch, sellMarketBookId, buyMarketBookId);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x686c918143378eaa19da63fa064f6d9da8f2c813f542c639eaeaa28c72170aed\",\"license\":\"-\"},\"contracts/libraries/Coupon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\n\\nstruct Coupon {\\n    CouponKey key;\\n    uint256 amount;\\n}\\n\\nlibrary CouponLibrary {\\n    using CouponKeyLibrary for CouponKey;\\n\\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\\n    }\\n\\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: couponKey, amount: amount});\\n    }\\n\\n    function id(Coupon memory coupon) internal pure returns (uint256) {\\n        return coupon.key.toId();\\n    }\\n}\\n\",\"keccak256\":\"0xe3bd591859541e734e6b18f7c742efff2ea320805345b8dcf9597ea3e778d076\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CouponKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nstruct CouponKey {\\n    address asset;\\n    Epoch epoch;\\n}\\n\\nlibrary CouponKeyLibrary {\\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\\n        uint16 epoch = Epoch.unwrap(key.epoch);\\n        address asset = key.asset;\\n        assembly {\\n            id := add(asset, shl(160, epoch))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90d6688cd9d666140bf81ed569d5c41174cb89e06f108568a591b1cab2a1371b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\ntype Epoch is uint16;\\n\\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==, ne as !=} for Epoch global;\\n\\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\\n}\\n\\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\\n}\\n\\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\\n}\\n\\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\\n}\\n\\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\\n}\\n\\nfunction ne(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) != Epoch.unwrap(b);\\n}\\n\\nlibrary EpochLibrary {\\n    using EpochLibrary for Epoch;\\n\\n    error EpochOverflow();\\n\\n    uint256 internal constant MONTHS_PER_EPOCH = 1;\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function startTime(Epoch epoch) internal pure returns (uint256) {\\n        uint16 currentEpoch = Epoch.unwrap(epoch);\\n        if (currentEpoch == 0) return 0;\\n        unchecked {\\n            return _epochToTimestamp(currentEpoch - 1) + 1;\\n        }\\n    }\\n\\n    function endTime(Epoch epoch) internal pure returns (uint256) {\\n        return _epochToTimestamp(Epoch.unwrap(epoch));\\n    }\\n\\n    function lastExpiredEpoch() internal view returns (Epoch) {\\n        return current().sub(1);\\n    }\\n\\n    function current() internal view returns (Epoch) {\\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\\n    }\\n\\n    function add(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\\n    }\\n\\n    function sub(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\\n    }\\n\\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint16) {\\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\\n    }\\n\\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\\n        return a > b ? a : b;\\n    }\\n\\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint16) {\\n        unchecked {\\n            uint256 _days = timestamp / SECONDS_PER_DAY;\\n            int256 __days = int256(_days);\\n\\n            int256 L = __days + 68569 + OFFSET19700101;\\n            int256 N = (4 * L) / 146097;\\n            L = L - (146097 * N + 3) / 4;\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\n            L = L - (1461 * _year) / 4 + 31;\\n            int256 _month = (80 * L) / 2447;\\n            L = _month / 11;\\n            _month = _month + 2 - 12 * L;\\n            _year = 100 * (N - 49) + _year + L;\\n\\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\\n            if (epoch > type(uint16).max) revert EpochOverflow();\\n            return uint16(epoch);\\n        }\\n    }\\n\\n    function _epochToTimestamp(uint16 epoch) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\\n            uint256 year = months / 12 + 1970;\\n            months = (months % 12) << 4;\\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\\n            } else {\\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\\n            }\\n            return (\\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\\n            ) * SECONDS_PER_DAY - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cd1bac5f8222900e18564e78b008420877383d46684e9c79b926b5cf4a7535b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/LoanPosition.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {Epoch, EpochLibrary} from \\\"./Epoch.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\n\\nstruct LoanPosition {\\n    uint64 nonce;\\n    Epoch expiredWith;\\n    bool isSettled;\\n    address collateralToken;\\n    address debtToken;\\n    uint256 collateralAmount;\\n    uint256 debtAmount;\\n}\\n\\nlibrary LoanPositionLibrary {\\n    error UnmatchedPosition();\\n    error InvalidPositionEpoch();\\n\\n    using EpochLibrary for Epoch;\\n\\n    function getAndIncrementNonce(LoanPosition storage positionStorage) internal returns (uint64 nonce) {\\n        nonce = positionStorage.nonce++;\\n    }\\n\\n    function calculateCouponRequirement(LoanPosition memory oldPosition, LoanPosition memory newPosition)\\n        internal\\n        view\\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\\n    {\\n        if (\\n            !(\\n                oldPosition.collateralToken == newPosition.collateralToken\\n                    && oldPosition.debtToken == newPosition.debtToken && oldPosition.nonce == newPosition.nonce\\n            )\\n        ) revert UnmatchedPosition();\\n\\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\\n            revert InvalidPositionEpoch();\\n        }\\n\\n        uint256 mintCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\\n        uint256 burnCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\\n        unchecked {\\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\\n            if (newPosition.debtAmount > oldPosition.debtAmount) {\\n                mintCouponsLength -= minCount;\\n            } else if (newPosition.debtAmount < oldPosition.debtAmount) {\\n                burnCouponsLength -= minCount;\\n            } else {\\n                burnCouponsLength -= minCount;\\n                mintCouponsLength -= minCount;\\n            }\\n        }\\n\\n        mintCoupons = new Coupon[](mintCouponsLength);\\n        burnCoupons = new Coupon[](burnCouponsLength);\\n        mintCouponsLength = 0;\\n        burnCouponsLength = 0;\\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\\n        unchecked {\\n            Epoch epoch = latestExpiredEpoch;\\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\\n                epoch = epoch.add(1);\\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.debtAmount;\\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.debtAmount;\\n                if (newAmount > oldAmount) {\\n                    burnCoupons[burnCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.debtToken, epoch, newAmount - oldAmount);\\n                } else if (newAmount < oldAmount) {\\n                    mintCoupons[mintCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.debtToken, epoch, oldAmount - newAmount);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9918038441dfb9a7b5cfd8e99317abeb37b67caa5d5df0235a3abe21571f923\",\"license\":\"-\"},\"contracts/libraries/PermitParams.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {IERC721Permit} from \\\"../interfaces/IERC721Permit.sol\\\";\\nimport {IERC1155Permit} from \\\"../interfaces/IERC1155Permit.sol\\\";\\n\\nstruct ERC20PermitParams {\\n    uint256 permitAmount;\\n    PermitSignature signature;\\n}\\n\\nstruct PermitSignature {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\nlibrary PermitParamsLibrary {\\n    function tryPermit(ERC20PermitParams memory params, address token, address from, address to)\\n        internal\\n        returns (bool)\\n    {\\n        return tryPermit(params.signature, IERC20Permit(token), params.permitAmount, from, to);\\n    }\\n\\n    function tryPermit(PermitSignature memory params, IERC20Permit token, uint256 amount, address from, address to)\\n        internal\\n        returns (bool)\\n    {\\n        if (params.deadline > 0) {\\n            try token.permit(from, to, amount, params.deadline, params.v, params.r, params.s) {\\n                return true;\\n            } catch {}\\n        }\\n        return false;\\n    }\\n\\n    function tryPermit(PermitSignature memory params, IERC721Permit token, uint256 positionId, address to)\\n        internal\\n        returns (bool)\\n    {\\n        if (params.deadline > 0) {\\n            try token.permit(to, positionId, params.deadline, params.v, params.r, params.s) {\\n                return true;\\n            } catch {}\\n        }\\n        return false;\\n    }\\n\\n    function tryPermit(PermitSignature memory params, IERC1155Permit token, address from, address to, bool approved)\\n        internal\\n        returns (bool)\\n    {\\n        if (params.deadline > 0) {\\n            try token.permit(from, to, approved, params.deadline, params.v, params.r, params.s) {\\n                return true;\\n            } catch {}\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x4ab203a9c7049b893f789576a6bd98409f2e28bf4b20c45a9fdb1488cdf83f4a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Clober (https://github.com/clober-dex/coupon-finance/blob/main/contracts/libraries/ReentrancyGuard.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    error Reentrancy();\\n\\n    uint256 internal _locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        if (_locked != 1) revert Reentrancy();\\n\\n        _locked = 2;\\n\\n        _;\\n\\n        _locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x6837f00e9cb3a468d219eac35db4ea6d5273cc821181d126aa37acd56716d004\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Substitute.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ISubstitute} from \\\"../interfaces/ISubstitute.sol\\\";\\n\\nlibrary SubstituteLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    function mintAll(ISubstitute substitute, address payer, uint256 minRequiredBalance) internal {\\n        address underlyingToken = substitute.underlyingToken();\\n        uint256 thisBalance = IERC20(address(substitute)).balanceOf(address(this));\\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\\n        if (minRequiredBalance > thisBalance + underlyingBalance) {\\n            unchecked {\\n                IERC20(underlyingToken).safeTransferFrom(\\n                    payer, address(this), minRequiredBalance - thisBalance - underlyingBalance\\n                );\\n                underlyingBalance = minRequiredBalance - thisBalance;\\n            }\\n        }\\n        if (underlyingBalance > 0) {\\n            IERC20(underlyingToken).approve(address(substitute), underlyingBalance);\\n            substitute.mint(underlyingBalance, address(this));\\n        }\\n    }\\n\\n    function burnAll(ISubstitute substitute, address to) internal {\\n        uint256 leftAmount = IERC20(address(substitute)).balanceOf(address(this));\\n        if (leftAmount > 0) {\\n            ISubstitute(substitute).burn(leftAmount, to);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x89b6eb09409f127dfcb5c4a3c7bffc3cd322e86bd4a624e1a204ba67e8f01bf0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Wrapped1155MetadataBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {CouponKey} from \\\"./CouponKey.sol\\\";\\nimport {Coupon} from \\\"./Coupon.sol\\\";\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nlibrary Wrapped1155MetadataBuilder {\\n    function buildWrapped1155Metadata(CouponKey memory couponKey) internal view returns (bytes memory) {\\n        string memory tokenSymbol = IERC20Metadata(couponKey.asset).symbol();\\n        string memory epochString = Strings.toString(Epoch.unwrap(couponKey.epoch));\\n        // @dev assume that tokenSymbol.length <= 12\\n        bytes32 nameData = bytes32(abi.encodePacked(tokenSymbol, \\\" Bond Coupon (\\\", epochString, \\\")\\\"));\\n        bytes32 symbolData = bytes32(abi.encodePacked(tokenSymbol, \\\"-CP\\\", epochString));\\n        assembly {\\n            let addLength := mul(2, add(mload(tokenSymbol), mload(epochString)))\\n            nameData := add(nameData, add(30, addLength))\\n            symbolData := add(symbolData, add(6, addLength))\\n        }\\n        return abi.encodePacked(nameData, symbolData, bytes1(IERC20Metadata(couponKey.asset).decimals()));\\n    }\\n\\n    function buildWrapped1155BatchMetadata(CouponKey[] memory couponKeys) internal view returns (bytes memory data) {\\n        unchecked {\\n            for (uint256 i = 0; i < couponKeys.length; ++i) {\\n                data = bytes.concat(data, buildWrapped1155Metadata(couponKeys[i]));\\n            }\\n        }\\n    }\\n\\n    function buildWrapped1155BatchMetadata(Coupon[] memory coupons) internal view returns (bytes memory data) {\\n        unchecked {\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                data = bytes.concat(data, buildWrapped1155Metadata(coupons[i].key));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce795dcb5c1eb1d54d5b2e0066626f198fb08fce14a12f654f72e59082b5ddff\",\"license\":\"-\"}},\"version\":1}",
  "bytecode": "0x610160604052600160025534801561001657600080fd5b5060405161596538038061596583398101604081905261003591610197565b8686868686338061006057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100698161010f565b506001600160a01b0385811660805284811660a081905283821660c081905291851660e05260405163a22cb46560e01b815260048101919091526001602482015263a22cb46590604401600060405180830381600087803b1580156100cd57600080fd5b505af11580156100e1573d6000803e3d6000fd5b5050506001600160a01b039182166101005250958616610120525050505016610140525061021d9350505050565b600180546001600160a01b03191690556101288161012b565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461019257600080fd5b919050565b600080600080600080600060e0888a0312156101b257600080fd5b6101bb8861017b565b96506101c96020890161017b565b95506101d76040890161017b565b94506101e56060890161017b565b93506101f36080890161017b565b925061020160a0890161017b565b915061020f60c0890161017b565b905092959891949750929550565b60805160a05160c05160e0516101005161012051610140516155f261037360003960008181611fec0152818161206e015261213b01526000818161035601528181610437015281816104e6015281816105c8015281816106720152818161076a015281816108000152818161093c015281816109fe01528181610a9301528181610b2d01528181610c0801528181610c9f01528181610df101528181610e8801528181610eda01528181610fbd0152818161199d0152611a67015260008181610d4301528181611096015281816111270152818161185701528181611aeb01528181611b7c01528181611f290152611f620152600081816113aa015261146f0152600081816112b301528181611cfa01526130bc0152600081816126b60152818161292e01528181612bcc01528181612cbe0152612d7a01526000818161128401528181611d29015261308f01526155f26000f3fe6080604052600436106100d65760003560e01c80638da5cb5b1161007f578063d08e48ac11610059578063d08e48ac1461023c578063e30c39781461025d578063f23a6e611461027b578063f2fde38b146102c057600080fd5b80638da5cb5b146101a3578063bc197c81146101d5578063bf4415dc1461020e57600080fd5b8063715018a6116100b0578063715018a61461015957806379ba50971461016e5780637b3f203f1461018357600080fd5b806301ffc9a7146100e257806346a114e2146101175780636791d2e41461014457600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506101026100fd366004613e1a565b6102e0565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b50610137610132366004613f78565b610349565b60405161010e9190613ffd565b610157610152366004614044565b610d11565b005b34801561016557600080fd5b506101576111f5565b34801561017a57600080fd5b50610157611209565b34801561018f57600080fd5b5061015761019e366004614165565b611252565b3480156101af57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101e157600080fd5b506101f56101f036600461423b565b611676565b6040516001600160e01b0319909116815260200161010e565b34801561021a57600080fd5b5061022e6102293660046142e9565b6116a1565b60405161010e929190614305565b61024f61024a3660046143d1565b611823565b60405190815260200161010e565b34801561026957600080fd5b506001546001600160a01b03166101bd565b34801561028757600080fd5b506101f5610296366004614475565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156102cc57600080fd5b506101576102db3660046144de565b611c4b565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061034357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461039457604051633006171960e21b815260040160405180910390fd5b6040805160608082018352600080835260208301819052928201528190848060200190518101906103c5919061454b565b97509194509250905060008390036104cd57600080868060200190518101906103ee9190614618565b6040517fee1fe2ad0000000000000000000000000000000000000000000000000000000081526001600160a01b0380851660048301528084166024830152919a509294509092507f0000000000000000000000000000000000000000000000000000000000000000169063ee1fe2ad906044016020604051808303816000875af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a4919061467c565b9450846040516020016104b991815260200190565b604051602081830303815290604052955050505b60405163eb02c30160e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160e060405180830381865afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055991906146c0565b9050600086806020019051810190610571919061476c565b61ffff9091166020860181905260c0860183905260a086018490526040517f42e910af0000000000000000000000000000000000000000000000000000000081529194506000938493849384936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016936342e910af93610618938f93906004019384526020840192909252604083015261ffff16606082015260800190565b6000604051808303816000875af1158015610637573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261065f919081019061486d565b93509350935093506000821215610717577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166301e33667876060015130856106af906148f7565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156106fe57600080fd5b505af1158015610712573d6000803e3d6000fd5b505050505b60008113156107c95760808601516040517f01e336670000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152306024820152604481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906301e3366790606401600060405180830381600087803b1580156107b057600080fd5b505af11580156107c4573d6000803e3d6000fd5b505050505b835115610872576040517f65ae58470000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae584790610837908790309060040161498c565b600060405180830381600087803b15801561085157600080fd5b505af1158015610865573d6000803e3d6000fd5b5050505061087284611cbc565b85606001516001600160a01b031687600001516001600160a01b0316036108b6576108b089876060015188608001518a602001518b60400151611d8b565b506108f6565b85608001516001600160a01b031687600001516001600160a01b0316036108f6576108f489876080015188606001518a602001518b60400151611d8b565b505b610908888a886080015187878a61235e565b6000821315610a5d5761092086606001518984612f18565b606086015160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af1158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b991906149c8565b5060608601516040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063338b5dea90604401600060405180830381600087803b158015610a4457600080fd5b505af1158015610a58573d6000803e3d6000fd5b505050505b6000811215610bc857610a7e86608001518983610a79906148f7565b612f18565b60808601516001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000610abb846148f7565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a91906149c8565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663338b5dea876080015183610b69906148f7565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050505b825115610c7057610bd883612f31565b6040517fe6ee95e20000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6ee95e290610c3d9086906004016149e3565b600060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b505050505b6040517faba5b4b3000000000000000000000000000000000000000000000000000000008152600481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aba5b4b390602401600060405180830381600087803b158015610ceb57600080fd5b505af1158015610cff573d6000803e3d6000fd5b50505050505050505050505050919050565b600254600114610d345760405163558a1e0360e11b815260040160405180910390fd5b600280554715801590610db6577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b50505050505b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018b90528a9033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c91906149f6565b6001600160a01b031614610e8357604051633006171960e21b815260040160405180910390fd5b610ec07f00000000000000000000000000000000000000000000000000000000000000008c30610eb8368a90038a018a614a91565b929190613124565b5060405163eb02c30160e01b8152600481018c90526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160e060405180830381865afa158015610f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4d91906146c0565b9050610f78610f5f82606001516131e9565b3330610f70368a90038a018a614aad565b92919061324d565b50610f9a610f8982608001516131e9565b3330610f7036899003890189614aad565b5060a081018b905260c081018a905261ffff881660208201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166381548319610ff68e848d610ff18d614ae4565b613264565b6040518263ffffffff1660e01b81526004016110129190613ffd565b6000604051808303816000875af1158015611031573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110599190810190614b47565b506110688160600151336132e7565b6110768160800151336132e7565b505080156111e4576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156110e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611109919061467c565b905080156111e257604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561117357600080fd5b505af1158015611187573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d80600081146111cd576040519150601f19603f3d011682016040523d82523d6000602084013e6111d2565b606091505b50509050806111e057600080fd5b505b505b505060016002555050505050505050565b6111fd6133c8565b61120760006133f5565b565b60015433906001600160a01b031681146112465760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b61124f816133f5565b50565b61125a6133c8565b60006112658461340e565b9050600061127e856020810151905160a09190911b0190565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166308b2ea5e7f000000000000000000000000000000000000000000000000000000000000000084866040518463ffffffff1660e01b81526004016112f293929190614b7c565b602060405180830381865afa15801561130f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133391906149f6565b9050600061134e61134936889003880188614bb5565b6135d4565b9050600061136461134936889003880188614bb5565b90506113766040880160208901614c42565b604051639b22917d60e01b81526001600160c01b038416600482015267ffffffffffffffff91909116906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156113f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114159190614c5f565b6020015167ffffffffffffffff161415806114eb575061143b6040870160208801614c42565b604051639b22917d60e01b81526001600160c01b038316600482015267ffffffffffffffff91909116906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da9190614c5f565b6020015167ffffffffffffffff1614155b80611518575087516001600160a01b031661150c6060890160408a016144de565b6001600160a01b031614155b8061154157506001600160a01b03831661153560208901896144de565b6001600160a01b031614155b8061156d57506001600160a01b03831661156160608801604089016144de565b6001600160a01b031614155b80611597575087516001600160a01b031661158b60208801886144de565b6001600160a01b031614155b156115ce576040517f9db8d5b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084815260036020526040902087906115e88282614ce0565b5050600084815260046020526040902086906116048282614ce0565b905050876020015161ffff1688600001516001600160a01b03167f9f5198720ca2a8650d7430bf7d005f703c28af08bf0fe680b0b2ed87415f0d5a84846040516116649291906001600160c01b0392831681529116602082015260400190565b60405180910390a35050505050505050565b7fbc197c81000000000000000000000000000000000000000000000000000000005b95945050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526003600061171e856020810151905160a09190911b0190565b815260200190815260200160002060046000611745866020810151905160a09190911b0190565b81526020808201929092526040908101600020815160c0808201845285546001600160a01b03808216845267ffffffffffffffff600160a01b928390048116858901526001808a0154808416878a015262ffffff90859004811660608089019190915260029b8c01548086166080808b019190915290879004831660a0808b01919091528b519889018c528a548088168a528890049095169b88019b909b5291880154808516998701999099529784900488169085015297909401549384169582019590955293909104909116928201929092529094909350915050565b60006002546001146118485760405163558a1e0360e11b815260040160405180910390fd5b6002805547158015906118ca577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156118b057600080fd5b505af11580156118c4573d6000803e3d6000fd5b50505050505b6118e76118d68b6131e9565b3330610f7036889003880188614aad565b5060408051602081018a905290810188905261ffff861660608201526080810187905260009060a0016040516020818303038152906040529050600033868d8d8560405160200161193a93929190614e0f565b60408051601f198184030181529082905261195a94939291602001614e64565b60408051601f19818403018152908290527f8154831900000000000000000000000000000000000000000000000000000000825291506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906381548319906119d2908590600401613ffd565b6000604051808303816000875af11580156119f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a199190810190614b47565b905080806020019051810190611a2f919061467c565b9350611a3b8c336132e7565b611a458b336132e7565b6040516323b872dd60e01b8152306004820152336024820152604481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401600060405180830381600087803b158015611ab357600080fd5b505af1158015611ac7573d6000803e3d6000fd5b5050505050508015611c39576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5e919061467c565b90508015611c3757604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611bc857600080fd5b505af1158015611bdc573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114611c22576040519150601f19603f3d011682016040523d82523d6000602084013e611c27565b606091505b5050905080611c3557600080fd5b505b505b50600160025598975050505050505050565b611c536133c8565b600180546001600160a01b0383166001600160a01b03199091168117909155611c846000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000611cc782613607565b6040517fa50e72320000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a50e723290611d559030907f00000000000000000000000000000000000000000000000000000000000000009087908790600401614f17565b600060405180830381600087803b158015611d6f57600080fd5b505af1158015611d83573d6000803e3d6000fd5b505050505050565b600080856001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df091906149f6565b90506000856001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5691906149f6565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec4919061467c565b604051633f34d4cf60e21b8152600481018890523060248201529091506001600160a01b0389169063fcd3533c90604401600060405180830381600087803b158015611f0f57600080fd5b505af1158015611f23573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611fd5577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015611fbb57600080fd5b505af1158015611fcf573d6000803e3d6000fd5b50505050505b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820188905284169063095ea7b3906044016020604051808303816000875af1158015612044573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206891906149c8565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876040516120a49190614f55565b6000604051808303816000865af19150503d80600081146120e1576040519150601f19603f3d011682016040523d82523d6000602084013e6120e6565b606091505b50915091508161212457806040517feff8841400000000000000000000000000000000000000000000000000000000815260040161123d9190613ffd565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000602483015286169063095ea7b3906044016020604051808303816000875af1158015612193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b791906149c8565b506040516370a0823160e01b815230600482015283906001600160a01b038616906370a0823190602401602060405180830381865afa1580156121fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612222919061467c565b039550836001600160a01b0316856001600160a01b03168c7f44505d8a4cc74571d35c8c059e2e3a4319aadbb35eb617c603b97f8c7a1740608b8a604051612274929190918252602082015260400190565b60405180910390a460405163095ea7b360e01b81526001600160a01b038a811660048301526024820188905285169063095ea7b3906044016020604051808303816000875af11580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef91906149c8565b506040516394bf804d60e01b8152600481018790523060248201526001600160a01b038a16906394bf804d90604401600060405180830381600087803b15801561233857600080fd5b505af115801561234c573d6000803e3d6000fd5b50505050505050505095945050505050565b60008351835161236e9190614f71565b905060008167ffffffffffffffff81111561238b5761238b613e44565b6040519080825280602002602001820160405280156123b4578160200160208202803683370190505b50905060008267ffffffffffffffff8111156123d2576123d2613e44565b60405190808252806020026020018201604052801561240557816020015b60608152602001906001900390816123f05790505b5090506000612415846001614f71565b67ffffffffffffffff81111561242d5761242d613e44565b604051908082528060200260200182016040528015612456578160200160208202803683370190505b5090508781858151811061246c5761246c614f84565b60200260200101906001600160a01b031690816001600160a01b03168152505060008651945060005b858110156126985760038582815181106124b1576124b1614f84565b602002602001019060068111156124ca576124ca614f9a565b908160068111156124dd576124dd614f9a565b815250506000600460006125198b85815181106124fc576124fc614f84565b6020026020010151600001516020810151905160a09190911b0190565b81526020808201929092526040908101600020815160c08101835281546001600160a01b03808216835267ffffffffffffffff600160a01b928390041695830195909552600183015480861694830185905262ffffff908290048116606084015260029093015494851660808301529093041660a08301528551919250908590849081106125a9576125a9614f84565b60200260200101906001600160a01b031690816001600160a01b0316815250508882815181106125db576125db614f84565b602002602001015160200151836125f29190614f71565b92506040518060800160405280612608836135d4565b6001600160c01b03168152602001600081526020018a848151811061262f5761262f614f84565b6020026020010151602001518152602001604051806020016040528060008152508152506040516020016126639190614fec565b60405160208183030381529060405285838151811061268457612684614f84565b602090810291909101015250600101612495565b5080156127345760405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390528a169063095ea7b3906044016020604051808303816000875af115801561270e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273291906149c8565b505b8751945060005b858110156129b557600485828a516127539190614f71565b8151811061276357612763614f84565b6020026020010190600681111561277c5761277c614f9a565b9081600681111561278f5761278f614f9a565b815250506000600360006127ae8c85815181106124fc576124fc614f84565b81526020808201929092526040908101600020815160c08101835281546001600160a01b03808216808452600160a01b9283900467ffffffffffffffff16968401969096526001840154808216958401959095529381900462ffffff908116606084015260029093015493841660808301529092041660a08201528a51909250859061283b908590614f71565b8151811061284b5761284b614f84565b60200260200101906001600160a01b031690816001600160a01b03168152505089828151811061287d5761287d614f84565b6020026020010151602001519250604051806080016040528061289f836135d4565b6001600160c01b0316815260200160008152602001848152602001604051806020016040528060008152508152506040516020016128dd9190614fec565b60405160208183030381529060405285838b516128fa9190614f71565b8151811061290a5761290a614f84565b6020908102919091010152805160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690529091169063095ea7b3906044016020604051808303816000875af1158015612987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ab91906149c8565b505060010161273b565b506000861315612c4a576040516370a0823160e01b815230600482015286906001600160a01b038b16906370a0823190602401602060405180830381865afa158015612a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a29919061467c565b1015612bb5576000896001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9391906149f6565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152306024830152919250612b929183169063dd62ed3e90604401602060405180830381865afa158015612aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b23919061467c565b6040516370a0823160e01b81526001600160a01b038f811660048301528416906370a0823190602401602060405180830381865afa158015612b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8d919061467c565b61366d565b9150612bb38c612ba2898561366d565b6001600160a01b038d169190613685565b505b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018890528a169063095ea7b3906044016020604051808303816000875af1158015612c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4891906149c8565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a0823190602401602060405180830381865afa158015612c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb5919061467c565b905060006060807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637658ab058989898686426040518763ffffffff1660e01b8152600401612d1296959493929190615163565b6000604051808303816000875af1158015612d31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d599190810190615225565b5060008a1315612df85760405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301528e169063095ea7b3906044016020604051808303816000875af1158015612dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df691906149c8565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038f16906370a0823190602401602060405180830381865afa158015612e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e63919061467c565b905084811115612e8257612e788582036138d9565b6000039350612e90565b612e8d8186036138d9565b93505b50505080881215612ecd576040517ff271b55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8b7fea48060ea3a75dd9823b1965dd0353def45dfd2eb0ab0aeac8c6c76effafef42828b8d604051612f01939291906152ab565b60405180910390a250505050505050505050505050565b612f2c6001600160a01b0384168383613685565b505050565b6000815167ffffffffffffffff811115612f4d57612f4d613e44565b604051908082528060200260200182016040528015612f76578160200160208202803683370190505b5090506000825167ffffffffffffffff811115612f9557612f95613e44565b604051908082528060200260200182016040528015612fbe578160200160208202803683370190505b50905060005b835181101561305057612fef848281518110612fe257612fe2614f84565b602002602001015161393c565b83828151811061300157613001614f84565b60200260200101818152505083818151811061301f5761301f614f84565b60200260200101516020015182828151811061303d5761303d614f84565b6020908102919091010152600101612fc4565b50600061305c84613607565b6040517fa7eaa1860000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a7eaa186906130ec907f0000000000000000000000000000000000000000000000000000000000000000908790879030908890600401615307565b600060405180830381600087803b15801561310657600080fd5b505af115801561311a573d6000803e3d6000fd5b5050505050505050565b8351600090156131dd5784516020860151604080880151606089015191517f7ac2ff7b0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201899052604482019590955260ff9093166064840152608483015260a482015290851690637ac2ff7b9060c401600060405180830381600087803b1580156131bf57600080fd5b505af19250505080156131d0575060015b156131dd575060016131e1565b5060005b949350505050565b6000816001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015613229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034391906149f6565b600061169885602001518587600001518686613951565b606060008460a001518560c001518660200151866040516020016132a59493929190938452602084019290925261ffff166040830152606082015260800190565b6040516020818303038152906040529050853384836040516020016132cd9493929190615365565b604051602081830303815290604052915050949350505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561332e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613352919061467c565b90508060000361336157505050565b604051633f34d4cf60e21b8152600481018290526001600160a01b03838116602483015284169063fcd3533c90604401600060405180830381600087803b1580156133ab57600080fd5b505af11580156133bf573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b031633146112075760405163118cdaa760e01b815233600482015260240161123d565b600180546001600160a01b031916905561124f81613a1e565b6060600082600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015613454573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261347c91908101906153c2565b90506000613491846020015161ffff16613a6e565b9050600082826040516020016134a892919061540b565b6040516020818303038152906040526134c09061548d565b9050600083836040516020016134d79291906154b1565b6040516020818303038152906040526134ef9061548d565b9050825184510160020280601e0183019250806006018201915050818187600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561354e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135729190615509565b60f81b6040516020016135ba9392919092835260208301919091527fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b604051602081830303815290604052945050505050919050565b600080826040516020016135e89190615526565b60408051601f1981840301815291905280516020909101209392505050565b606060005b8251811015613667578161363c84838151811061362b5761362b614f84565b60200260200101516000015161340e565b60405160200161364d92919061558d565b60408051601f19818403018152919052915060010161360c565b50919050565b600081831061367c578161367e565b825b9392505050565b6000836001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e991906149f6565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015613733573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613757919061467c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156137a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c5919061467c565b90506137d18183614f71565b8411156137f7576137f26001600160a01b0384168630858803859003613b0e565b508083035b8015611d835760405163095ea7b360e01b81526001600160a01b0387811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af115801561384c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387091906149c8565b506040516394bf804d60e01b8152600481018290523060248201526001600160a01b038716906394bf804d90604401600060405180830381600087803b1580156138b957600080fd5b505af11580156138cd573d6000803e3d6000fd5b50505050505050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115613938576040517f24775e060000000000000000000000000000000000000000000000000000000081526004810183905260240161123d565b5090565b80516020810151905160009160a01b01610343565b845160009015613a12578551602087015160408089015160608a015191517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528781166024830152604482018a9052606482019590955260ff909316608484015260a483015260c48201529086169063d505accf9060e401600060405180830381600087803b1580156139f457600080fd5b505af1925050508015613a05575060015b15613a1257506001611698565b50600095945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000613a7b83613b83565b600101905060008167ffffffffffffffff811115613a9b57613a9b613e44565b6040519080825280601f01601f191660200182016040528015613ac5576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084613acf57509392505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052613b7d908590613c65565b50505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613bcc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310613bf8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613c1657662386f26fc10000830492506010015b6305f5e1008310613c2e576305f5e100830492506008015b6127108310613c4257612710830492506004015b60648310613c54576064830492506002015b600a83106103435760010192915050565b6000613c7a6001600160a01b03841683613ce1565b90508051600014158015613c9f575080806020019051810190613c9d91906149c8565b155b15612f2c576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161123d565b606061367e8383600084600080856001600160a01b03168486604051613d079190614f55565b60006040518083038185875af1925050503d8060008114613d44576040519150601f19603f3d011682016040523d82523d6000602084013e613d49565b606091505b5091509150613d59868383613d63565b9695505050505050565b606082613d7857613d7382613dd8565b61367e565b8151158015613d8f57506001600160a01b0384163b155b15613dd1576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161123d565b508061367e565b805115613de85780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215613e2c57600080fd5b81356001600160e01b03198116811461367e57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613e7d57613e7d613e44565b60405290565b6040516060810167ffffffffffffffff81118282101715613e7d57613e7d613e44565b60405160c0810167ffffffffffffffff81118282101715613e7d57613e7d613e44565b604051601f8201601f1916810167ffffffffffffffff81118282101715613ef257613ef2613e44565b604052919050565b600067ffffffffffffffff821115613f1457613f14613e44565b50601f01601f191660200190565b600082601f830112613f3357600080fd5b8135613f46613f4182613efa565b613ec9565b818152846020838601011115613f5b57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613f8a57600080fd5b813567ffffffffffffffff811115613fa157600080fd5b6131e184828501613f22565b60005b83811015613fc8578181015183820152602001613fb0565b50506000910152565b60008151808452613fe9816020860160208601613fad565b601f01601f19169290920160200192915050565b60208152600061367e6020830184613fd1565b61ffff8116811461124f57600080fd5b60006060828403121561366757600080fd5b600060a0828403121561366757600080fd5b6000806000806000806000806000898b0361028081121561406457600080fd5b8a35995060208b0135985060408b0135975060608b0135965060808b013561408b81614010565b955060a08b013567ffffffffffffffff8111156140a757600080fd5b6140b38d828e01614020565b955050608060bf19820112156140c857600080fd5b5060c08a0192506140dd8b6101408c01614032565b91506140ed8b6101e08c01614032565b90509295985092959850929598565b6001600160a01b038116811461124f57600080fd5b60006040828403121561412357600080fd5b61412b613e5a565b90508135614138816140fc565b8152602082013561414881614010565b602082015292915050565b600060c0828403121561366757600080fd5b60008060006101c0848603121561417b57600080fd5b6141858585614111565b92506141948560408601614153565b91506141a4856101008601614153565b90509250925092565b600067ffffffffffffffff8211156141c7576141c7613e44565b5060051b60200190565b600082601f8301126141e257600080fd5b813560206141f2613f41836141ad565b8083825260208201915060208460051b87010193508684111561421457600080fd5b602086015b848110156142305780358352918301918301614219565b509695505050505050565b600080600080600060a0868803121561425357600080fd5b853561425e816140fc565b9450602086013561426e816140fc565b9350604086013567ffffffffffffffff8082111561428b57600080fd5b61429789838a016141d1565b945060608801359150808211156142ad57600080fd5b6142b989838a016141d1565b935060808801359150808211156142cf57600080fd5b506142dc88828901613f22565b9150509295509295909350565b6000604082840312156142fb57600080fd5b61367e8383614111565b610180810161436d82856001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b82516001600160a01b0390811660c0840152602084015167ffffffffffffffff1660e084015260408401518116610100840152606084015162ffffff908116610120850152608085015190911661014084015260a08401511661016083015261367e565b600080600080600080600080610180898b0312156143ee57600080fd5b88356143f9816140fc565b97506020890135614409816140fc565b965060408901359550606089013594506080890135935060a089013561442e81614010565b925060c089013567ffffffffffffffff81111561444a57600080fd5b6144568b828c01614020565b9250506144668a60e08b01614032565b90509295985092959890939650565b600080600080600060a0868803121561448d57600080fd5b8535614498816140fc565b945060208601356144a8816140fc565b93506040860135925060608601359150608086013567ffffffffffffffff8111156144d257600080fd5b6142dc88828901613f22565b6000602082840312156144f057600080fd5b813561367e816140fc565b6000614509613f4184613efa565b905082815283838301111561451d57600080fd5b61367e836020830184613fad565b600082601f83011261453c57600080fd5b61367e838351602085016144fb565b6000806000806080858703121561456157600080fd5b845193506020850151614573816140fc565b604086015190935067ffffffffffffffff8082111561459157600080fd5b90860190606082890312156145a557600080fd5b6145ad613e83565b82516145b8816140fc565b8152602083810151908201526040830151828111156145d657600080fd5b6145e28a82860161452b565b60408301525060608801519094509150808211156145ff57600080fd5b5061460c8782880161452b565b91505092959194509250565b60008060006060848603121561462d57600080fd5b8351614638816140fc565b6020850151909350614649816140fc565b604085015190925067ffffffffffffffff81111561466657600080fd5b6146728682870161452b565b9150509250925092565b60006020828403121561468e57600080fd5b5051919050565b67ffffffffffffffff8116811461124f57600080fd5b805180151581146146bb57600080fd5b919050565b600060e082840312156146d257600080fd5b60405160e0810181811067ffffffffffffffff821117156146f5576146f5613e44565b604052825161470381614695565b8152602083015161471381614010565b6020820152614724604084016146ab565b60408201526060830151614737816140fc565b6060820152608083015161474a816140fc565b608082015260a0838101519082015260c0928301519281019290925250919050565b6000806000806080858703121561478257600080fd5b8451935060208501519250604085015161479b81614010565b6060959095015193969295505050565b600082601f8301126147bc57600080fd5b815160206147cc613f41836141ad565b828152606092830285018201928282019190878511156147eb57600080fd5b8387015b8581101561486057808903828112156148085760008081fd5b614810613e5a565b6040808312156148205760008081fd5b614828613e5a565b92508351614835816140fc565b83528388015161484481614010565b83890152918152908201518187015284529284019281016147ef565b5090979650505050505050565b6000806000806080858703121561488357600080fd5b845167ffffffffffffffff8082111561489b57600080fd5b6148a7888389016147ab565b955060208701519150808211156148bd57600080fd5b506148ca878288016147ab565b604087015160609097015195989097509350505050565b634e487b7160e01b600052601160045260246000fd5b60007f80000000000000000000000000000000000000000000000000000000000000008203614928576149286148e1565b5060000390565b600081518084526020808501945080840160005b83811015614981578151805180516001600160a01b0316895284015161ffff1684890152830151604088015260609096019590820190600101614943565b509495945050505050565b60608152600061499f606083018561492f565b6001600160a01b0384166020840152828103604084015260008152602081019150509392505050565b6000602082840312156149da57600080fd5b61367e826146ab565b60208152600061367e602083018461492f565b600060208284031215614a0857600080fd5b815161367e816140fc565b60ff8116811461124f57600080fd5b600060808284031215614a3457600080fd5b6040516080810181811067ffffffffffffffff82111715614a5757614a57613e44565b604052823581529050806020830135614a6f81614a13565b8060208301525060408301356040820152606083013560608201525092915050565b600060808284031215614aa357600080fd5b61367e8383614a22565b600060a08284031215614abf57600080fd5b614ac7613e5a565b82358152614ad88460208501614a22565b60208201529392505050565b600060608236031215614af657600080fd5b614afe613e83565b8235614b09816140fc565b815260208381013590820152604083013567ffffffffffffffff811115614b2f57600080fd5b614b3b36828601613f22565b60408301525092915050565b600060208284031215614b5957600080fd5b815167ffffffffffffffff811115614b7057600080fd5b6131e18482850161452b565b6001600160a01b03841681528260208201526060604082015260006116986060830184613fd1565b62ffffff8116811461124f57600080fd5b600060c08284031215614bc757600080fd5b614bcf613ea6565b8235614bda816140fc565b81526020830135614bea81614695565b60208201526040830135614bfd816140fc565b60408201526060830135614c1081614ba4565b60608201526080830135614c23816140fc565b608082015260a0830135614c3681614ba4565b60a08201529392505050565b600060208284031215614c5457600080fd5b813561367e81614695565b600060c08284031215614c7157600080fd5b614c79613ea6565b8251614c84816140fc565b81526020830151614c9481614695565b60208201526040830151614ca7816140fc565b60408201526060830151614cba81614ba4565b60608201526080830151614ccd816140fc565b608082015260a0830151614c3681614ba4565b8135614ceb816140fc565b81546001600160a01b0319166001600160a01b038216178255506020820135614d1381614695565b81547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff000000000000000000000000000000000000000016178155600181016040830135614d70816140fc565b81546001600160a01b0319166001600160a01b038216178255506060830135614d9881614ba4565b815462ffffff60a01b191660a082901b62ffffff60a01b161782555050600281016080830135614dc7816140fc565b81546001600160a01b0319166001600160a01b0382161782555060a0830135614def81614ba4565b815462ffffff60a01b191660a082901b62ffffff60a01b16178255613b7d565b60006001600160a01b038086168352808516602084015250606060408301526116986060830184613fd1565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60ff8516815260006001600160a01b038086166020840152608060408401528435614e8e816140fc565b166080830152602084013560a0830152604084013536859003601e19018112614eb657600080fd5b840160208101903567ffffffffffffffff811115614ed357600080fd5b803603821315614ee257600080fd5b606060c0850152614ef760e085018284614e3b565b9150508281036060840152614f0c8185613fd1565b979650505050505050565b60006001600160a01b03808716835280861660208401525060806040830152614f43608083018561492f565b8281036060840152614f0c8185613fd1565b60008251614f67818460208701613fad565b9190910192915050565b80820180821115610343576103436148e1565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6001600160c01b038151168252602081015160208301526040810151604083015260006060820151608060608501526131e16080850182613fd1565b60208152600061367e6020830184614fb0565b60008282518085526020808601955060208260051b8401016020860160005b8481101561486057601f1986840301895261503a838351613fd1565b9884019892509083019060010161501e565b60008151808452602080850194506020840160005b838110156149815781516001600160a01b031687529582019590820190600101615061565b60008151808452602080850194506020840160005b8381101561498157815180516001600160a01b0316885283810151848901526040908101518051828a0152602081015160ff166060808b01919091529181015160808a0152015160a088015260c0909601959082019060010161509b565b60008151808452602080850194506020840160005b838110156149815781518051885283015161514f848901828051825260ff602082015116602083015260408101516040830152606081015160608301525050565b5060a096909601959082019060010161510e565b60c0808252875190820181905260009060209060e0840190828b0184805b838110156151b9578251600781106151a757634e487b7160e01b83526021600452602483fd5b85529385019391850191600101615181565b5050505083810360208501526151cf818a614fff565b91505082810360408401526151e4818861504c565b905082810360608401526151f88187615086565b9050828103608084015261520c81866150f9565b915050614f0c60a083018467ffffffffffffffff169052565b6000602080838503121561523857600080fd5b825167ffffffffffffffff81111561524f57600080fd5b8301601f8101851361526057600080fd5b805161526e613f41826141ad565b81815260059190911b8201830190838101908783111561528d57600080fd5b928401925b82841015614f0c57835182529284019290840190615292565b8381526060602082015260006152c4606083018561492f565b8281036040840152613d59818561492f565b60008151808452602080850194506020840160005b83811015614981578151875295820195908201906001016152eb565b60006001600160a01b03808816835260a0602084015261532a60a08401886152d6565b838103604085015261533c81886152d6565b9050818616606085015283810360808501526153588186613fd1565b9998505050505050505050565b84815260006001600160a01b0380861660208401526080604084015280855116608084015250602084015160a08301526040840151606060c08401526153ae60e0840182613fd1565b90508281036060840152614f0c8185613fd1565b6000602082840312156153d457600080fd5b815167ffffffffffffffff8111156153eb57600080fd5b8201601f810184136153fc57600080fd5b6131e1848251602084016144fb565b6000835161541d818460208801613fad565b7f20426f6e6420436f75706f6e2028000000000000000000000000000000000000908301908152835161545781600e840160208801613fad565b7f2900000000000000000000000000000000000000000000000000000000000000600e9290910191820152600f01949350505050565b805160208083015191908110156136675760001960209190910360031b1b16919050565b600083516154c3818460208801613fad565b7f2d4350000000000000000000000000000000000000000000000000000000000090830190815283516154fd816003840160208801613fad565b01600301949350505050565b60006020828403121561551b57600080fd5b815161367e81614a13565b60c0810161034382846001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b6000835161559f818460208801613fad565b8351908301906155b3818360208801613fad565b0194935050505056fea26469706673582212207a85e844007e8460a8c06dd0a4adb1fa2998213a2e3cec775c0b991c062a4d6564736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106100d65760003560e01c80638da5cb5b1161007f578063d08e48ac11610059578063d08e48ac1461023c578063e30c39781461025d578063f23a6e611461027b578063f2fde38b146102c057600080fd5b80638da5cb5b146101a3578063bc197c81146101d5578063bf4415dc1461020e57600080fd5b8063715018a6116100b0578063715018a61461015957806379ba50971461016e5780637b3f203f1461018357600080fd5b806301ffc9a7146100e257806346a114e2146101175780636791d2e41461014457600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506101026100fd366004613e1a565b6102e0565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b50610137610132366004613f78565b610349565b60405161010e9190613ffd565b610157610152366004614044565b610d11565b005b34801561016557600080fd5b506101576111f5565b34801561017a57600080fd5b50610157611209565b34801561018f57600080fd5b5061015761019e366004614165565b611252565b3480156101af57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101e157600080fd5b506101f56101f036600461423b565b611676565b6040516001600160e01b0319909116815260200161010e565b34801561021a57600080fd5b5061022e6102293660046142e9565b6116a1565b60405161010e929190614305565b61024f61024a3660046143d1565b611823565b60405190815260200161010e565b34801561026957600080fd5b506001546001600160a01b03166101bd565b34801561028757600080fd5b506101f5610296366004614475565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156102cc57600080fd5b506101576102db3660046144de565b611c4b565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061034357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461039457604051633006171960e21b815260040160405180910390fd5b6040805160608082018352600080835260208301819052928201528190848060200190518101906103c5919061454b565b97509194509250905060008390036104cd57600080868060200190518101906103ee9190614618565b6040517fee1fe2ad0000000000000000000000000000000000000000000000000000000081526001600160a01b0380851660048301528084166024830152919a509294509092507f0000000000000000000000000000000000000000000000000000000000000000169063ee1fe2ad906044016020604051808303816000875af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a4919061467c565b9450846040516020016104b991815260200190565b604051602081830303815290604052955050505b60405163eb02c30160e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160e060405180830381865afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055991906146c0565b9050600086806020019051810190610571919061476c565b61ffff9091166020860181905260c0860183905260a086018490526040517f42e910af0000000000000000000000000000000000000000000000000000000081529194506000938493849384936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016936342e910af93610618938f93906004019384526020840192909252604083015261ffff16606082015260800190565b6000604051808303816000875af1158015610637573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261065f919081019061486d565b93509350935093506000821215610717577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166301e33667876060015130856106af906148f7565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156106fe57600080fd5b505af1158015610712573d6000803e3d6000fd5b505050505b60008113156107c95760808601516040517f01e336670000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152306024820152604481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906301e3366790606401600060405180830381600087803b1580156107b057600080fd5b505af11580156107c4573d6000803e3d6000fd5b505050505b835115610872576040517f65ae58470000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae584790610837908790309060040161498c565b600060405180830381600087803b15801561085157600080fd5b505af1158015610865573d6000803e3d6000fd5b5050505061087284611cbc565b85606001516001600160a01b031687600001516001600160a01b0316036108b6576108b089876060015188608001518a602001518b60400151611d8b565b506108f6565b85608001516001600160a01b031687600001516001600160a01b0316036108f6576108f489876080015188606001518a602001518b60400151611d8b565b505b610908888a886080015187878a61235e565b6000821315610a5d5761092086606001518984612f18565b606086015160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af1158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b991906149c8565b5060608601516040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063338b5dea90604401600060405180830381600087803b158015610a4457600080fd5b505af1158015610a58573d6000803e3d6000fd5b505050505b6000811215610bc857610a7e86608001518983610a79906148f7565b612f18565b60808601516001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000610abb846148f7565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a91906149c8565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663338b5dea876080015183610b69906148f7565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050505b825115610c7057610bd883612f31565b6040517fe6ee95e20000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6ee95e290610c3d9086906004016149e3565b600060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b505050505b6040517faba5b4b3000000000000000000000000000000000000000000000000000000008152600481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aba5b4b390602401600060405180830381600087803b158015610ceb57600080fd5b505af1158015610cff573d6000803e3d6000fd5b50505050505050505050505050919050565b600254600114610d345760405163558a1e0360e11b815260040160405180910390fd5b600280554715801590610db6577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b50505050505b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018b90528a9033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c91906149f6565b6001600160a01b031614610e8357604051633006171960e21b815260040160405180910390fd5b610ec07f00000000000000000000000000000000000000000000000000000000000000008c30610eb8368a90038a018a614a91565b929190613124565b5060405163eb02c30160e01b8152600481018c90526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160e060405180830381865afa158015610f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4d91906146c0565b9050610f78610f5f82606001516131e9565b3330610f70368a90038a018a614aad565b92919061324d565b50610f9a610f8982608001516131e9565b3330610f7036899003890189614aad565b5060a081018b905260c081018a905261ffff881660208201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166381548319610ff68e848d610ff18d614ae4565b613264565b6040518263ffffffff1660e01b81526004016110129190613ffd565b6000604051808303816000875af1158015611031573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110599190810190614b47565b506110688160600151336132e7565b6110768160800151336132e7565b505080156111e4576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156110e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611109919061467c565b905080156111e257604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561117357600080fd5b505af1158015611187573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d80600081146111cd576040519150601f19603f3d011682016040523d82523d6000602084013e6111d2565b606091505b50509050806111e057600080fd5b505b505b505060016002555050505050505050565b6111fd6133c8565b61120760006133f5565b565b60015433906001600160a01b031681146112465760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b61124f816133f5565b50565b61125a6133c8565b60006112658461340e565b9050600061127e856020810151905160a09190911b0190565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166308b2ea5e7f000000000000000000000000000000000000000000000000000000000000000084866040518463ffffffff1660e01b81526004016112f293929190614b7c565b602060405180830381865afa15801561130f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133391906149f6565b9050600061134e61134936889003880188614bb5565b6135d4565b9050600061136461134936889003880188614bb5565b90506113766040880160208901614c42565b604051639b22917d60e01b81526001600160c01b038416600482015267ffffffffffffffff91909116906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156113f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114159190614c5f565b6020015167ffffffffffffffff161415806114eb575061143b6040870160208801614c42565b604051639b22917d60e01b81526001600160c01b038316600482015267ffffffffffffffff91909116906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da9190614c5f565b6020015167ffffffffffffffff1614155b80611518575087516001600160a01b031661150c6060890160408a016144de565b6001600160a01b031614155b8061154157506001600160a01b03831661153560208901896144de565b6001600160a01b031614155b8061156d57506001600160a01b03831661156160608801604089016144de565b6001600160a01b031614155b80611597575087516001600160a01b031661158b60208801886144de565b6001600160a01b031614155b156115ce576040517f9db8d5b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084815260036020526040902087906115e88282614ce0565b5050600084815260046020526040902086906116048282614ce0565b905050876020015161ffff1688600001516001600160a01b03167f9f5198720ca2a8650d7430bf7d005f703c28af08bf0fe680b0b2ed87415f0d5a84846040516116649291906001600160c01b0392831681529116602082015260400190565b60405180910390a35050505050505050565b7fbc197c81000000000000000000000000000000000000000000000000000000005b95945050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526003600061171e856020810151905160a09190911b0190565b815260200190815260200160002060046000611745866020810151905160a09190911b0190565b81526020808201929092526040908101600020815160c0808201845285546001600160a01b03808216845267ffffffffffffffff600160a01b928390048116858901526001808a0154808416878a015262ffffff90859004811660608089019190915260029b8c01548086166080808b019190915290879004831660a0808b01919091528b519889018c528a548088168a528890049095169b88019b909b5291880154808516998701999099529784900488169085015297909401549384169582019590955293909104909116928201929092529094909350915050565b60006002546001146118485760405163558a1e0360e11b815260040160405180910390fd5b6002805547158015906118ca577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156118b057600080fd5b505af11580156118c4573d6000803e3d6000fd5b50505050505b6118e76118d68b6131e9565b3330610f7036889003880188614aad565b5060408051602081018a905290810188905261ffff861660608201526080810187905260009060a0016040516020818303038152906040529050600033868d8d8560405160200161193a93929190614e0f565b60408051601f198184030181529082905261195a94939291602001614e64565b60408051601f19818403018152908290527f8154831900000000000000000000000000000000000000000000000000000000825291506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906381548319906119d2908590600401613ffd565b6000604051808303816000875af11580156119f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a199190810190614b47565b905080806020019051810190611a2f919061467c565b9350611a3b8c336132e7565b611a458b336132e7565b6040516323b872dd60e01b8152306004820152336024820152604481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401600060405180830381600087803b158015611ab357600080fd5b505af1158015611ac7573d6000803e3d6000fd5b5050505050508015611c39576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5e919061467c565b90508015611c3757604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611bc857600080fd5b505af1158015611bdc573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114611c22576040519150601f19603f3d011682016040523d82523d6000602084013e611c27565b606091505b5050905080611c3557600080fd5b505b505b50600160025598975050505050505050565b611c536133c8565b600180546001600160a01b0383166001600160a01b03199091168117909155611c846000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000611cc782613607565b6040517fa50e72320000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a50e723290611d559030907f00000000000000000000000000000000000000000000000000000000000000009087908790600401614f17565b600060405180830381600087803b158015611d6f57600080fd5b505af1158015611d83573d6000803e3d6000fd5b505050505050565b600080856001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df091906149f6565b90506000856001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5691906149f6565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec4919061467c565b604051633f34d4cf60e21b8152600481018890523060248201529091506001600160a01b0389169063fcd3533c90604401600060405180830381600087803b158015611f0f57600080fd5b505af1158015611f23573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611fd5577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015611fbb57600080fd5b505af1158015611fcf573d6000803e3d6000fd5b50505050505b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820188905284169063095ea7b3906044016020604051808303816000875af1158015612044573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206891906149c8565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876040516120a49190614f55565b6000604051808303816000865af19150503d80600081146120e1576040519150601f19603f3d011682016040523d82523d6000602084013e6120e6565b606091505b50915091508161212457806040517feff8841400000000000000000000000000000000000000000000000000000000815260040161123d9190613ffd565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000602483015286169063095ea7b3906044016020604051808303816000875af1158015612193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b791906149c8565b506040516370a0823160e01b815230600482015283906001600160a01b038616906370a0823190602401602060405180830381865afa1580156121fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612222919061467c565b039550836001600160a01b0316856001600160a01b03168c7f44505d8a4cc74571d35c8c059e2e3a4319aadbb35eb617c603b97f8c7a1740608b8a604051612274929190918252602082015260400190565b60405180910390a460405163095ea7b360e01b81526001600160a01b038a811660048301526024820188905285169063095ea7b3906044016020604051808303816000875af11580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef91906149c8565b506040516394bf804d60e01b8152600481018790523060248201526001600160a01b038a16906394bf804d90604401600060405180830381600087803b15801561233857600080fd5b505af115801561234c573d6000803e3d6000fd5b50505050505050505095945050505050565b60008351835161236e9190614f71565b905060008167ffffffffffffffff81111561238b5761238b613e44565b6040519080825280602002602001820160405280156123b4578160200160208202803683370190505b50905060008267ffffffffffffffff8111156123d2576123d2613e44565b60405190808252806020026020018201604052801561240557816020015b60608152602001906001900390816123f05790505b5090506000612415846001614f71565b67ffffffffffffffff81111561242d5761242d613e44565b604051908082528060200260200182016040528015612456578160200160208202803683370190505b5090508781858151811061246c5761246c614f84565b60200260200101906001600160a01b031690816001600160a01b03168152505060008651945060005b858110156126985760038582815181106124b1576124b1614f84565b602002602001019060068111156124ca576124ca614f9a565b908160068111156124dd576124dd614f9a565b815250506000600460006125198b85815181106124fc576124fc614f84565b6020026020010151600001516020810151905160a09190911b0190565b81526020808201929092526040908101600020815160c08101835281546001600160a01b03808216835267ffffffffffffffff600160a01b928390041695830195909552600183015480861694830185905262ffffff908290048116606084015260029093015494851660808301529093041660a08301528551919250908590849081106125a9576125a9614f84565b60200260200101906001600160a01b031690816001600160a01b0316815250508882815181106125db576125db614f84565b602002602001015160200151836125f29190614f71565b92506040518060800160405280612608836135d4565b6001600160c01b03168152602001600081526020018a848151811061262f5761262f614f84565b6020026020010151602001518152602001604051806020016040528060008152508152506040516020016126639190614fec565b60405160208183030381529060405285838151811061268457612684614f84565b602090810291909101015250600101612495565b5080156127345760405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390528a169063095ea7b3906044016020604051808303816000875af115801561270e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273291906149c8565b505b8751945060005b858110156129b557600485828a516127539190614f71565b8151811061276357612763614f84565b6020026020010190600681111561277c5761277c614f9a565b9081600681111561278f5761278f614f9a565b815250506000600360006127ae8c85815181106124fc576124fc614f84565b81526020808201929092526040908101600020815160c08101835281546001600160a01b03808216808452600160a01b9283900467ffffffffffffffff16968401969096526001840154808216958401959095529381900462ffffff908116606084015260029093015493841660808301529092041660a08201528a51909250859061283b908590614f71565b8151811061284b5761284b614f84565b60200260200101906001600160a01b031690816001600160a01b03168152505089828151811061287d5761287d614f84565b6020026020010151602001519250604051806080016040528061289f836135d4565b6001600160c01b0316815260200160008152602001848152602001604051806020016040528060008152508152506040516020016128dd9190614fec565b60405160208183030381529060405285838b516128fa9190614f71565b8151811061290a5761290a614f84565b6020908102919091010152805160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690529091169063095ea7b3906044016020604051808303816000875af1158015612987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ab91906149c8565b505060010161273b565b506000861315612c4a576040516370a0823160e01b815230600482015286906001600160a01b038b16906370a0823190602401602060405180830381865afa158015612a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a29919061467c565b1015612bb5576000896001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9391906149f6565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152306024830152919250612b929183169063dd62ed3e90604401602060405180830381865afa158015612aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b23919061467c565b6040516370a0823160e01b81526001600160a01b038f811660048301528416906370a0823190602401602060405180830381865afa158015612b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8d919061467c565b61366d565b9150612bb38c612ba2898561366d565b6001600160a01b038d169190613685565b505b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018890528a169063095ea7b3906044016020604051808303816000875af1158015612c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4891906149c8565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a0823190602401602060405180830381865afa158015612c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb5919061467c565b905060006060807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637658ab058989898686426040518763ffffffff1660e01b8152600401612d1296959493929190615163565b6000604051808303816000875af1158015612d31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d599190810190615225565b5060008a1315612df85760405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301528e169063095ea7b3906044016020604051808303816000875af1158015612dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df691906149c8565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038f16906370a0823190602401602060405180830381865afa158015612e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e63919061467c565b905084811115612e8257612e788582036138d9565b6000039350612e90565b612e8d8186036138d9565b93505b50505080881215612ecd576040517ff271b55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8b7fea48060ea3a75dd9823b1965dd0353def45dfd2eb0ab0aeac8c6c76effafef42828b8d604051612f01939291906152ab565b60405180910390a250505050505050505050505050565b612f2c6001600160a01b0384168383613685565b505050565b6000815167ffffffffffffffff811115612f4d57612f4d613e44565b604051908082528060200260200182016040528015612f76578160200160208202803683370190505b5090506000825167ffffffffffffffff811115612f9557612f95613e44565b604051908082528060200260200182016040528015612fbe578160200160208202803683370190505b50905060005b835181101561305057612fef848281518110612fe257612fe2614f84565b602002602001015161393c565b83828151811061300157613001614f84565b60200260200101818152505083818151811061301f5761301f614f84565b60200260200101516020015182828151811061303d5761303d614f84565b6020908102919091010152600101612fc4565b50600061305c84613607565b6040517fa7eaa1860000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a7eaa186906130ec907f0000000000000000000000000000000000000000000000000000000000000000908790879030908890600401615307565b600060405180830381600087803b15801561310657600080fd5b505af115801561311a573d6000803e3d6000fd5b5050505050505050565b8351600090156131dd5784516020860151604080880151606089015191517f7ac2ff7b0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201899052604482019590955260ff9093166064840152608483015260a482015290851690637ac2ff7b9060c401600060405180830381600087803b1580156131bf57600080fd5b505af19250505080156131d0575060015b156131dd575060016131e1565b5060005b949350505050565b6000816001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015613229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034391906149f6565b600061169885602001518587600001518686613951565b606060008460a001518560c001518660200151866040516020016132a59493929190938452602084019290925261ffff166040830152606082015260800190565b6040516020818303038152906040529050853384836040516020016132cd9493929190615365565b604051602081830303815290604052915050949350505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561332e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613352919061467c565b90508060000361336157505050565b604051633f34d4cf60e21b8152600481018290526001600160a01b03838116602483015284169063fcd3533c90604401600060405180830381600087803b1580156133ab57600080fd5b505af11580156133bf573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b031633146112075760405163118cdaa760e01b815233600482015260240161123d565b600180546001600160a01b031916905561124f81613a1e565b6060600082600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015613454573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261347c91908101906153c2565b90506000613491846020015161ffff16613a6e565b9050600082826040516020016134a892919061540b565b6040516020818303038152906040526134c09061548d565b9050600083836040516020016134d79291906154b1565b6040516020818303038152906040526134ef9061548d565b9050825184510160020280601e0183019250806006018201915050818187600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561354e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135729190615509565b60f81b6040516020016135ba9392919092835260208301919091527fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b604051602081830303815290604052945050505050919050565b600080826040516020016135e89190615526565b60408051601f1981840301815291905280516020909101209392505050565b606060005b8251811015613667578161363c84838151811061362b5761362b614f84565b60200260200101516000015161340e565b60405160200161364d92919061558d565b60408051601f19818403018152919052915060010161360c565b50919050565b600081831061367c578161367e565b825b9392505050565b6000836001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e991906149f6565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015613733573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613757919061467c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156137a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c5919061467c565b90506137d18183614f71565b8411156137f7576137f26001600160a01b0384168630858803859003613b0e565b508083035b8015611d835760405163095ea7b360e01b81526001600160a01b0387811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af115801561384c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387091906149c8565b506040516394bf804d60e01b8152600481018290523060248201526001600160a01b038716906394bf804d90604401600060405180830381600087803b1580156138b957600080fd5b505af11580156138cd573d6000803e3d6000fd5b50505050505050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115613938576040517f24775e060000000000000000000000000000000000000000000000000000000081526004810183905260240161123d565b5090565b80516020810151905160009160a01b01610343565b845160009015613a12578551602087015160408089015160608a015191517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528781166024830152604482018a9052606482019590955260ff909316608484015260a483015260c48201529086169063d505accf9060e401600060405180830381600087803b1580156139f457600080fd5b505af1925050508015613a05575060015b15613a1257506001611698565b50600095945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000613a7b83613b83565b600101905060008167ffffffffffffffff811115613a9b57613a9b613e44565b6040519080825280601f01601f191660200182016040528015613ac5576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084613acf57509392505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052613b7d908590613c65565b50505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613bcc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310613bf8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613c1657662386f26fc10000830492506010015b6305f5e1008310613c2e576305f5e100830492506008015b6127108310613c4257612710830492506004015b60648310613c54576064830492506002015b600a83106103435760010192915050565b6000613c7a6001600160a01b03841683613ce1565b90508051600014158015613c9f575080806020019051810190613c9d91906149c8565b155b15612f2c576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161123d565b606061367e8383600084600080856001600160a01b03168486604051613d079190614f55565b60006040518083038185875af1925050503d8060008114613d44576040519150601f19603f3d011682016040523d82523d6000602084013e613d49565b606091505b5091509150613d59868383613d63565b9695505050505050565b606082613d7857613d7382613dd8565b61367e565b8151158015613d8f57506001600160a01b0384163b155b15613dd1576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161123d565b508061367e565b805115613de85780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215613e2c57600080fd5b81356001600160e01b03198116811461367e57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613e7d57613e7d613e44565b60405290565b6040516060810167ffffffffffffffff81118282101715613e7d57613e7d613e44565b60405160c0810167ffffffffffffffff81118282101715613e7d57613e7d613e44565b604051601f8201601f1916810167ffffffffffffffff81118282101715613ef257613ef2613e44565b604052919050565b600067ffffffffffffffff821115613f1457613f14613e44565b50601f01601f191660200190565b600082601f830112613f3357600080fd5b8135613f46613f4182613efa565b613ec9565b818152846020838601011115613f5b57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613f8a57600080fd5b813567ffffffffffffffff811115613fa157600080fd5b6131e184828501613f22565b60005b83811015613fc8578181015183820152602001613fb0565b50506000910152565b60008151808452613fe9816020860160208601613fad565b601f01601f19169290920160200192915050565b60208152600061367e6020830184613fd1565b61ffff8116811461124f57600080fd5b60006060828403121561366757600080fd5b600060a0828403121561366757600080fd5b6000806000806000806000806000898b0361028081121561406457600080fd5b8a35995060208b0135985060408b0135975060608b0135965060808b013561408b81614010565b955060a08b013567ffffffffffffffff8111156140a757600080fd5b6140b38d828e01614020565b955050608060bf19820112156140c857600080fd5b5060c08a0192506140dd8b6101408c01614032565b91506140ed8b6101e08c01614032565b90509295985092959850929598565b6001600160a01b038116811461124f57600080fd5b60006040828403121561412357600080fd5b61412b613e5a565b90508135614138816140fc565b8152602082013561414881614010565b602082015292915050565b600060c0828403121561366757600080fd5b60008060006101c0848603121561417b57600080fd5b6141858585614111565b92506141948560408601614153565b91506141a4856101008601614153565b90509250925092565b600067ffffffffffffffff8211156141c7576141c7613e44565b5060051b60200190565b600082601f8301126141e257600080fd5b813560206141f2613f41836141ad565b8083825260208201915060208460051b87010193508684111561421457600080fd5b602086015b848110156142305780358352918301918301614219565b509695505050505050565b600080600080600060a0868803121561425357600080fd5b853561425e816140fc565b9450602086013561426e816140fc565b9350604086013567ffffffffffffffff8082111561428b57600080fd5b61429789838a016141d1565b945060608801359150808211156142ad57600080fd5b6142b989838a016141d1565b935060808801359150808211156142cf57600080fd5b506142dc88828901613f22565b9150509295509295909350565b6000604082840312156142fb57600080fd5b61367e8383614111565b610180810161436d82856001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b82516001600160a01b0390811660c0840152602084015167ffffffffffffffff1660e084015260408401518116610100840152606084015162ffffff908116610120850152608085015190911661014084015260a08401511661016083015261367e565b600080600080600080600080610180898b0312156143ee57600080fd5b88356143f9816140fc565b97506020890135614409816140fc565b965060408901359550606089013594506080890135935060a089013561442e81614010565b925060c089013567ffffffffffffffff81111561444a57600080fd5b6144568b828c01614020565b9250506144668a60e08b01614032565b90509295985092959890939650565b600080600080600060a0868803121561448d57600080fd5b8535614498816140fc565b945060208601356144a8816140fc565b93506040860135925060608601359150608086013567ffffffffffffffff8111156144d257600080fd5b6142dc88828901613f22565b6000602082840312156144f057600080fd5b813561367e816140fc565b6000614509613f4184613efa565b905082815283838301111561451d57600080fd5b61367e836020830184613fad565b600082601f83011261453c57600080fd5b61367e838351602085016144fb565b6000806000806080858703121561456157600080fd5b845193506020850151614573816140fc565b604086015190935067ffffffffffffffff8082111561459157600080fd5b90860190606082890312156145a557600080fd5b6145ad613e83565b82516145b8816140fc565b8152602083810151908201526040830151828111156145d657600080fd5b6145e28a82860161452b565b60408301525060608801519094509150808211156145ff57600080fd5b5061460c8782880161452b565b91505092959194509250565b60008060006060848603121561462d57600080fd5b8351614638816140fc565b6020850151909350614649816140fc565b604085015190925067ffffffffffffffff81111561466657600080fd5b6146728682870161452b565b9150509250925092565b60006020828403121561468e57600080fd5b5051919050565b67ffffffffffffffff8116811461124f57600080fd5b805180151581146146bb57600080fd5b919050565b600060e082840312156146d257600080fd5b60405160e0810181811067ffffffffffffffff821117156146f5576146f5613e44565b604052825161470381614695565b8152602083015161471381614010565b6020820152614724604084016146ab565b60408201526060830151614737816140fc565b6060820152608083015161474a816140fc565b608082015260a0838101519082015260c0928301519281019290925250919050565b6000806000806080858703121561478257600080fd5b8451935060208501519250604085015161479b81614010565b6060959095015193969295505050565b600082601f8301126147bc57600080fd5b815160206147cc613f41836141ad565b828152606092830285018201928282019190878511156147eb57600080fd5b8387015b8581101561486057808903828112156148085760008081fd5b614810613e5a565b6040808312156148205760008081fd5b614828613e5a565b92508351614835816140fc565b83528388015161484481614010565b83890152918152908201518187015284529284019281016147ef565b5090979650505050505050565b6000806000806080858703121561488357600080fd5b845167ffffffffffffffff8082111561489b57600080fd5b6148a7888389016147ab565b955060208701519150808211156148bd57600080fd5b506148ca878288016147ab565b604087015160609097015195989097509350505050565b634e487b7160e01b600052601160045260246000fd5b60007f80000000000000000000000000000000000000000000000000000000000000008203614928576149286148e1565b5060000390565b600081518084526020808501945080840160005b83811015614981578151805180516001600160a01b0316895284015161ffff1684890152830151604088015260609096019590820190600101614943565b509495945050505050565b60608152600061499f606083018561492f565b6001600160a01b0384166020840152828103604084015260008152602081019150509392505050565b6000602082840312156149da57600080fd5b61367e826146ab565b60208152600061367e602083018461492f565b600060208284031215614a0857600080fd5b815161367e816140fc565b60ff8116811461124f57600080fd5b600060808284031215614a3457600080fd5b6040516080810181811067ffffffffffffffff82111715614a5757614a57613e44565b604052823581529050806020830135614a6f81614a13565b8060208301525060408301356040820152606083013560608201525092915050565b600060808284031215614aa357600080fd5b61367e8383614a22565b600060a08284031215614abf57600080fd5b614ac7613e5a565b82358152614ad88460208501614a22565b60208201529392505050565b600060608236031215614af657600080fd5b614afe613e83565b8235614b09816140fc565b815260208381013590820152604083013567ffffffffffffffff811115614b2f57600080fd5b614b3b36828601613f22565b60408301525092915050565b600060208284031215614b5957600080fd5b815167ffffffffffffffff811115614b7057600080fd5b6131e18482850161452b565b6001600160a01b03841681528260208201526060604082015260006116986060830184613fd1565b62ffffff8116811461124f57600080fd5b600060c08284031215614bc757600080fd5b614bcf613ea6565b8235614bda816140fc565b81526020830135614bea81614695565b60208201526040830135614bfd816140fc565b60408201526060830135614c1081614ba4565b60608201526080830135614c23816140fc565b608082015260a0830135614c3681614ba4565b60a08201529392505050565b600060208284031215614c5457600080fd5b813561367e81614695565b600060c08284031215614c7157600080fd5b614c79613ea6565b8251614c84816140fc565b81526020830151614c9481614695565b60208201526040830151614ca7816140fc565b60408201526060830151614cba81614ba4565b60608201526080830151614ccd816140fc565b608082015260a0830151614c3681614ba4565b8135614ceb816140fc565b81546001600160a01b0319166001600160a01b038216178255506020820135614d1381614695565b81547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff000000000000000000000000000000000000000016178155600181016040830135614d70816140fc565b81546001600160a01b0319166001600160a01b038216178255506060830135614d9881614ba4565b815462ffffff60a01b191660a082901b62ffffff60a01b161782555050600281016080830135614dc7816140fc565b81546001600160a01b0319166001600160a01b0382161782555060a0830135614def81614ba4565b815462ffffff60a01b191660a082901b62ffffff60a01b16178255613b7d565b60006001600160a01b038086168352808516602084015250606060408301526116986060830184613fd1565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60ff8516815260006001600160a01b038086166020840152608060408401528435614e8e816140fc565b166080830152602084013560a0830152604084013536859003601e19018112614eb657600080fd5b840160208101903567ffffffffffffffff811115614ed357600080fd5b803603821315614ee257600080fd5b606060c0850152614ef760e085018284614e3b565b9150508281036060840152614f0c8185613fd1565b979650505050505050565b60006001600160a01b03808716835280861660208401525060806040830152614f43608083018561492f565b8281036060840152614f0c8185613fd1565b60008251614f67818460208701613fad565b9190910192915050565b80820180821115610343576103436148e1565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6001600160c01b038151168252602081015160208301526040810151604083015260006060820151608060608501526131e16080850182613fd1565b60208152600061367e6020830184614fb0565b60008282518085526020808601955060208260051b8401016020860160005b8481101561486057601f1986840301895261503a838351613fd1565b9884019892509083019060010161501e565b60008151808452602080850194506020840160005b838110156149815781516001600160a01b031687529582019590820190600101615061565b60008151808452602080850194506020840160005b8381101561498157815180516001600160a01b0316885283810151848901526040908101518051828a0152602081015160ff166060808b01919091529181015160808a0152015160a088015260c0909601959082019060010161509b565b60008151808452602080850194506020840160005b838110156149815781518051885283015161514f848901828051825260ff602082015116602083015260408101516040830152606081015160608301525050565b5060a096909601959082019060010161510e565b60c0808252875190820181905260009060209060e0840190828b0184805b838110156151b9578251600781106151a757634e487b7160e01b83526021600452602483fd5b85529385019391850191600101615181565b5050505083810360208501526151cf818a614fff565b91505082810360408401526151e4818861504c565b905082810360608401526151f88187615086565b9050828103608084015261520c81866150f9565b915050614f0c60a083018467ffffffffffffffff169052565b6000602080838503121561523857600080fd5b825167ffffffffffffffff81111561524f57600080fd5b8301601f8101851361526057600080fd5b805161526e613f41826141ad565b81815260059190911b8201830190838101908783111561528d57600080fd5b928401925b82841015614f0c57835182529284019290840190615292565b8381526060602082015260006152c4606083018561492f565b8281036040840152613d59818561492f565b60008151808452602080850194506020840160005b83811015614981578151875295820195908201906001016152eb565b60006001600160a01b03808816835260a0602084015261532a60a08401886152d6565b838103604085015261533c81886152d6565b9050818616606085015283810360808501526153588186613fd1565b9998505050505050505050565b84815260006001600160a01b0380861660208401526080604084015280855116608084015250602084015160a08301526040840151606060c08401526153ae60e0840182613fd1565b90508281036060840152614f0c8185613fd1565b6000602082840312156153d457600080fd5b815167ffffffffffffffff8111156153eb57600080fd5b8201601f810184136153fc57600080fd5b6131e1848251602084016144fb565b6000835161541d818460208801613fad565b7f20426f6e6420436f75706f6e2028000000000000000000000000000000000000908301908152835161545781600e840160208801613fad565b7f2900000000000000000000000000000000000000000000000000000000000000600e9290910191820152600f01949350505050565b805160208083015191908110156136675760001960209190910360031b1b16919050565b600083516154c3818460208801613fad565b7f2d4350000000000000000000000000000000000000000000000000000000000090830190815283516154fd816003840160208801613fad565b01600301949350505050565b60006020828403121561551b57600080fd5b815161367e81614a13565b60c0810161034382846001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b6000835161559f818460208801613fad565b8351908301906155b3818360208801613fad565b0194935050505056fea26469706673582212207a85e844007e8460a8c06dd0a4adb1fa2998213a2e3cec775c0b991c062a4d6564736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintToInt(uint256)": [
        {
          "details": "An uint value doesn't fit in an int of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11712,
        "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
        "label": "_locked",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9607,
        "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
        "label": "_couponSellMarkets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(BookKey)6506_storage)"
      },
      {
        "astId": 9612,
        "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
        "label": "_couponBuyMarkets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(BookKey)6506_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IHooks)7338": {
        "encoding": "inplace",
        "label": "contract IHooks",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(BookKey)6506_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBookManager.BookKey)",
        "numberOfBytes": "32",
        "value": "t_struct(BookKey)6506_storage"
      },
      "t_struct(BookKey)6506_storage": {
        "encoding": "inplace",
        "label": "struct IBookManager.BookKey",
        "members": [
          {
            "astId": 6491,
            "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(Currency)5975"
          },
          {
            "astId": 6493,
            "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
            "label": "unit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6496,
            "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
            "label": "quote",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(Currency)5975"
          },
          {
            "astId": 6499,
            "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
            "label": "makerPolicy",
            "offset": 20,
            "slot": "1",
            "type": "t_userDefinedValueType(FeePolicy)6147"
          },
          {
            "astId": 6502,
            "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
            "label": "hooks",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IHooks)7338"
          },
          {
            "astId": 6505,
            "contract": "contracts/BorrowControllerV2.sol:BorrowControllerV2",
            "label": "takerPolicy",
            "offset": 20,
            "slot": "2",
            "type": "t_userDefinedValueType(FeePolicy)6147"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_userDefinedValueType(Currency)5975": {
        "encoding": "inplace",
        "label": "Currency",
        "numberOfBytes": "20"
      },
      "t_userDefinedValueType(FeePolicy)6147": {
        "encoding": "inplace",
        "label": "FeePolicy",
        "numberOfBytes": "3"
      }
    }
  }
}
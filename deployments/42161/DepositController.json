{
  "address": "0xE829fDe841c2a4b8dF34D0ebA146c06393D7F322",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapped1155Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cloberMarketFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "couponManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bondPositionManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ControllerSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMarket",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrancy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintToInt",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Epoch",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cloberMarket",
          "type": "address"
        }
      ],
      "name": "SetCouponMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "Epoch",
          "name": "expiredWith",
          "type": "uint16"
        },
        {
          "internalType": "int256",
          "name": "interestThreshold",
          "type": "int256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC20PermitParams",
          "name": "tokenPermitParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermitSignature",
          "name": "positionPermitParams",
          "type": "tuple"
        }
      ],
      "name": "adjust",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "cloberMarketSwapCallback",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "Epoch",
          "name": "expiredWith",
          "type": "uint16"
        },
        {
          "internalType": "int256",
          "name": "minEarnInterest",
          "type": "int256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC20PermitParams",
          "name": "tokenPermitParams",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "Epoch",
              "name": "epoch",
              "type": "uint16"
            }
          ],
          "internalType": "struct CouponKey",
          "name": "couponKey",
          "type": "tuple"
        }
      ],
      "name": "getCouponMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "positionLockAcquired",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "Epoch",
              "name": "epoch",
              "type": "uint16"
            }
          ],
          "internalType": "struct CouponKey",
          "name": "couponKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "cloberMarket",
          "type": "address"
        }
      ],
      "name": "setCouponMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x492f7772f4d6496849e1fbd9410fa06c2496e17233a4c16d42e0bf46dc6ae377",
  "receipt": {
    "to": null,
    "from": "0x1f88547fc4E1dC1a924AEaaDE65108EEb9DdEEd4",
    "contractAddress": "0xE829fDe841c2a4b8dF34D0ebA146c06393D7F322",
    "transactionIndex": 1,
    "gasUsed": "32625715",
    "logsBloom": "0x
    "blockHash": "0xcc770e751cdab7b07959cd4d7581dc37bd63fb2bcc1b46d7d75a331986cbb075",
    "transactionHash": "0x492f7772f4d6496849e1fbd9410fa06c2496e17233a4c16d42e0bf46dc6ae377",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 155759571,
        "transactionHash": "0x492f7772f4d6496849e1fbd9410fa06c2496e17233a4c16d42e0bf46dc6ae377",
        "address": "0xE829fDe841c2a4b8dF34D0ebA146c06393D7F322",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001f88547fc4e1dc1a924aeaade65108eeb9ddeed4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcc770e751cdab7b07959cd4d7581dc37bd63fb2bcc1b46d7d75a331986cbb075"
      }
    ],
    "blockNumber": 155759571,
    "cumulativeGasUsed": "32625715",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfcBE16BfD991E4949244E59d9b524e6964b8BB75",
    "0x24aC0938C010Fb520F1068e96d78E0458855111D",
    "0x8bbcA766D175aDbffB073832262990df1c5ef748",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0x0Cf91Bc7a67B063142C029a69fF9C8ccd93476E2"
  ],
  "numDeployments": 1,
  "solcInputHash": "473d8f57161595555eccbebb50cd23f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapped1155Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cloberMarketFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"couponManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondPositionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ControllerSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMarket\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloberMarket\",\"type\":\"address\"}],\"name\":\"SetCouponMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint16\"},{\"internalType\":\"int256\",\"name\":\"interestThreshold\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC20PermitParams\",\"name\":\"tokenPermitParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"positionPermitParams\",\"type\":\"tuple\"}],\"name\":\"adjust\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cloberMarketSwapCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint16\"},{\"internalType\":\"int256\",\"name\":\"minEarnInterest\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC20PermitParams\",\"name\":\"tokenPermitParams\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct CouponKey\",\"name\":\"couponKey\",\"type\":\"tuple\"}],\"name\":\"getCouponMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"positionLockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct CouponKey\",\"name\":\"couponKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"cloberMarket\",\"type\":\"address\"}],\"name\":\"setCouponMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositController.sol\":\"DepositController\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/DepositController.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IDepositController} from \\\"./interfaces/IDepositController.sol\\\";\\nimport {IBondPositionManager} from \\\"./interfaces/IBondPositionManager.sol\\\";\\nimport {IPositionLocker} from \\\"./interfaces/IPositionLocker.sol\\\";\\nimport {BondPosition} from \\\"./libraries/BondPosition.sol\\\";\\nimport {Epoch, EpochLibrary} from \\\"./libraries/Epoch.sol\\\";\\nimport {CouponKey} from \\\"./libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"./libraries/Coupon.sol\\\";\\nimport {ISubstitute} from \\\"./interfaces/ISubstitute.sol\\\";\\nimport {SubstituteLibrary} from \\\"./libraries/Substitute.sol\\\";\\nimport {Controller} from \\\"./libraries/Controller.sol\\\";\\nimport {ERC20PermitParams, PermitSignature, PermitParamsLibrary} from \\\"./libraries/PermitParams.sol\\\";\\n\\ncontract DepositController is IDepositController, Controller, IPositionLocker {\\n    using PermitParamsLibrary for *;\\n    using EpochLibrary for Epoch;\\n    using SubstituteLibrary for ISubstitute;\\n\\n    IBondPositionManager private immutable _bondPositionManager;\\n\\n    modifier onlyPositionOwner(uint256 positionId) {\\n        if (_bondPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\\n        _;\\n    }\\n\\n    constructor(\\n        address wrapped1155Factory,\\n        address cloberMarketFactory,\\n        address couponManager,\\n        address weth,\\n        address bondPositionManager\\n    ) Controller(wrapped1155Factory, cloberMarketFactory, couponManager, weth) {\\n        _bondPositionManager = IBondPositionManager(bondPositionManager);\\n    }\\n\\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\\n        if (msg.sender != address(_bondPositionManager)) revert InvalidAccess();\\n\\n        uint256 positionId;\\n        address user;\\n        (positionId, user, data) = abi.decode(data, (uint256, address, bytes));\\n        if (positionId == 0) {\\n            address asset;\\n            (asset, data) = abi.decode(data, (address, bytes));\\n            positionId = _bondPositionManager.mint(asset);\\n            result = abi.encode(positionId);\\n        }\\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\\n\\n        int256 interestThreshold;\\n        (position.amount, position.expiredWith, interestThreshold) = abi.decode(data, (uint256, Epoch, int256));\\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta) =\\n            _bondPositionManager.adjustPosition(positionId, position.amount, position.expiredWith);\\n        if (amountDelta < 0) _bondPositionManager.withdrawToken(position.asset, address(this), uint256(-amountDelta));\\n        if (couponsToMint.length > 0) {\\n            _bondPositionManager.mintCoupons(couponsToMint, address(this), \\\"\\\");\\n            _wrapCoupons(couponsToMint);\\n        }\\n\\n        _executeCouponTrade(\\n            user,\\n            position.asset,\\n            couponsToMint,\\n            couponsToBurn,\\n            amountDelta > 0 ? uint256(amountDelta) : 0,\\n            interestThreshold\\n        );\\n\\n        if (amountDelta > 0) {\\n            IERC20(position.asset).approve(address(_bondPositionManager), uint256(amountDelta));\\n            _bondPositionManager.depositToken(position.asset, uint256(amountDelta));\\n        }\\n        if (couponsToBurn.length > 0) {\\n            _unwrapCoupons(couponsToBurn);\\n            _bondPositionManager.burnCoupons(couponsToBurn);\\n        }\\n\\n        _bondPositionManager.settlePosition(positionId);\\n    }\\n\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        Epoch expiredWith,\\n        int256 minEarnInterest,\\n        ERC20PermitParams calldata tokenPermitParams\\n    ) external payable nonReentrant wrapAndRefundETH returns (uint256 positionId) {\\n        tokenPermitParams.tryPermit(_getUnderlyingToken(asset), msg.sender, address(this));\\n        bytes memory lockData = abi.encode(amount, expiredWith, -minEarnInterest);\\n        bytes memory result = _bondPositionManager.lock(abi.encode(0, msg.sender, abi.encode(asset, lockData)));\\n        positionId = abi.decode(result, (uint256));\\n\\n        ISubstitute(asset).burnAll(msg.sender);\\n\\n        _bondPositionManager.transferFrom(address(this), msg.sender, positionId);\\n    }\\n\\n    function adjust(\\n        uint256 positionId,\\n        uint256 amount,\\n        Epoch expiredWith,\\n        int256 interestThreshold,\\n        ERC20PermitParams calldata tokenPermitParams,\\n        PermitSignature calldata positionPermitParams\\n    ) external payable nonReentrant wrapAndRefundETH onlyPositionOwner(positionId) {\\n        positionPermitParams.tryPermit(_bondPositionManager, positionId, address(this));\\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\\n        tokenPermitParams.tryPermit(position.asset, msg.sender, address(this));\\n\\n        bytes memory lockData = abi.encode(amount, expiredWith, interestThreshold);\\n        _bondPositionManager.lock(abi.encode(positionId, msg.sender, lockData));\\n\\n        ISubstitute(position.asset).burnAll(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xf6ccbf61dc8ce4186af04557683723f26a2f3f01dc6e40803dccd1cd3846e5c8\",\"license\":\"-\"},\"contracts/external/clober/CloberMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketFactory {\\n    /**\\n     * @notice Emitted when a new volatile market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     */\\n    event CreateVolatileMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    );\\n\\n    /**\\n     * @notice Emitted when a new stable market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     */\\n    event CreateStableMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    );\\n\\n    /**\\n     * @notice Emitted when the address of the owner has changed.\\n     * @param previousOwner The address of the previous owner.\\n     * @param newOwner The address of the new owner.\\n     */\\n    event ChangeOwner(address previousOwner, address newOwner);\\n\\n    /**\\n     * @notice Emitted when the DAO Treasury address has changed.\\n     * @param previousTreasury The address of the previous DAO Treasury.\\n     * @param newTreasury The address of the new DAO Treasury.\\n     */\\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\\n\\n    /**\\n     * @notice Emitted when the host address has changed.\\n     * @param market The address of the market that had a change of hosts.\\n     * @param previousHost The address of the previous host.\\n     * @param newHost The address of a new host.\\n     */\\n    event ChangeHost(address indexed market, address previousHost, address newHost);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedGeometricPriceBook(uint128 a, uint128 r) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedArithmeticPriceBook(uint128 a, uint128 d) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the MarketDeployer.\\n     * @return The address of the MarketDeployer.\\n     */\\n    function marketDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the priceBookDeployer.\\n     * @return The address of the priceBookDeployer.\\n     */\\n    function priceBookDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the orderTokenDeployer.\\n     * @return The address of the orderTokenDeployer.\\n     */\\n    function orderTokenDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the OrderCanceler.\\n     * @return The address of the OrderCanceler.\\n     */\\n    function canceler() external view returns (address);\\n\\n    /**\\n     * @notice Returns whether the specified token address has been registered as a quote token.\\n     * @param token The address of the token to check.\\n     * @return bool Whether the token is registered as a quote token.\\n     */\\n    function registeredQuoteTokens(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the address of the factory owner\\n     * @return The address of the factory owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the factory owner candidate\\n     * @return The address of the factory owner candidate\\n     */\\n    function futureOwner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO Treasury\\n     * @return The address of the DAO Treasury\\n     */\\n    function daoTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current nonce\\n     * @return The current nonce\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a new market with a VolatilePriceBook.\\n     * @param host The address of the new market's host.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     * @return The address of the created market.\\n     */\\n    function createVolatileMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Creates a new market with a StablePriceBook\\n     * @param host The address of the new market's host\\n     * @param quoteToken The address of the new market's quote token\\n     * @param baseToken The address of the new market's base token\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     * @return The address of the created market.\\n     */\\n    function createStableMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Change the DAO Treasury address.\\n     * @dev Only the factory owner can call this function.\\n     * @param treasury The new address of the DAO Treasury.\\n     */\\n    function changeDaoTreasury(address treasury) external;\\n\\n    /**\\n     * @notice Sets the new owner address for this contract.\\n     * @dev Only the factory owner can call this function.\\n     * @param newOwner The new owner address for this contract.\\n     */\\n    function prepareChangeOwner(address newOwner) external;\\n\\n    /**\\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\\n     * @dev Only the future owner can call this function.\\n     */\\n    function executeChangeOwner() external;\\n\\n    /**\\n     * @notice Returns the host address of the given market.\\n     * @param market The address of the target market.\\n     * @return The host address of the market.\\n     */\\n    function getMarketHost(address market) external view returns (address);\\n\\n    /**\\n     * @notice Prepares to set a new host address for the given market address.\\n     * @dev Only the market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     * @param newHost The new host address for the given market.\\n     */\\n    function prepareHandOverHost(address market, address newHost) external;\\n\\n    /**\\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\\n     * @dev Only the future market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     */\\n    function executeHandOverHost(address market) external;\\n\\n    enum MarketType {\\n        NONE,\\n        VOLATILE,\\n        STABLE\\n    }\\n\\n    /**\\n     * @notice MarketInfo struct that contains information about a market.\\n     * @param host The address of the market host.\\n     * @param marketType The market type, either VOLATILE or STABLE.\\n     * @param a The starting price point.\\n     * @param factor The either the common ratio or common difference between price points.\\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\\n     */\\n    struct MarketInfo {\\n        address host;\\n        MarketType marketType;\\n        uint128 a;\\n        uint128 factor;\\n        address futureHost;\\n    }\\n\\n    /**\\n     * @notice Returns key information about the market.\\n     * @param market The address of the market.\\n     * @return marketInfo The MarketInfo structure of the given market.\\n     */\\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\\n\\n    /**\\n     * @notice Allows the specified token to be used as the quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to register.\\n     */\\n    function registerQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Revokes the token's right to be used as a quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to unregister.\\n     */\\n    function unregisterQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Returns the order token name.\\n     * @param quoteToken The address of the market's quote token.\\n     * @param baseToken The address of the market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token name.\\n     */\\n    function formatOrderTokenName(address quoteToken, address baseToken, uint256 marketNonce)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Returns the order token symbol.\\n     * @param quoteToken The address of a new market's quote token.\\n     * @param baseToken The address of a new market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token symbol.\\n     */\\n    function formatOrderTokenSymbol(address quoteToken, address baseToken, uint256 marketNonce)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x987c3a4a5f24cf8e153ac85b04f50c5b84830e7bd7d02fec51114c8a84cf7c0d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober/CloberMarketSwapCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketSwapCallbackReceiver {\\n    /**\\n     * @notice Contracts placing orders on the OrderBook must implement this method.\\n     * In this method, the contract has to send the required token, or the transaction will revert.\\n     * If there is a claim bounty to be refunded, it will be transferred via msg.value.\\n     * @param inputToken The address of the token the user has to send.\\n     * @param outputToken The address of the token the user has received.\\n     * @param inputAmount The amount of tokens the user has to send.\\n     * @param outputAmount The amount of tokens the user has received.\\n     * @param data The user's custom callback data.\\n     */\\n    function cloberMarketSwapCallback(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        bytes calldata data\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x3c238ac30949be45e9c6a4b74416fb03bb99a3cfde0414ed6beda0fd5f51f5b8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober/CloberOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderBook {\\n    /**\\n     * @notice Emitted when an order is created.\\n     * @param sender The address who sent the tokens to make the order.\\n     * @param user The address with the rights to claim the proceeds of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param options LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event MakeOrder(\\n        address indexed sender,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint32 claimBounty,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        uint8 options\\n    );\\n\\n    /**\\n     * @notice Emitted when an order takes from the order book.\\n     * @param sender The address who sent the tokens to take the order.\\n     * @param user The recipient address of the traded token.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The ordered raw amount.\\n     * @param options MSB: 0 - Limit, 1 - Market / LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event TakeOrder(address indexed sender, address indexed user, uint16 priceIndex, uint64 rawAmount, uint8 options);\\n\\n    /**\\n     * @notice Emitted when an order is canceled.\\n     * @param user The owner of the order.\\n     * @param rawAmount The raw amount remaining that was canceled.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBid The flag indicating whether it's a bid order or an ask order.\\n     */\\n    event CancelOrder(address indexed user, uint64 rawAmount, uint256 orderIndex, uint16 priceIndex, bool isBid);\\n\\n    /**\\n     * @notice Emitted when the proceeds of an order is claimed.\\n     * @param claimer The address that initiated the claim.\\n     * @param user The owner of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param bountyAmount The size of the claim bounty.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBase The flag indicating whether the user receives the base token or the quote token.\\n     */\\n    event ClaimOrder(\\n        address indexed claimer,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint256 bountyAmount,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        bool isBase\\n    );\\n\\n    /**\\n     * @notice Emitted when a flash-loan is taken.\\n     * @param caller The caller address of the flash-loan.\\n     * @param borrower The address of the flash loan token receiver.\\n     * @param quoteAmount The amount of quote tokens the user has borrowed.\\n     * @param baseAmount The amount of base tokens the user has borrowed.\\n     * @param earnedQuote The amount of quote tokens the protocol earned in quote tokens.\\n     * @param earnedBase The amount of base tokens the protocol earned in base tokens.\\n     */\\n    event Flash(\\n        address indexed caller,\\n        address indexed borrower,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        uint256 earnedQuote,\\n        uint256 earnedBase\\n    );\\n\\n    /**\\n     * @notice A struct that represents an order.\\n     * @param amount The raw amount not filled yet. In case of a stale order, the amount not claimed yet.\\n     * @param claimBounty The bounty amount in gwei that can be collected by the party that fully claims the order.\\n     * @param owner The address of the order owner.\\n     */\\n    struct Order {\\n        uint64 amount;\\n        uint32 claimBounty;\\n        address owner;\\n    }\\n\\n    /**\\n     * @notice A struct that represents a block trade log.\\n     * @param blockTime The timestamp of the block.\\n     * @param askVolume The volume taken on the ask side.\\n     * @param bidVolume The volume taken on the bid side.\\n     * @param open The price book index on the open.\\n     * @param high The highest price book index in the block.\\n     * @param low The lowest price book index in the block.\\n     * @param close The price book index on the close.\\n     */\\n    struct BlockTradeLog {\\n        uint64 blockTime;\\n        uint64 askVolume;\\n        uint64 bidVolume;\\n        uint16 open;\\n        uint16 high;\\n        uint16 low;\\n        uint16 close;\\n    }\\n\\n    /**\\n     * @notice Take orders better or equal to the given priceIndex and make an order with the remaining tokens.\\n     * @dev `msg.value` will be used as the claimBounty.\\n     * @param user The taker/maker address.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\\n     * @param baseAmount The base token amount to trade, utilized by asks.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - Post only.\\n     * @param data Custom callback data\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitOrder(\\n        address user,\\n        uint16 priceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Returns the expected input amount and output amount.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * Bid & expendInput => Used as input amount.\\n     * Bid & !expendInput => Not used.\\n     * Ask & expendInput => Not used.\\n     * Ask & !expendInput => Used as output amount.\\n     * @param baseAmount The base token amount to trade.\\n     * Bid & expendInput => Not used.\\n     * Bid & !expendInput => Used as output amount.\\n     * Ask & expendInput => Used as input amount.\\n     * Ask & !expendInput => Not used.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     */\\n    function getExpectedAmount(uint16 limitPriceIndex, uint64 rawAmount, uint256 baseAmount, uint8 options)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Take opens orders until certain conditions are met.\\n     * @param user The taker address.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\\n     * @param baseAmount The base token amount to trade.\\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     * @param data Custom callback data.\\n     */\\n    function marketOrder(\\n        address user,\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Cancel orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param receiver The address to receive canceled tokens.\\n     * @param orderKeys The order keys of the orders to cancel.\\n     */\\n    function cancel(address receiver, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Claim the proceeds of orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param claimer The address to receive the claim bounties.\\n     * @param orderKeys The order keys of the orders to claim.\\n     */\\n    function claim(address claimer, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Get the claimable proceeds of an order.\\n     * @param orderKey The order key of the order.\\n     * @return claimableRawAmount The claimable raw amount.\\n     * @return claimableAmount The claimable amount after fees.\\n     * @return feeAmount The maker fee to be paid on claim.\\n     * @return rebateAmount The rebate to be received on claim.\\n     */\\n    function getClaimable(OrderKey calldata orderKey)\\n        external\\n        view\\n        returns (uint64 claimableRawAmount, uint256 claimableAmount, uint256 feeAmount, uint256 rebateAmount);\\n\\n    /**\\n     * @notice Flash loan the tokens in the OrderBook.\\n     * @param borrower The address to receive the loan.\\n     * @param quoteAmount The quote token amount to borrow.\\n     * @param baseAmount The base token amount to borrow.\\n     * @param data The user's custom callback data.\\n     */\\n    function flash(address borrower, uint256 quoteAmount, uint256 baseAmount, bytes calldata data) external;\\n\\n    /**\\n     * @notice Returns the quote unit amount.\\n     * @return The amount that one raw amount represent in quote tokens.\\n     */\\n    function quoteUnit() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The maker fee. 100 = 1bp.\\n     */\\n    function makerFee() external view returns (int24);\\n\\n    /**\\n     * @notice Returns the take fee\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The taker fee. 100 = 1bps.\\n     */\\n    function takerFee() external view returns (uint24);\\n\\n    /**\\n     * @notice Returns the address of the order NFT contract.\\n     * @return The address of the order NFT contract.\\n     */\\n    function orderToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the quote token.\\n     * @return The address of the quote token.\\n     */\\n    function quoteToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the base token.\\n     * @return The address of the base token.\\n     */\\n    function baseToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current total open amount at the given price.\\n     * @param isBid The flag to choose which side to check the depth for.\\n     * @param priceIndex The price book index.\\n     * @return The total open amount.\\n     */\\n    function getDepth(bool isBid, uint16 priceIndex) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the fee balance that has not been collected yet.\\n     * @return quote The current fee balance for the quote token.\\n     * @return base The current fee balance for the base token.\\n     */\\n    function getFeeBalance() external view returns (uint128 quote, uint128 base);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the host.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the host.\\n     */\\n    function uncollectedHostFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the dao treasury.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the dao treasury.\\n     */\\n    function uncollectedProtocolFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether the order book is empty or not.\\n     * @param isBid The flag to choose which side to check the emptiness of.\\n     * @return Whether the order book is empty or not on that side.\\n     */\\n    function isEmpty(bool isBid) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the order information.\\n     * @param orderKey The order key of the order.\\n     * @return The order struct of the given order key.\\n     */\\n    function getOrder(OrderKey calldata orderKey) external view returns (Order memory);\\n\\n    /**\\n     * @notice Returns the lowest ask price index or the highest bid price index.\\n     * @param isBid Returns the lowest ask price if false, highest bid price if true.\\n     * @return The current price index. If the order book is empty, it will revert.\\n     */\\n    function bestPriceIndex(bool isBid) external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the current block trade log index.\\n     * @return The current block trade log index.\\n     */\\n    function blockTradeLogIndex() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the block trade log for a certain index.\\n     * @param index The block trade log index used to query the block trade log.\\n     * @return The queried block trade log.\\n     */\\n    function blockTradeLogs(uint16 index) external view returns (BlockTradeLog memory);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding base amount using a given price index.\\n     * @param rawAmount The raw amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted base amount.\\n     */\\n    function rawToBase(uint64 rawAmount, uint16 priceIndex, bool roundingUp) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding quote amount.\\n     * @param rawAmount The raw amount to be converted.\\n     * @return The converted quote amount.\\n     */\\n    function rawToQuote(uint64 rawAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a base amount to its corresponding raw amount using a given price index.\\n     * @param baseAmount The base amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function baseToRaw(uint256 baseAmount, uint16 priceIndex, bool roundingUp) external view returns (uint64);\\n\\n    /**\\n     * @notice Converts a quote amount to its corresponding raw amount.\\n     * @param quoteAmount The quote amount to be converted.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function quoteToRaw(uint256 quoteAmount, bool roundingUp) external view returns (uint64);\\n\\n    /**\\n     * @notice Collects fees for either the protocol or host.\\n     * @param token The token address to collect. It should be the quote token or the base token.\\n     * @param destination The destination address to transfer fees.\\n     * It should be the dao treasury address or the host address.\\n     */\\n    function collectFees(address token, address destination) external;\\n\\n    /**\\n     * @notice Change the owner of the order.\\n     * @dev Only the OrderToken contract can call this function.\\n     * @param orderKey The order key of the order.\\n     * @param newOwner The new owner address.\\n     */\\n    function changeOrderOwner(OrderKey calldata orderKey, address newOwner) external;\\n\\n    /**\\n     * @notice Converts the price index into the actual price.\\n     * @param priceIndex The price book index.\\n     * @return price The actual price.\\n     */\\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the price book index closest to the provided price.\\n     * @param price Provided price.\\n     * @param roundingUp Determines whether to round up or down.\\n     * @return index The price book index.\\n     * @return correctedPrice The actual price for the price book index.\\n     */\\n    function priceToIndex(uint256 price, bool roundingUp)\\n        external\\n        view\\n        returns (uint16 index, uint256 correctedPrice);\\n}\\n\",\"keccak256\":\"0x9a9506e6b5f01f9251234f365f84382c114f7733ab8c08f40e58a48c61a95da9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober/CloberOrderKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice A struct that represents a unique key for an order.\\n * @param isBid The flag indicating whether it's a bid order or an ask order.\\n * @param priceIndex The price book index.\\n * @param orderIndex The order index.\\n */\\nstruct OrderKey {\\n    bool isBid;\\n    uint16 priceIndex;\\n    uint256 orderIndex;\\n}\\n\",\"keccak256\":\"0x4607151f9e9e7732f5e40c9f899fb4adb35dcee23056312be90976bb979264b4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/weth/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IWETH9 is IERC20Metadata {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x2ee71d25c3fbf9b954291eb2c76b1149fc9cf6456944019adbb6b051ff1bda11\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/wrapped1155/IWrapped1155Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n// @author Gnosis (https://github.com/gnosis/1155-to-20)\\ninterface IWrapped1155Factory is IERC1155Receiver {\\n    function erc20Implementation() external view returns (address);\\n\\n    function unwrap(address multiToken, uint256 tokenId, uint256 amount, address recipient, bytes calldata data)\\n        external;\\n\\n    function batchUnwrap(\\n        address multiToken,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    function getWrapped1155DeployBytecode(address multiToken, uint256 tokenId, bytes calldata data)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function getWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external view returns (address);\\n\\n    function requireWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external returns (address);\\n}\\n\",\"keccak256\":\"0x2b36f8a611877ddea2dff0d422220b3775618fd92c2180c5456b891bc10ab94d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBondPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPositionManagerTypes, IPositionManager} from \\\"./IPositionManager.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {BondPosition} from \\\"../libraries/BondPosition.sol\\\";\\n\\ninterface IBondPositionManagerTypes is IPositionManagerTypes {\\n    event RegisterAsset(address indexed asset);\\n    event UpdatePosition(uint256 indexed tokenId, uint256 amount, Epoch expiredWith);\\n\\n    error InvalidAccess();\\n    error UnregisteredAsset();\\n    error InvalidEpoch();\\n    error AlreadyExpired();\\n}\\n\\ninterface IBondPositionManager is IBondPositionManagerTypes, IPositionManager {\\n    // View Functions //\\n    function MAX_EPOCH() external view returns (Epoch maxEpoch);\\n\\n    function getPosition(uint256 tokenId) external view returns (BondPosition memory);\\n\\n    function isAssetRegistered(address asset) external view returns (bool);\\n\\n    // User Functions //\\n    function mint(address asset) external returns (uint256 positionId);\\n\\n    function adjustPosition(uint256 tokenId, uint256 amount, Epoch expiredWith)\\n        external\\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta);\\n\\n    // Admin Functions //\\n    function registerAsset(address asset) external;\\n}\\n\",\"keccak256\":\"0x93fcf3de7bd65f9c90ac79f87cd160d86b185d955032a35170e365e36dcd9e7f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\n\\ninterface IController {\\n    event SetCouponMarket(address indexed asset, Epoch indexed epoch, address indexed cloberMarket);\\n\\n    error InvalidAccess();\\n    error InvalidMarket();\\n    error ControllerSlippage();\\n}\\n\",\"keccak256\":\"0x7dbb9a30f413dc6e63bbe063e9a4c84c9356ff893db4ade3aff3eb0460d5df70\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICouponManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {IERC1155Permit} from \\\"./IERC1155Permit.sol\\\";\\n\\ninterface ICouponManager is IERC1155MetadataURI, IERC1155Permit {\\n    error InvalidAccess();\\n\\n    // View Functions //\\n    function isMinter(address account) external view returns (bool);\\n\\n    function currentEpoch() external view returns (Epoch);\\n\\n    function epochEndTime(Epoch epoch) external pure returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function exists(uint256 id) external view returns (bool);\\n\\n    // User Functions\\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external;\\n\\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external;\\n\\n    // Admin Functions //\\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external;\\n\\n    function burnBatch(address user, Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0x3d9b688ee858ec954505c293318a3a2f546d1d3a416ce4b998b32565e93e4696\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDepositController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IController} from \\\"./IController.sol\\\";\\nimport {ERC20PermitParams, PermitSignature} from \\\"../libraries/PermitParams.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\n\\ninterface IDepositController is IController {\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        Epoch expiredWith,\\n        int256 minEarnInterest,\\n        ERC20PermitParams calldata tokenPermitParams\\n    ) external payable returns (uint256 positionId);\\n\\n    function adjust(\\n        uint256 positionId,\\n        uint256 amount,\\n        Epoch expiredWith,\\n        int256 interestThreshold,\\n        ERC20PermitParams calldata tokenPermitParams,\\n        PermitSignature calldata positionPermitParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x237cb5b869cf6cc6b97177b7d6d2f44922a2f43aac9d6b7a169670517d8e497b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC1155Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IERC1155Permit is IERC1155 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address owner, address operator, bool approved, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe282b9a0962aaa2d952ab82ee224ecaf918e1e572b8a5bc21ad23f044ce99844\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6970e2181dc25efdcd17b3df6ff9be05bfdc421d9cdb691976c4621e8e0aaae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPositionLocker {\\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x884c5b53d68aa13b4e81affe68958aceb335ce59cf4b46cebbba6524cdbfe728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\n\\ninterface IPositionManagerTypes {\\n    error LockedBy(address locker);\\n    error NotSettled();\\n}\\n\\ninterface IPositionManager is IERC721Metadata, IERC721Permit, IPositionManagerTypes {\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function nextId() external view returns (uint256);\\n\\n    function assetPool() external view returns (address);\\n\\n    function lockData() external view returns (uint128, uint128);\\n\\n    function assetDelta(address locker, uint256 assetId) external view returns (int256);\\n\\n    function lock(bytes calldata data) external returns (bytes memory);\\n\\n    function settlePosition(uint256 positionId) external;\\n\\n    function withdrawToken(address token, address to, uint256 amount) external;\\n\\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external;\\n\\n    function depositToken(address token, uint256 amount) external;\\n\\n    function burnCoupons(Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0xf4e8029d7b7f2be9318bb10e9e0a184b0d47954d37bf9d2cdbca6560d076ac40\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISubstitute.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISubstitute {\\n    event SetTreasury(address indexed newTreasury);\\n    event Claim(address indexed treasury, uint256 adminYield);\\n\\n    error InvalidToken();\\n    error ValueTransferFailed();\\n\\n    function treasury() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function mint(uint256 amount, address to) external;\\n\\n    function burn(uint256 amount, address to) external;\\n\\n    function claim() external;\\n\\n    function mintableAmount() external view returns (uint256);\\n\\n    function burnableAmount() external view returns (uint256);\\n\\n    function setTreasury(address newTreasury) external;\\n\\n    function withdrawLostToken(address token, address recipient) external;\\n}\\n\",\"keccak256\":\"0xa6d6ff8684f2d6b02d5a1a249a48bb07d39333f68e4d93e64ed551f4bdbf93f1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/BondPosition.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {Epoch, EpochLibrary} from \\\"./Epoch.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\n\\nstruct BondPosition {\\n    address asset;\\n    uint64 nonce;\\n    Epoch expiredWith;\\n    bool isSettled;\\n    uint256 amount;\\n}\\n\\nlibrary BondPositionLibrary {\\n    error UnmatchedPosition();\\n    error InvalidPositionEpoch();\\n\\n    using EpochLibrary for Epoch;\\n\\n    function getAndIncrementNonce(BondPosition storage positionStorage) internal returns (uint64 nonce) {\\n        nonce = positionStorage.nonce++;\\n    }\\n\\n    function calculateCouponRequirement(BondPosition memory oldPosition, BondPosition memory newPosition)\\n        internal\\n        view\\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\\n    {\\n        if (!(oldPosition.asset == newPosition.asset && oldPosition.nonce == newPosition.nonce)) {\\n            revert UnmatchedPosition();\\n        }\\n\\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\\n            revert InvalidPositionEpoch();\\n        }\\n        uint256 mintCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\\n        uint256 burnCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\\n        unchecked {\\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\\n            if (newPosition.amount > oldPosition.amount) {\\n                burnCouponsLength -= minCount;\\n            } else if (newPosition.amount < oldPosition.amount) {\\n                mintCouponsLength -= minCount;\\n            } else {\\n                mintCouponsLength -= minCount;\\n                burnCouponsLength -= minCount;\\n            }\\n        }\\n\\n        mintCoupons = new Coupon[](mintCouponsLength);\\n        burnCoupons = new Coupon[](burnCouponsLength);\\n        mintCouponsLength = 0;\\n        burnCouponsLength = 0;\\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\\n        unchecked {\\n            Epoch epoch = latestExpiredEpoch;\\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\\n                epoch = epoch.add(1);\\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.amount;\\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.amount;\\n                if (newAmount > oldAmount) {\\n                    mintCoupons[mintCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.asset, epoch, newAmount - oldAmount);\\n                } else if (newAmount < oldAmount) {\\n                    burnCoupons[burnCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.asset, epoch, oldAmount - newAmount);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60e2ea29125ab192c6aab14634795641e8fee2d6ead1ccd2499aa8e1a73b6daa\",\"license\":\"-\"},\"contracts/libraries/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport {CloberMarketSwapCallbackReceiver} from \\\"../external/clober/CloberMarketSwapCallbackReceiver.sol\\\";\\nimport {CloberMarketFactory} from \\\"../external/clober/CloberMarketFactory.sol\\\";\\nimport {IWETH9} from \\\"../external/weth/IWETH9.sol\\\";\\nimport {IWrapped1155Factory} from \\\"../external/wrapped1155/IWrapped1155Factory.sol\\\";\\nimport {CloberOrderBook} from \\\"../external/clober/CloberOrderBook.sol\\\";\\nimport {ICouponManager} from \\\"../interfaces/ICouponManager.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\nimport {Wrapped1155MetadataBuilder} from \\\"./Wrapped1155MetadataBuilder.sol\\\";\\nimport {IERC721Permit} from \\\"../interfaces/IERC721Permit.sol\\\";\\nimport {ISubstitute} from \\\"../interfaces/ISubstitute.sol\\\";\\nimport {IController} from \\\"../interfaces/IController.sol\\\";\\nimport {ReentrancyGuard} from \\\"./ReentrancyGuard.sol\\\";\\nimport {SubstituteLibrary} from \\\"./Substitute.sol\\\";\\n\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nabstract contract Controller is\\n    IController,\\n    ERC1155Holder,\\n    CloberMarketSwapCallbackReceiver,\\n    Ownable2Step,\\n    ReentrancyGuard\\n{\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n    using CouponKeyLibrary for CouponKey;\\n    using CouponLibrary for Coupon;\\n    using SubstituteLibrary for ISubstitute;\\n\\n    IWrapped1155Factory internal immutable _wrapped1155Factory;\\n    CloberMarketFactory internal immutable _cloberMarketFactory;\\n    ICouponManager internal immutable _couponManager;\\n    IWETH9 internal immutable _weth;\\n\\n    mapping(uint256 couponId => address market) internal _couponMarkets;\\n\\n    constructor(address wrapped1155Factory, address cloberMarketFactory, address couponManager, address weth)\\n        Ownable(msg.sender)\\n    {\\n        _wrapped1155Factory = IWrapped1155Factory(wrapped1155Factory);\\n        _cloberMarketFactory = CloberMarketFactory(cloberMarketFactory);\\n        _couponManager = ICouponManager(couponManager);\\n        _weth = IWETH9(weth);\\n    }\\n\\n    modifier wrapAndRefundETH() {\\n        bool hasMsgValue = address(this).balance > 0;\\n        if (hasMsgValue) _weth.deposit{value: address(this).balance}();\\n        _;\\n        if (hasMsgValue) {\\n            uint256 leftBalance = _weth.balanceOf(address(this));\\n            if (leftBalance > 0) {\\n                _weth.withdraw(leftBalance);\\n                (bool success,) = msg.sender.call{value: leftBalance}(\\\"\\\");\\n                require(success);\\n            }\\n        }\\n    }\\n\\n    function _executeCouponTrade(\\n        address user,\\n        address token,\\n        Coupon[] memory couponsToMint,\\n        Coupon[] memory couponsToBurn,\\n        uint256 amountToPay,\\n        int256 remainingInterest\\n    ) internal {\\n        if (couponsToBurn.length > 0) {\\n            Coupon memory lastCoupon = couponsToBurn[couponsToBurn.length - 1];\\n            assembly {\\n                mstore(couponsToBurn, sub(mload(couponsToBurn), 1))\\n            }\\n            bytes memory data =\\n                abi.encode(user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, remainingInterest);\\n            assembly {\\n                mstore(couponsToBurn, add(mload(couponsToBurn), 1))\\n            }\\n\\n            CloberOrderBook market = CloberOrderBook(_couponMarkets[lastCoupon.id()]);\\n            uint256 dy = lastCoupon.amount - IERC20(market.baseToken()).balanceOf(address(this));\\n            market.marketOrder(address(this), type(uint16).max, type(uint64).max, dy, 1, data);\\n        } else if (couponsToMint.length > 0) {\\n            Coupon memory lastCoupon = couponsToMint[couponsToMint.length - 1];\\n            assembly {\\n                mstore(couponsToMint, sub(mload(couponsToMint), 1))\\n            }\\n            bytes memory data =\\n                abi.encode(user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, remainingInterest);\\n            assembly {\\n                mstore(couponsToMint, add(mload(couponsToMint), 1))\\n            }\\n\\n            CloberOrderBook market = CloberOrderBook(_couponMarkets[lastCoupon.id()]);\\n            market.marketOrder(address(this), 0, 0, lastCoupon.amount, 2, data);\\n        } else {\\n            if (remainingInterest < 0) revert ControllerSlippage();\\n            ISubstitute(token).ensureBalance(user, amountToPay);\\n        }\\n    }\\n\\n    function cloberMarketSwapCallback(\\n        address inputToken,\\n        address,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        bytes calldata data\\n    ) external payable {\\n        // check if caller is registered market\\n        if (_cloberMarketFactory.getMarketHost(msg.sender) == address(0)) revert InvalidAccess();\\n\\n        address asset = CloberOrderBook(msg.sender).quoteToken();\\n        address user;\\n        Coupon memory lastCoupon;\\n        Coupon[] memory couponsToMint;\\n        Coupon[] memory couponsToBurn;\\n        uint256 amountToPay;\\n        int256 remainingInterest;\\n        (user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, remainingInterest) =\\n            abi.decode(data, (address, Coupon, Coupon[], Coupon[], uint256, int256));\\n\\n        if (asset == inputToken) {\\n            remainingInterest -= inputAmount.toInt256();\\n            amountToPay += inputAmount;\\n        } else {\\n            remainingInterest += outputAmount.toInt256();\\n        }\\n\\n        _executeCouponTrade(user, asset, couponsToMint, couponsToBurn, amountToPay, remainingInterest);\\n\\n        // transfer input tokens\\n        if (inputAmount > 0) IERC20(inputToken).safeTransfer(msg.sender, inputAmount);\\n        uint256 couponBalance = IERC20(inputToken).balanceOf(address(this));\\n        if (asset != inputToken && couponBalance > 0) {\\n            bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(lastCoupon.key);\\n            _wrapped1155Factory.unwrap(address(_couponManager), lastCoupon.id(), couponBalance, user, metadata);\\n        }\\n    }\\n\\n    function _getUnderlyingToken(address substitute) internal view returns (address) {\\n        return ISubstitute(substitute).underlyingToken();\\n    }\\n\\n    function _wrapCoupons(Coupon[] memory coupons) internal {\\n        // wrap 1155 to 20\\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\\n        _couponManager.safeBatchTransferFrom(address(this), address(_wrapped1155Factory), coupons, metadata);\\n    }\\n\\n    function _unwrapCoupons(Coupon[] memory coupons) internal {\\n        uint256[] memory tokenIds = new uint256[](coupons.length);\\n        uint256[] memory amounts = new uint256[](coupons.length);\\n        unchecked {\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                tokenIds[i] = coupons[i].id();\\n                amounts[i] = coupons[i].amount;\\n            }\\n        }\\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\\n        _wrapped1155Factory.batchUnwrap(address(_couponManager), tokenIds, amounts, address(this), metadata);\\n    }\\n\\n    function getCouponMarket(CouponKey memory couponKey) external view returns (address) {\\n        return _couponMarkets[couponKey.toId()];\\n    }\\n\\n    function setCouponMarket(CouponKey memory couponKey, address cloberMarket) public virtual onlyOwner {\\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey);\\n        uint256 id = couponKey.toId();\\n        address wrappedCoupon = _wrapped1155Factory.getWrapped1155(address(_couponManager), id, metadata);\\n        CloberMarketFactory.MarketInfo memory marketInfo = _cloberMarketFactory.getMarketInfo(cloberMarket);\\n        if (\\n            (marketInfo.host == address(0)) || (CloberOrderBook(cloberMarket).baseToken() != wrappedCoupon)\\n                || (CloberOrderBook(cloberMarket).quoteToken() != couponKey.asset)\\n        ) {\\n            revert InvalidMarket();\\n        }\\n\\n        _couponMarkets[id] = cloberMarket;\\n        emit SetCouponMarket(couponKey.asset, couponKey.epoch, cloberMarket);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb6c1a7a6815fa4e8fac4154ec385fc85b2829446806ec7a72872e93b1584cc0c\",\"license\":\"-\"},\"contracts/libraries/Coupon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\n\\nstruct Coupon {\\n    CouponKey key;\\n    uint256 amount;\\n}\\n\\nlibrary CouponLibrary {\\n    using CouponKeyLibrary for CouponKey;\\n\\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\\n    }\\n\\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: couponKey, amount: amount});\\n    }\\n\\n    function id(Coupon memory coupon) internal pure returns (uint256) {\\n        return coupon.key.toId();\\n    }\\n}\\n\",\"keccak256\":\"0xe3bd591859541e734e6b18f7c742efff2ea320805345b8dcf9597ea3e778d076\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CouponKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nstruct CouponKey {\\n    address asset;\\n    Epoch epoch;\\n}\\n\\nlibrary CouponKeyLibrary {\\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\\n        uint16 epoch = Epoch.unwrap(key.epoch);\\n        address asset = key.asset;\\n        assembly {\\n            id := add(asset, shl(160, epoch))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90d6688cd9d666140bf81ed569d5c41174cb89e06f108568a591b1cab2a1371b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\ntype Epoch is uint16;\\n\\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==, ne as !=} for Epoch global;\\n\\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\\n}\\n\\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\\n}\\n\\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\\n}\\n\\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\\n}\\n\\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\\n}\\n\\nfunction ne(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) != Epoch.unwrap(b);\\n}\\n\\nlibrary EpochLibrary {\\n    using EpochLibrary for Epoch;\\n\\n    error EpochOverflow();\\n\\n    uint256 internal constant MONTHS_PER_EPOCH = 1;\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function startTime(Epoch epoch) internal pure returns (uint256) {\\n        uint16 currentEpoch = Epoch.unwrap(epoch);\\n        if (currentEpoch == 0) return 0;\\n        unchecked {\\n            return _epochToTimestamp(currentEpoch - 1) + 1;\\n        }\\n    }\\n\\n    function endTime(Epoch epoch) internal pure returns (uint256) {\\n        return _epochToTimestamp(Epoch.unwrap(epoch));\\n    }\\n\\n    function lastExpiredEpoch() internal view returns (Epoch) {\\n        return current().sub(1);\\n    }\\n\\n    function current() internal view returns (Epoch) {\\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\\n    }\\n\\n    function add(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\\n    }\\n\\n    function sub(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\\n    }\\n\\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint16) {\\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\\n    }\\n\\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\\n        return a > b ? a : b;\\n    }\\n\\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint16) {\\n        unchecked {\\n            uint256 _days = timestamp / SECONDS_PER_DAY;\\n            int256 __days = int256(_days);\\n\\n            int256 L = __days + 68569 + OFFSET19700101;\\n            int256 N = (4 * L) / 146097;\\n            L = L - (146097 * N + 3) / 4;\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\n            L = L - (1461 * _year) / 4 + 31;\\n            int256 _month = (80 * L) / 2447;\\n            L = _month / 11;\\n            _month = _month + 2 - 12 * L;\\n            _year = 100 * (N - 49) + _year + L;\\n\\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\\n            if (epoch > type(uint16).max) revert EpochOverflow();\\n            return uint16(epoch);\\n        }\\n    }\\n\\n    function _epochToTimestamp(uint16 epoch) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\\n            uint256 year = months / 12 + 1970;\\n            months = (months % 12) << 4;\\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\\n            } else {\\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\\n            }\\n            return (\\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\\n            ) * SECONDS_PER_DAY - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cd1bac5f8222900e18564e78b008420877383d46684e9c79b926b5cf4a7535b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/PermitParams.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {IERC721Permit} from \\\"../interfaces/IERC721Permit.sol\\\";\\nimport {IERC1155Permit} from \\\"../interfaces/IERC1155Permit.sol\\\";\\n\\nstruct ERC20PermitParams {\\n    uint256 permitAmount;\\n    PermitSignature signature;\\n}\\n\\nstruct PermitSignature {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\nlibrary PermitParamsLibrary {\\n    function tryPermit(ERC20PermitParams memory params, address token, address from, address to)\\n        internal\\n        returns (bool)\\n    {\\n        return tryPermit(params.signature, IERC20Permit(token), params.permitAmount, from, to);\\n    }\\n\\n    function tryPermit(PermitSignature memory params, IERC20Permit token, uint256 amount, address from, address to)\\n        internal\\n        returns (bool)\\n    {\\n        if (params.deadline > 0) {\\n            try token.permit(from, to, amount, params.deadline, params.v, params.r, params.s) {\\n                return true;\\n            } catch {}\\n        }\\n        return false;\\n    }\\n\\n    function tryPermit(PermitSignature memory params, IERC721Permit token, uint256 positionId, address to)\\n        internal\\n        returns (bool)\\n    {\\n        if (params.deadline > 0) {\\n            try token.permit(to, positionId, params.deadline, params.v, params.r, params.s) {\\n                return true;\\n            } catch {}\\n        }\\n        return false;\\n    }\\n\\n    function tryPermit(PermitSignature memory params, IERC1155Permit token, address from, address to, bool approved)\\n        internal\\n        returns (bool)\\n    {\\n        if (params.deadline > 0) {\\n            try token.permit(from, to, approved, params.deadline, params.v, params.r, params.s) {\\n                return true;\\n            } catch {}\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x4ab203a9c7049b893f789576a6bd98409f2e28bf4b20c45a9fdb1488cdf83f4a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Clober (https://github.com/clober-dex/coupon-finance/blob/main/contracts/libraries/ReentrancyGuard.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    error Reentrancy();\\n\\n    uint256 internal _locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        if (_locked != 1) revert Reentrancy();\\n\\n        _locked = 2;\\n\\n        _;\\n\\n        _locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x6837f00e9cb3a468d219eac35db4ea6d5273cc821181d126aa37acd56716d004\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Substitute.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ISubstitute} from \\\"../interfaces/ISubstitute.sol\\\";\\n\\nlibrary SubstituteLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    function ensureBalance(ISubstitute substitute, address payer, uint256 amount) internal {\\n        uint256 balance = IERC20(address(substitute)).balanceOf(address(this));\\n        if (balance >= amount) {\\n            return;\\n        }\\n        address underlyingToken = substitute.underlyingToken();\\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\\n        unchecked {\\n            amount -= balance;\\n            if (underlyingBalance < amount) {\\n                IERC20(underlyingToken).safeTransferFrom(payer, address(this), amount - underlyingBalance);\\n            }\\n        }\\n        IERC20(underlyingToken).approve(address(substitute), amount);\\n        substitute.mint(amount, address(this));\\n    }\\n\\n    function burnAll(ISubstitute substitute, address to) internal {\\n        uint256 leftAmount = IERC20(address(substitute)).balanceOf(address(this));\\n        if (leftAmount > 0) {\\n            ISubstitute(substitute).burn(leftAmount, to);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6342822b05d39797a81c27b4bf0947964af299c06bfb5feaf76ae4710082a860\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Wrapped1155MetadataBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {CouponKey} from \\\"./CouponKey.sol\\\";\\nimport {Coupon} from \\\"./Coupon.sol\\\";\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nlibrary Wrapped1155MetadataBuilder {\\n    function buildWrapped1155Metadata(CouponKey memory couponKey) internal view returns (bytes memory) {\\n        string memory tokenSymbol = IERC20Metadata(couponKey.asset).symbol();\\n        string memory epochString = Strings.toString(Epoch.unwrap(couponKey.epoch));\\n        // @dev assume that tokenSymbol.length <= 12\\n        bytes32 nameData = bytes32(abi.encodePacked(tokenSymbol, \\\" Bond Coupon (\\\", epochString, \\\")\\\"));\\n        bytes32 symbolData = bytes32(abi.encodePacked(tokenSymbol, \\\"-CP\\\", epochString));\\n        assembly {\\n            let addLength := mul(2, add(mload(tokenSymbol), mload(epochString)))\\n            nameData := add(nameData, add(30, addLength))\\n            symbolData := add(symbolData, add(6, addLength))\\n        }\\n        return abi.encodePacked(nameData, symbolData, bytes1(IERC20Metadata(couponKey.asset).decimals()));\\n    }\\n\\n    function buildWrapped1155BatchMetadata(CouponKey[] memory couponKeys) internal view returns (bytes memory data) {\\n        unchecked {\\n            for (uint256 i = 0; i < couponKeys.length; ++i) {\\n                data = bytes.concat(data, buildWrapped1155Metadata(couponKeys[i]));\\n            }\\n        }\\n    }\\n\\n    function buildWrapped1155BatchMetadata(Coupon[] memory coupons) internal view returns (bytes memory data) {\\n        unchecked {\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                data = bytes.concat(data, buildWrapped1155Metadata(coupons[i].key));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce795dcb5c1eb1d54d5b2e0066626f198fb08fce14a12f654f72e59082b5ddff\",\"license\":\"-\"}},\"version\":1}",
  "bytecode": "0x61012060405260016002553480156200001757600080fd5b5060405162004286380380620042868339810160408190526200003a916200012a565b8484848433806200006557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000070816200009f565b506001600160a01b0393841660805291831660a052821660c052811660e0521661010052506200019a92505050565b600180546001600160a01b0319169055620000ba81620000bd565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200012557600080fd5b919050565b600080600080600060a086880312156200014357600080fd5b6200014e866200010d565b94506200015e602087016200010d565b93506200016e604087016200010d565b92506200017e606087016200010d565b91506200018e608087016200010d565b90509295509295909350565b60805160a05160c05160e05161010051613fea6200029c600039600081816106da015281816107930152818161084101528181610925015281816109b901528181610a8901528181610b3f01528181610bfe01528181610c9d01528181610d3401528181610e8401528181610f1b01528181610f6d0152818161103a0152818161138601526114c0015260008181610dd60152818161111c015281816111ad015281816112ac0152818161154401526115d50152600081816103e101528181611a6a01528181611d2a015261229b01526000818161049f01526117e00152600081816103b201528181611a3b01528181611d59015261226e0152613fea6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063e30c397811610059578063e30c397814610281578063f23a6e611461029f578063f2fde38b146102e4578063fd235fda1461030457600080fd5b80638da5cb5b146101cf578063bc197c8114610201578063bf4415dc1461023a57600080fd5b806356681483116100bb57806356681483146101715780636c2da99914610184578063715018a6146101a557806379ba5097146101ba57600080fd5b806301ffc9a7146100ed57806329b084c11461012257806346a114e21461014457600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004612dff565b610317565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b5061014261013d366004612f23565b610380565b005b34801561015057600080fd5b5061016461015f366004612fd9565b6106cd565b604051610119919061305e565b61014261017f366004613083565b610da4565b6101976101923660046130f4565b611278565b604051908152602001610119565b3480156101b157600080fd5b506101426116a1565b3480156101c657600080fd5b506101426116b5565b3480156101db57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610119565b34801561020d57600080fd5b5061022161021c3660046131df565b6116fe565b6040516001600160e01b03199091168152602001610119565b34801561024657600080fd5b506101e961025536600461328d565b602081810151915160a09290921b9091016000908152600390915260409020546001600160a01b031690565b34801561028d57600080fd5b506001546001600160a01b03166101e9565b3480156102ab57600080fd5b506102216102ba3660046132a9565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156102f057600080fd5b506101426102ff366004613312565b611729565b61014261031236600461332f565b6117a7565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061037a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b610388611af9565b600061039383611b26565b905060006103ac846020810151905160a09190911b0190565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166308b2ea5e7f000000000000000000000000000000000000000000000000000000000000000084866040518463ffffffff1660e01b8152600401610420939291906133d9565b602060405180830381865afa15801561043d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104619190613401565b6040517f0cf85bcc0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690630cf85bcc9060240160a060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a9190613443565b80519091506001600160a01b031615806105975750816001600160a01b0316856001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190613401565b6001600160a01b031614155b80610619575085600001516001600160a01b0316856001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190613401565b6001600160a01b031614155b15610650576040517f9db8d5b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a8116918217909255928a01518a519251939461ffff9091169392909116917f36b618d929a94eeca73ecddec2f5e49fdb6e4bde0a20e2987baaabb9e7fc21ab9190a4505050505050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461071857604051633006171960e21b815260040160405180910390fd5b6000808380602001905181019061072f919061350d565b955090925090506000829003610828576000848060200190518101906107559190613567565b6040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301529197509192507f00000000000000000000000000000000000000000000000000000000000000001690636a627842906024016020604051808303816000875af11580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080091906135b8565b92508260405160200161081591815260200190565b6040516020818303038152906040529350505b60405163eb02c30160e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160a060405180830381865afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b491906135e1565b90506000858060200190518101906108cc9190613660565b61ffff91909116604085810182905260808601849052517f7c6af77d00000000000000000000000000000000000000000000000000000000815260048101889052602481019390935260448301529150600090819081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637c6af77d906064016000604051808303816000875af1158015610976573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099e919081019061375b565b9250925092506000811215610a525784516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301e3366790306109ea856137de565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b505050505b825115610afb576040517f65ae58470000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae584790610ac09086903090600401613876565b600060405180830381600087803b158015610ada57600080fd5b505af1158015610aee573d6000803e3d6000fd5b50505050610afb83611cec565b610b1d868660000151858560008613610b15576000610b17565b855b89611dbb565b6000811315610c5d57845160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490529091169063095ea7b3906044016020604051808303816000875af1158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc91906138b2565b5084516040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063338b5dea90604401600060405180830381600087803b158015610c4457600080fd5b505af1158015610c58573d6000803e3d6000fd5b505050505b815115610d0557610c6d82612110565b6040517fe6ee95e20000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6ee95e290610cd29085906004016138cd565b600060405180830381600087803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b505050505b6040517faba5b4b3000000000000000000000000000000000000000000000000000000008152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aba5b4b390602401600060405180830381600087803b158015610d8057600080fd5b505af1158015610d94573d6000803e3d6000fd5b5050505050505050505050919050565b600254600114610dc75760405163558a1e0360e11b815260040160405180910390fd5b600280554715801590610e49577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e2f57600080fd5b505af1158015610e43573d6000803e3d6000fd5b50505050505b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101889052879033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef9190613401565b6001600160a01b031614610f1657604051633006171960e21b815260040160405180910390fd5b610f537f00000000000000000000000000000000000000000000000000000000000000008930610f4b3688900388018861395e565b929190612303565b5060405163eb02c30160e01b8152600481018990526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160a060405180830381865afa158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe091906135e1565b8051909150611002903330610ffa368a90038a018a61397a565b9291906123c8565b5060408051602081018a905261ffff891681830152606080820189905282518083039091018152608082019092526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638154831990611073908d903390869060a0016139b1565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161109e919061305e565b6000604051808303816000875af11580156110bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110e591908101906139d9565b5081516110fb906001600160a01b0316336123df565b505050801561126a576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561116b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118f91906135b8565b9050801561126857604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156111f957600080fd5b505af115801561120d573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114611253576040519150601f19603f3d011682016040523d82523d6000602084013e611258565b606091505b505090508061126657600080fd5b505b505b505060016002555050505050565b600060025460011461129d5760405163558a1e0360e11b815260040160405180910390fd5b60028055471580159061131f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130557600080fd5b505af1158015611319573d6000803e3d6000fd5b50505050505b61133c61132b886124d3565b3330610ffa3688900388018861397a565b506000868661134a876137de565b6040516020016113719392919092835261ffff919091166020830152604082015260600190565b604051602081830303815290604052905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663815483196000338c866040516020016113c9929190613a0e565b60408051601f19818403018152908290526113e8939291602001613a30565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401611413919061305e565b6000604051808303816000875af1158015611432573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261145a91908101906139d9565b90508080602001905181019061147091906135b8565b93506114856001600160a01b038a16336123df565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401600060405180830381600087803b15801561150c57600080fd5b505af1158015611520573d6000803e3d6000fd5b5050505050508015611692576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b791906135b8565b9050801561169057604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561162157600080fd5b505af1158015611635573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d806000811461167b576040519150601f19603f3d011682016040523d82523d6000602084013e611680565b606091505b505090508061168e57600080fd5b505b505b50600160025595945050505050565b6116a9611af9565b6116b36000612537565b565b60015433906001600160a01b031681146116f25760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6116fb81612537565b50565b7fbc197c81000000000000000000000000000000000000000000000000000000005b95945050505050565b611731611af9565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915561176f6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6040517fafdd9edc0000000000000000000000000000000000000000000000000000000081523360048201526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063afdd9edc90602401602060405180830381865afa158015611827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184b9190613401565b6001600160a01b03160361187257604051633006171960e21b815260040160405180910390fd5b6000336001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d69190613401565b604080516080810182526000918101828152606082018390528152602081018290529192509060608060008061190e888a018a613afc565b949a509298509096509450925090506001600160a01b03808e1690881603611956576119398b61255d565b6119439082613b97565b905061194f8b83613bbe565b915061196c565b61195f8a61255d565b6119699082613bd1565b90505b61197a868886868686611dbb565b8a15611994576119946001600160a01b038e16338d6125c0565b6040516370a0823160e01b81523060048201526000906001600160a01b038f16906370a0823190602401602060405180830381865afa1580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff91906135b8565b90508d6001600160a01b0316886001600160a01b031614158015611a235750600081115b15611ae9576000611a378760000151611b26565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352aecb247f0000000000000000000000000000000000000000000000000000000000000000611a928a612634565b858c866040518663ffffffff1660e01b8152600401611ab5959493929190613bf9565b600060405180830381600087803b158015611acf57600080fd5b505af1158015611ae3573d6000803e3d6000fd5b50505050505b5050505050505050505050505050565b6000546001600160a01b031633146116b35760405163118cdaa760e01b81523360048201526024016116e9565b6060600082600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611b6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b949190810190613c3c565b90506000611ba9846020015161ffff16612649565b905060008282604051602001611bc0929190613c85565b604051602081830303815290604052611bd890613d07565b905060008383604051602001611bef929190613d2b565b604051602081830303815290604052611c0790613d07565b9050825184510160020280601e0183019250806006018201915050818187600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8a9190613d83565b60f81b604051602001611cd29392919092835260208301919091527fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b604051602081830303815290604052945050505050919050565b6000611cf7826126e9565b6040517fa50e72320000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a50e723290611d859030907f00000000000000000000000000000000000000000000000000000000000000009087908790600401613da0565b600060405180830381600087803b158015611d9f57600080fd5b505af1158015611db3573d6000803e3d6000fd5b505050505050565b825115611fb85760008360018551611dd39190613dde565b81518110611de357611de3613df1565b60200260200101519050600184510384526000878287878787604051602001611e1196959493929190613e07565b604051602081830303815290604052905060018551018552600060036000611e3885612634565b815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec09190613401565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2a91906135b8565b8460200151611f399190613dde565b60405163168da99d60e31b81529091506001600160a01b0383169063b46d4ce890611f7d90309061ffff9067ffffffffffffffff9087906001908b90600401613e83565b600060405180830381600087803b158015611f9757600080fd5b505af1158015611fab573d6000803e3d6000fd5b5050505050505050611db3565b8351156120c15760008460018651611fd09190613dde565b81518110611fe057611fe0613df1565b6020026020010151905060018551038552600087828787878760405160200161200e96959493929190613e07565b60405160208183030381529060405290506001865101865260006003600061203585612634565b8152602080820192909252604090810160009081205492860151915163168da99d60e31b81526001600160a01b039093169350839263b46d4ce892612087923092909182916002908a90600401613e83565b600060405180830381600087803b1580156120a157600080fd5b505af11580156120b5573d6000803e3d6000fd5b50505050505050611db3565b60008112156120fc576040517ff271b55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611db36001600160a01b038616878461274f565b6000815167ffffffffffffffff81111561212c5761212c612e29565b604051908082528060200260200182016040528015612155578160200160208202803683370190505b5090506000825167ffffffffffffffff81111561217457612174612e29565b60405190808252806020026020018201604052801561219d578160200160208202803683370190505b50905060005b835181101561222f576121ce8482815181106121c1576121c1613df1565b6020026020010151612634565b8382815181106121e0576121e0613df1565b6020026020010181815250508381815181106121fe576121fe613df1565b60200260200101516020015182828151811061221c5761221c613df1565b60209081029190910101526001016121a3565b50600061223b846126e9565b6040517fa7eaa1860000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a7eaa186906122cb907f0000000000000000000000000000000000000000000000000000000000000000908790879030908890600401613f0b565b600060405180830381600087803b1580156122e557600080fd5b505af11580156122f9573d6000803e3d6000fd5b5050505050505050565b8351600090156123bc5784516020860151604080880151606089015191517f7ac2ff7b0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201899052604482019590955260ff9093166064840152608483015260a482015290851690637ac2ff7b9060c401600060405180830381600087803b15801561239e57600080fd5b505af19250505080156123af575060015b156123bc575060016123c0565b5060005b949350505050565b6000611720856020015185876000015186866129b6565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244a91906135b8565b905080156124ce576040517ffcd3533c000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03838116602483015284169063fcd3533c90604401600060405180830381600087803b1580156124b557600080fd5b505af11580156124c9573d6000803e3d6000fd5b505050505b505050565b6000816001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037a9190613401565b6001805473ffffffffffffffffffffffffffffffffffffffff191690556116fb81612a83565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156125bc576040517f24775e06000000000000000000000000000000000000000000000000000000008152600481018390526024016116e9565b5090565b6040516001600160a01b038381166024830152604482018390526124ce91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612ae0565b80516020810151905160009160a01b0161037a565b6060600061265683612b5c565b600101905060008167ffffffffffffffff81111561267657612676612e29565b6040519080825280601f01601f1916602001820160405280156126a0576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846126aa57509392505050565b606060005b8251811015612749578161271e84838151811061270d5761270d613df1565b602002602001015160000151611b26565b60405160200161272f929190613f69565b60408051601f1981840301815291905291506001016126ee565b50919050565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ba91906135b8565b90508181106127c95750505050565b6000846001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282d9190613401565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289b91906135b8565b90508284039350838110156128c1576128c16001600160a01b0383168630848803612c3e565b60405163095ea7b360e01b81526001600160a01b0387811660048301526024820186905283169063095ea7b3906044016020604051808303816000875af1158015612910573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293491906138b2565b506040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018590523060248201526001600160a01b038716906394bf804d90604401600060405180830381600087803b15801561299657600080fd5b505af11580156129aa573d6000803e3d6000fd5b50505050505050505050565b845160009015612a77578551602087015160408089015160608a015191517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528781166024830152604482018a9052606482019590955260ff909316608484015260a483015260c48201529086169063d505accf9060e401600060405180830381600087803b158015612a5957600080fd5b505af1925050508015612a6a575060015b15612a7757506001611720565b50600095945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000612af56001600160a01b03841683612c7d565b90508051600014158015612b1a575080806020019051810190612b1891906138b2565b155b156124ce576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016116e9565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612ba5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612bd1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612bef57662386f26fc10000830492506010015b6305f5e1008310612c07576305f5e100830492506008015b6127108310612c1b57612710830492506004015b60648310612c2d576064830492506002015b600a831061037a5760010192915050565b6040516001600160a01b038481166024830152838116604483015260648201839052612c779186918216906323b872dd906084016125ed565b50505050565b6060612c8b83836000612c92565b9392505050565b606081471015612cd0576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016116e9565b600080856001600160a01b03168486604051612cec9190613f98565b60006040518083038185875af1925050503d8060008114612d29576040519150601f19603f3d011682016040523d82523d6000602084013e612d2e565b606091505b5091509150612d3e868383612d48565b9695505050505050565b606082612d5d57612d5882612dbd565b612c8b565b8151158015612d7457506001600160a01b0384163b155b15612db6576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016116e9565b5080612c8b565b805115612dcd5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215612e1157600080fd5b81356001600160e01b031981168114612c8b57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612e6257612e62612e29565b60405290565b60405160a0810167ffffffffffffffff81118282101715612e6257612e62612e29565b604051601f8201601f1916810167ffffffffffffffff81118282101715612eb457612eb4612e29565b604052919050565b6001600160a01b03811681146116fb57600080fd5b61ffff811681146116fb57600080fd5b600060408284031215612ef357600080fd5b612efb612e3f565b90508135612f0881612ebc565b81526020820135612f1881612ed1565b602082015292915050565b60008060608385031215612f3657600080fd5b612f408484612ee1565b91506040830135612f5081612ebc565b809150509250929050565b600067ffffffffffffffff821115612f7557612f75612e29565b50601f01601f191660200190565b600082601f830112612f9457600080fd5b8135612fa7612fa282612f5b565b612e8b565b818152846020838601011115612fbc57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612feb57600080fd5b813567ffffffffffffffff81111561300257600080fd5b6123c084828501612f83565b60005b83811015613029578181015183820152602001613011565b50506000910152565b6000815180845261304a81602086016020860161300e565b601f01601f19169290920160200192915050565b602081526000612c8b6020830184613032565b600060a0828403121561274957600080fd5b6000806000806000808688036101a081121561309e57600080fd5b873596506020880135955060408801356130b781612ed1565b9450606088013593506130cd8960808a01613071565b9250608061011f19820112156130e257600080fd5b50610120870190509295509295509295565b6000806000806000610120868803121561310d57600080fd5b853561311881612ebc565b945060208601359350604086013561312f81612ed1565b9250606086013591506131458760808801613071565b90509295509295909350565b600067ffffffffffffffff82111561316b5761316b612e29565b5060051b60200190565b600082601f83011261318657600080fd5b81356020613196612fa283613151565b8083825260208201915060208460051b8701019350868411156131b857600080fd5b602086015b848110156131d457803583529183019183016131bd565b509695505050505050565b600080600080600060a086880312156131f757600080fd5b853561320281612ebc565b9450602086013561321281612ebc565b9350604086013567ffffffffffffffff8082111561322f57600080fd5b61323b89838a01613175565b9450606088013591508082111561325157600080fd5b61325d89838a01613175565b9350608088013591508082111561327357600080fd5b5061328088828901612f83565b9150509295509295909350565b60006040828403121561329f57600080fd5b612c8b8383612ee1565b600080600080600060a086880312156132c157600080fd5b85356132cc81612ebc565b945060208601356132dc81612ebc565b93506040860135925060608601359150608086013567ffffffffffffffff81111561330657600080fd5b61328088828901612f83565b60006020828403121561332457600080fd5b8135612c8b81612ebc565b60008060008060008060a0878903121561334857600080fd5b863561335381612ebc565b9550602087013561336381612ebc565b94506040870135935060608701359250608087013567ffffffffffffffff8082111561338e57600080fd5b818901915089601f8301126133a257600080fd5b8135818111156133b157600080fd5b8a60208285010111156133c357600080fd5b6020830194508093505050509295509295509295565b6001600160a01b03841681528260208201526060604082015260006117206060830184613032565b60006020828403121561341357600080fd5b8151612c8b81612ebc565b80516fffffffffffffffffffffffffffffffff8116811461343e57600080fd5b919050565b600060a0828403121561345557600080fd5b61345d612e68565b825161346881612ebc565b815260208301516003811061347c57600080fd5b602082015261348d6040840161341e565b604082015261349e6060840161341e565b606082015260808301516134b181612ebc565b60808201529392505050565b60006134cb612fa284612f5b565b90508281528383830111156134df57600080fd5b612c8b83602083018461300e565b600082601f8301126134fe57600080fd5b612c8b838351602085016134bd565b60008060006060848603121561352257600080fd5b83519250602084015161353481612ebc565b604085015190925067ffffffffffffffff81111561355157600080fd5b61355d868287016134ed565b9150509250925092565b6000806040838503121561357a57600080fd5b825161358581612ebc565b602084015190925067ffffffffffffffff8111156135a257600080fd5b6135ae858286016134ed565b9150509250929050565b6000602082840312156135ca57600080fd5b5051919050565b8051801515811461343e57600080fd5b600060a082840312156135f357600080fd5b6135fb612e68565b825161360681612ebc565b8152602083015167ffffffffffffffff8116811461362357600080fd5b6020820152604083015161363681612ed1565b6040820152613647606084016135d1565b6060820152608083015160808201528091505092915050565b60008060006060848603121561367557600080fd5b83519250602084015161368781612ed1565b80925050604084015190509250925092565b600082601f8301126136aa57600080fd5b815160206136ba612fa283613151565b828152606092830285018201928282019190878511156136d957600080fd5b8387015b8581101561374e57808903828112156136f65760008081fd5b6136fe612e3f565b60408083121561370e5760008081fd5b613716612e3f565b9250835161372381612ebc565b83528388015161373281612ed1565b83890152918152908201518187015284529284019281016136dd565b5090979650505050505050565b60008060006060848603121561377057600080fd5b835167ffffffffffffffff8082111561378857600080fd5b61379487838801613699565b945060208601519150808211156137aa57600080fd5b506137b786828701613699565b925050604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b60007f8000000000000000000000000000000000000000000000000000000000000000820361380f5761380f6137c8565b5060000390565b60008151808452602080850194506020840160005b8381101561386b578151805180516001600160a01b0316895260209081015161ffff16818a0152015160408801526060909601959082019060010161382b565b509495945050505050565b6060815260006138896060830185613816565b6001600160a01b0384166020840152828103604084015260008152602081019150509392505050565b6000602082840312156138c457600080fd5b612c8b826135d1565b602081526000612c8b6020830184613816565b60ff811681146116fb57600080fd5b60006080828403121561390157600080fd5b6040516080810181811067ffffffffffffffff8211171561392457613924612e29565b60405282358152905080602083013561393c816138e0565b8060208301525060408301356040820152606083013560608201525092915050565b60006080828403121561397057600080fd5b612c8b83836138ef565b600060a0828403121561398c57600080fd5b613994612e3f565b823581526139a584602085016138ef565b60208201529392505050565b8381526001600160a01b03831660208201526060604082015260006117206060830184613032565b6000602082840312156139eb57600080fd5b815167ffffffffffffffff811115613a0257600080fd5b6123c0848285016134ed565b6001600160a01b03831681526040602082015260006123c06040830184613032565b60ff841681526001600160a01b03831660208201526060604082015260006117206060830184613032565b600060608284031215613a6d57600080fd5b613a75612e3f565b9050613a818383612ee1565b81526040820135602082015292915050565b600082601f830112613aa457600080fd5b81356020613ab4612fa283613151565b808382526020820191506060602060608602880101945087851115613ad857600080fd5b602087015b8581101561374e57613aef8982613a5b565b8452928401928101613add565b6000806000806000806101008789031215613b1657600080fd5b8635613b2181612ebc565b9550613b308860208901613a5b565b9450608087013567ffffffffffffffff80821115613b4d57600080fd5b613b598a838b01613a93565b955060a0890135915080821115613b6f57600080fd5b50613b7c89828a01613a93565b93505060c0870135915060e087013590509295509295509295565b8181036000831280158383131683831282161715613bb757613bb76137c8565b5092915050565b8082018082111561037a5761037a6137c8565b8082018281126000831280158216821582161715613bf157613bf16137c8565b505092915050565b60006001600160a01b03808816835286602084015285604084015280851660608401525060a06080830152613c3160a0830184613032565b979650505050505050565b600060208284031215613c4e57600080fd5b815167ffffffffffffffff811115613c6557600080fd5b8201601f81018413613c7657600080fd5b6123c0848251602084016134bd565b60008351613c9781846020880161300e565b7f20426f6e6420436f75706f6e20280000000000000000000000000000000000009083019081528351613cd181600e84016020880161300e565b7f2900000000000000000000000000000000000000000000000000000000000000600e9290910191820152600f01949350505050565b805160208083015191908110156127495760001960209190910360031b1b16919050565b60008351613d3d81846020880161300e565b7f2d435000000000000000000000000000000000000000000000000000000000009083019081528351613d7781600384016020880161300e565b01600301949350505050565b600060208284031215613d9557600080fd5b8151612c8b816138e0565b60006001600160a01b03808716835280861660208401525060806040830152613dcc6080830185613816565b8281036060840152613c318185613032565b8181038181111561037a5761037a6137c8565b634e487b7160e01b600052603260045260246000fd5b60006101006001600160a01b0389168352613e476020840189805180516001600160a01b0316835260209081015161ffff16818401520151604090910152565b806080840152613e5981840188613816565b905082810360a0840152613e6d8187613816565b60c0840195909552505060e00152949350505050565b6001600160a01b038716815261ffff8616602082015267ffffffffffffffff8516604082015283606082015260ff8316608082015260c060a08201526000613ece60c0830184613032565b98975050505050505050565b60008151808452602080850194506020840160005b8381101561386b57815187529582019590820190600101613eef565b60006001600160a01b03808816835260a06020840152613f2e60a0840188613eda565b8381036040850152613f408188613eda565b905081861660608501528381036080850152613f5c8186613032565b9998505050505050505050565b60008351613f7b81846020880161300e565b835190830190613f8f81836020880161300e565b01949350505050565b60008251613faa81846020870161300e565b919091019291505056fea2646970667358221220213be9db5d3f41b395596888f5560307534b442d171fe6609d06318d1901139364736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063e30c397811610059578063e30c397814610281578063f23a6e611461029f578063f2fde38b146102e4578063fd235fda1461030457600080fd5b80638da5cb5b146101cf578063bc197c8114610201578063bf4415dc1461023a57600080fd5b806356681483116100bb57806356681483146101715780636c2da99914610184578063715018a6146101a557806379ba5097146101ba57600080fd5b806301ffc9a7146100ed57806329b084c11461012257806346a114e21461014457600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004612dff565b610317565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b5061014261013d366004612f23565b610380565b005b34801561015057600080fd5b5061016461015f366004612fd9565b6106cd565b604051610119919061305e565b61014261017f366004613083565b610da4565b6101976101923660046130f4565b611278565b604051908152602001610119565b3480156101b157600080fd5b506101426116a1565b3480156101c657600080fd5b506101426116b5565b3480156101db57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610119565b34801561020d57600080fd5b5061022161021c3660046131df565b6116fe565b6040516001600160e01b03199091168152602001610119565b34801561024657600080fd5b506101e961025536600461328d565b602081810151915160a09290921b9091016000908152600390915260409020546001600160a01b031690565b34801561028d57600080fd5b506001546001600160a01b03166101e9565b3480156102ab57600080fd5b506102216102ba3660046132a9565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156102f057600080fd5b506101426102ff366004613312565b611729565b61014261031236600461332f565b6117a7565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061037a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b610388611af9565b600061039383611b26565b905060006103ac846020810151905160a09190911b0190565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166308b2ea5e7f000000000000000000000000000000000000000000000000000000000000000084866040518463ffffffff1660e01b8152600401610420939291906133d9565b602060405180830381865afa15801561043d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104619190613401565b6040517f0cf85bcc0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690630cf85bcc9060240160a060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a9190613443565b80519091506001600160a01b031615806105975750816001600160a01b0316856001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190613401565b6001600160a01b031614155b80610619575085600001516001600160a01b0316856001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190613401565b6001600160a01b031614155b15610650576040517f9db8d5b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a8116918217909255928a01518a519251939461ffff9091169392909116917f36b618d929a94eeca73ecddec2f5e49fdb6e4bde0a20e2987baaabb9e7fc21ab9190a4505050505050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461071857604051633006171960e21b815260040160405180910390fd5b6000808380602001905181019061072f919061350d565b955090925090506000829003610828576000848060200190518101906107559190613567565b6040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301529197509192507f00000000000000000000000000000000000000000000000000000000000000001690636a627842906024016020604051808303816000875af11580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080091906135b8565b92508260405160200161081591815260200190565b6040516020818303038152906040529350505b60405163eb02c30160e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160a060405180830381865afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b491906135e1565b90506000858060200190518101906108cc9190613660565b61ffff91909116604085810182905260808601849052517f7c6af77d00000000000000000000000000000000000000000000000000000000815260048101889052602481019390935260448301529150600090819081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637c6af77d906064016000604051808303816000875af1158015610976573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099e919081019061375b565b9250925092506000811215610a525784516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301e3366790306109ea856137de565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b505050505b825115610afb576040517f65ae58470000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae584790610ac09086903090600401613876565b600060405180830381600087803b158015610ada57600080fd5b505af1158015610aee573d6000803e3d6000fd5b50505050610afb83611cec565b610b1d868660000151858560008613610b15576000610b17565b855b89611dbb565b6000811315610c5d57845160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490529091169063095ea7b3906044016020604051808303816000875af1158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc91906138b2565b5084516040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063338b5dea90604401600060405180830381600087803b158015610c4457600080fd5b505af1158015610c58573d6000803e3d6000fd5b505050505b815115610d0557610c6d82612110565b6040517fe6ee95e20000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6ee95e290610cd29085906004016138cd565b600060405180830381600087803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b505050505b6040517faba5b4b3000000000000000000000000000000000000000000000000000000008152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aba5b4b390602401600060405180830381600087803b158015610d8057600080fd5b505af1158015610d94573d6000803e3d6000fd5b5050505050505050505050919050565b600254600114610dc75760405163558a1e0360e11b815260040160405180910390fd5b600280554715801590610e49577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e2f57600080fd5b505af1158015610e43573d6000803e3d6000fd5b50505050505b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101889052879033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef9190613401565b6001600160a01b031614610f1657604051633006171960e21b815260040160405180910390fd5b610f537f00000000000000000000000000000000000000000000000000000000000000008930610f4b3688900388018861395e565b929190612303565b5060405163eb02c30160e01b8152600481018990526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160a060405180830381865afa158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe091906135e1565b8051909150611002903330610ffa368a90038a018a61397a565b9291906123c8565b5060408051602081018a905261ffff891681830152606080820189905282518083039091018152608082019092526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638154831990611073908d903390869060a0016139b1565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161109e919061305e565b6000604051808303816000875af11580156110bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110e591908101906139d9565b5081516110fb906001600160a01b0316336123df565b505050801561126a576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561116b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118f91906135b8565b9050801561126857604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156111f957600080fd5b505af115801561120d573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114611253576040519150601f19603f3d011682016040523d82523d6000602084013e611258565b606091505b505090508061126657600080fd5b505b505b505060016002555050505050565b600060025460011461129d5760405163558a1e0360e11b815260040160405180910390fd5b60028055471580159061131f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130557600080fd5b505af1158015611319573d6000803e3d6000fd5b50505050505b61133c61132b886124d3565b3330610ffa3688900388018861397a565b506000868661134a876137de565b6040516020016113719392919092835261ffff919091166020830152604082015260600190565b604051602081830303815290604052905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663815483196000338c866040516020016113c9929190613a0e565b60408051601f19818403018152908290526113e8939291602001613a30565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401611413919061305e565b6000604051808303816000875af1158015611432573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261145a91908101906139d9565b90508080602001905181019061147091906135b8565b93506114856001600160a01b038a16336123df565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401600060405180830381600087803b15801561150c57600080fd5b505af1158015611520573d6000803e3d6000fd5b5050505050508015611692576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b791906135b8565b9050801561169057604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561162157600080fd5b505af1158015611635573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d806000811461167b576040519150601f19603f3d011682016040523d82523d6000602084013e611680565b606091505b505090508061168e57600080fd5b505b505b50600160025595945050505050565b6116a9611af9565b6116b36000612537565b565b60015433906001600160a01b031681146116f25760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6116fb81612537565b50565b7fbc197c81000000000000000000000000000000000000000000000000000000005b95945050505050565b611731611af9565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915561176f6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6040517fafdd9edc0000000000000000000000000000000000000000000000000000000081523360048201526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063afdd9edc90602401602060405180830381865afa158015611827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184b9190613401565b6001600160a01b03160361187257604051633006171960e21b815260040160405180910390fd5b6000336001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d69190613401565b604080516080810182526000918101828152606082018390528152602081018290529192509060608060008061190e888a018a613afc565b949a509298509096509450925090506001600160a01b03808e1690881603611956576119398b61255d565b6119439082613b97565b905061194f8b83613bbe565b915061196c565b61195f8a61255d565b6119699082613bd1565b90505b61197a868886868686611dbb565b8a15611994576119946001600160a01b038e16338d6125c0565b6040516370a0823160e01b81523060048201526000906001600160a01b038f16906370a0823190602401602060405180830381865afa1580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff91906135b8565b90508d6001600160a01b0316886001600160a01b031614158015611a235750600081115b15611ae9576000611a378760000151611b26565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352aecb247f0000000000000000000000000000000000000000000000000000000000000000611a928a612634565b858c866040518663ffffffff1660e01b8152600401611ab5959493929190613bf9565b600060405180830381600087803b158015611acf57600080fd5b505af1158015611ae3573d6000803e3d6000fd5b50505050505b5050505050505050505050505050565b6000546001600160a01b031633146116b35760405163118cdaa760e01b81523360048201526024016116e9565b6060600082600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611b6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b949190810190613c3c565b90506000611ba9846020015161ffff16612649565b905060008282604051602001611bc0929190613c85565b604051602081830303815290604052611bd890613d07565b905060008383604051602001611bef929190613d2b565b604051602081830303815290604052611c0790613d07565b9050825184510160020280601e0183019250806006018201915050818187600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8a9190613d83565b60f81b604051602001611cd29392919092835260208301919091527fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b604051602081830303815290604052945050505050919050565b6000611cf7826126e9565b6040517fa50e72320000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a50e723290611d859030907f00000000000000000000000000000000000000000000000000000000000000009087908790600401613da0565b600060405180830381600087803b158015611d9f57600080fd5b505af1158015611db3573d6000803e3d6000fd5b505050505050565b825115611fb85760008360018551611dd39190613dde565b81518110611de357611de3613df1565b60200260200101519050600184510384526000878287878787604051602001611e1196959493929190613e07565b604051602081830303815290604052905060018551018552600060036000611e3885612634565b815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec09190613401565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2a91906135b8565b8460200151611f399190613dde565b60405163168da99d60e31b81529091506001600160a01b0383169063b46d4ce890611f7d90309061ffff9067ffffffffffffffff9087906001908b90600401613e83565b600060405180830381600087803b158015611f9757600080fd5b505af1158015611fab573d6000803e3d6000fd5b5050505050505050611db3565b8351156120c15760008460018651611fd09190613dde565b81518110611fe057611fe0613df1565b6020026020010151905060018551038552600087828787878760405160200161200e96959493929190613e07565b60405160208183030381529060405290506001865101865260006003600061203585612634565b8152602080820192909252604090810160009081205492860151915163168da99d60e31b81526001600160a01b039093169350839263b46d4ce892612087923092909182916002908a90600401613e83565b600060405180830381600087803b1580156120a157600080fd5b505af11580156120b5573d6000803e3d6000fd5b50505050505050611db3565b60008112156120fc576040517ff271b55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611db36001600160a01b038616878461274f565b6000815167ffffffffffffffff81111561212c5761212c612e29565b604051908082528060200260200182016040528015612155578160200160208202803683370190505b5090506000825167ffffffffffffffff81111561217457612174612e29565b60405190808252806020026020018201604052801561219d578160200160208202803683370190505b50905060005b835181101561222f576121ce8482815181106121c1576121c1613df1565b6020026020010151612634565b8382815181106121e0576121e0613df1565b6020026020010181815250508381815181106121fe576121fe613df1565b60200260200101516020015182828151811061221c5761221c613df1565b60209081029190910101526001016121a3565b50600061223b846126e9565b6040517fa7eaa1860000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a7eaa186906122cb907f0000000000000000000000000000000000000000000000000000000000000000908790879030908890600401613f0b565b600060405180830381600087803b1580156122e557600080fd5b505af11580156122f9573d6000803e3d6000fd5b5050505050505050565b8351600090156123bc5784516020860151604080880151606089015191517f7ac2ff7b0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201899052604482019590955260ff9093166064840152608483015260a482015290851690637ac2ff7b9060c401600060405180830381600087803b15801561239e57600080fd5b505af19250505080156123af575060015b156123bc575060016123c0565b5060005b949350505050565b6000611720856020015185876000015186866129b6565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244a91906135b8565b905080156124ce576040517ffcd3533c000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03838116602483015284169063fcd3533c90604401600060405180830381600087803b1580156124b557600080fd5b505af11580156124c9573d6000803e3d6000fd5b505050505b505050565b6000816001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037a9190613401565b6001805473ffffffffffffffffffffffffffffffffffffffff191690556116fb81612a83565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156125bc576040517f24775e06000000000000000000000000000000000000000000000000000000008152600481018390526024016116e9565b5090565b6040516001600160a01b038381166024830152604482018390526124ce91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612ae0565b80516020810151905160009160a01b0161037a565b6060600061265683612b5c565b600101905060008167ffffffffffffffff81111561267657612676612e29565b6040519080825280601f01601f1916602001820160405280156126a0576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846126aa57509392505050565b606060005b8251811015612749578161271e84838151811061270d5761270d613df1565b602002602001015160000151611b26565b60405160200161272f929190613f69565b60408051601f1981840301815291905291506001016126ee565b50919050565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ba91906135b8565b90508181106127c95750505050565b6000846001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282d9190613401565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289b91906135b8565b90508284039350838110156128c1576128c16001600160a01b0383168630848803612c3e565b60405163095ea7b360e01b81526001600160a01b0387811660048301526024820186905283169063095ea7b3906044016020604051808303816000875af1158015612910573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293491906138b2565b506040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018590523060248201526001600160a01b038716906394bf804d90604401600060405180830381600087803b15801561299657600080fd5b505af11580156129aa573d6000803e3d6000fd5b50505050505050505050565b845160009015612a77578551602087015160408089015160608a015191517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528781166024830152604482018a9052606482019590955260ff909316608484015260a483015260c48201529086169063d505accf9060e401600060405180830381600087803b158015612a5957600080fd5b505af1925050508015612a6a575060015b15612a7757506001611720565b50600095945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000612af56001600160a01b03841683612c7d565b90508051600014158015612b1a575080806020019051810190612b1891906138b2565b155b156124ce576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016116e9565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612ba5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612bd1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612bef57662386f26fc10000830492506010015b6305f5e1008310612c07576305f5e100830492506008015b6127108310612c1b57612710830492506004015b60648310612c2d576064830492506002015b600a831061037a5760010192915050565b6040516001600160a01b038481166024830152838116604483015260648201839052612c779186918216906323b872dd906084016125ed565b50505050565b6060612c8b83836000612c92565b9392505050565b606081471015612cd0576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016116e9565b600080856001600160a01b03168486604051612cec9190613f98565b60006040518083038185875af1925050503d8060008114612d29576040519150601f19603f3d011682016040523d82523d6000602084013e612d2e565b606091505b5091509150612d3e868383612d48565b9695505050505050565b606082612d5d57612d5882612dbd565b612c8b565b8151158015612d7457506001600160a01b0384163b155b15612db6576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016116e9565b5080612c8b565b805115612dcd5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215612e1157600080fd5b81356001600160e01b031981168114612c8b57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612e6257612e62612e29565b60405290565b60405160a0810167ffffffffffffffff81118282101715612e6257612e62612e29565b604051601f8201601f1916810167ffffffffffffffff81118282101715612eb457612eb4612e29565b604052919050565b6001600160a01b03811681146116fb57600080fd5b61ffff811681146116fb57600080fd5b600060408284031215612ef357600080fd5b612efb612e3f565b90508135612f0881612ebc565b81526020820135612f1881612ed1565b602082015292915050565b60008060608385031215612f3657600080fd5b612f408484612ee1565b91506040830135612f5081612ebc565b809150509250929050565b600067ffffffffffffffff821115612f7557612f75612e29565b50601f01601f191660200190565b600082601f830112612f9457600080fd5b8135612fa7612fa282612f5b565b612e8b565b818152846020838601011115612fbc57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612feb57600080fd5b813567ffffffffffffffff81111561300257600080fd5b6123c084828501612f83565b60005b83811015613029578181015183820152602001613011565b50506000910152565b6000815180845261304a81602086016020860161300e565b601f01601f19169290920160200192915050565b602081526000612c8b6020830184613032565b600060a0828403121561274957600080fd5b6000806000806000808688036101a081121561309e57600080fd5b873596506020880135955060408801356130b781612ed1565b9450606088013593506130cd8960808a01613071565b9250608061011f19820112156130e257600080fd5b50610120870190509295509295509295565b6000806000806000610120868803121561310d57600080fd5b853561311881612ebc565b945060208601359350604086013561312f81612ed1565b9250606086013591506131458760808801613071565b90509295509295909350565b600067ffffffffffffffff82111561316b5761316b612e29565b5060051b60200190565b600082601f83011261318657600080fd5b81356020613196612fa283613151565b8083825260208201915060208460051b8701019350868411156131b857600080fd5b602086015b848110156131d457803583529183019183016131bd565b509695505050505050565b600080600080600060a086880312156131f757600080fd5b853561320281612ebc565b9450602086013561321281612ebc565b9350604086013567ffffffffffffffff8082111561322f57600080fd5b61323b89838a01613175565b9450606088013591508082111561325157600080fd5b61325d89838a01613175565b9350608088013591508082111561327357600080fd5b5061328088828901612f83565b9150509295509295909350565b60006040828403121561329f57600080fd5b612c8b8383612ee1565b600080600080600060a086880312156132c157600080fd5b85356132cc81612ebc565b945060208601356132dc81612ebc565b93506040860135925060608601359150608086013567ffffffffffffffff81111561330657600080fd5b61328088828901612f83565b60006020828403121561332457600080fd5b8135612c8b81612ebc565b60008060008060008060a0878903121561334857600080fd5b863561335381612ebc565b9550602087013561336381612ebc565b94506040870135935060608701359250608087013567ffffffffffffffff8082111561338e57600080fd5b818901915089601f8301126133a257600080fd5b8135818111156133b157600080fd5b8a60208285010111156133c357600080fd5b6020830194508093505050509295509295509295565b6001600160a01b03841681528260208201526060604082015260006117206060830184613032565b60006020828403121561341357600080fd5b8151612c8b81612ebc565b80516fffffffffffffffffffffffffffffffff8116811461343e57600080fd5b919050565b600060a0828403121561345557600080fd5b61345d612e68565b825161346881612ebc565b815260208301516003811061347c57600080fd5b602082015261348d6040840161341e565b604082015261349e6060840161341e565b606082015260808301516134b181612ebc565b60808201529392505050565b60006134cb612fa284612f5b565b90508281528383830111156134df57600080fd5b612c8b83602083018461300e565b600082601f8301126134fe57600080fd5b612c8b838351602085016134bd565b60008060006060848603121561352257600080fd5b83519250602084015161353481612ebc565b604085015190925067ffffffffffffffff81111561355157600080fd5b61355d868287016134ed565b9150509250925092565b6000806040838503121561357a57600080fd5b825161358581612ebc565b602084015190925067ffffffffffffffff8111156135a257600080fd5b6135ae858286016134ed565b9150509250929050565b6000602082840312156135ca57600080fd5b5051919050565b8051801515811461343e57600080fd5b600060a082840312156135f357600080fd5b6135fb612e68565b825161360681612ebc565b8152602083015167ffffffffffffffff8116811461362357600080fd5b6020820152604083015161363681612ed1565b6040820152613647606084016135d1565b6060820152608083015160808201528091505092915050565b60008060006060848603121561367557600080fd5b83519250602084015161368781612ed1565b80925050604084015190509250925092565b600082601f8301126136aa57600080fd5b815160206136ba612fa283613151565b828152606092830285018201928282019190878511156136d957600080fd5b8387015b8581101561374e57808903828112156136f65760008081fd5b6136fe612e3f565b60408083121561370e5760008081fd5b613716612e3f565b9250835161372381612ebc565b83528388015161373281612ed1565b83890152918152908201518187015284529284019281016136dd565b5090979650505050505050565b60008060006060848603121561377057600080fd5b835167ffffffffffffffff8082111561378857600080fd5b61379487838801613699565b945060208601519150808211156137aa57600080fd5b506137b786828701613699565b925050604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b60007f8000000000000000000000000000000000000000000000000000000000000000820361380f5761380f6137c8565b5060000390565b60008151808452602080850194506020840160005b8381101561386b578151805180516001600160a01b0316895260209081015161ffff16818a0152015160408801526060909601959082019060010161382b565b509495945050505050565b6060815260006138896060830185613816565b6001600160a01b0384166020840152828103604084015260008152602081019150509392505050565b6000602082840312156138c457600080fd5b612c8b826135d1565b602081526000612c8b6020830184613816565b60ff811681146116fb57600080fd5b60006080828403121561390157600080fd5b6040516080810181811067ffffffffffffffff8211171561392457613924612e29565b60405282358152905080602083013561393c816138e0565b8060208301525060408301356040820152606083013560608201525092915050565b60006080828403121561397057600080fd5b612c8b83836138ef565b600060a0828403121561398c57600080fd5b613994612e3f565b823581526139a584602085016138ef565b60208201529392505050565b8381526001600160a01b03831660208201526060604082015260006117206060830184613032565b6000602082840312156139eb57600080fd5b815167ffffffffffffffff811115613a0257600080fd5b6123c0848285016134ed565b6001600160a01b03831681526040602082015260006123c06040830184613032565b60ff841681526001600160a01b03831660208201526060604082015260006117206060830184613032565b600060608284031215613a6d57600080fd5b613a75612e3f565b9050613a818383612ee1565b81526040820135602082015292915050565b600082601f830112613aa457600080fd5b81356020613ab4612fa283613151565b808382526020820191506060602060608602880101945087851115613ad857600080fd5b602087015b8581101561374e57613aef8982613a5b565b8452928401928101613add565b6000806000806000806101008789031215613b1657600080fd5b8635613b2181612ebc565b9550613b308860208901613a5b565b9450608087013567ffffffffffffffff80821115613b4d57600080fd5b613b598a838b01613a93565b955060a0890135915080821115613b6f57600080fd5b50613b7c89828a01613a93565b93505060c0870135915060e087013590509295509295509295565b8181036000831280158383131683831282161715613bb757613bb76137c8565b5092915050565b8082018082111561037a5761037a6137c8565b8082018281126000831280158216821582161715613bf157613bf16137c8565b505092915050565b60006001600160a01b03808816835286602084015285604084015280851660608401525060a06080830152613c3160a0830184613032565b979650505050505050565b600060208284031215613c4e57600080fd5b815167ffffffffffffffff811115613c6557600080fd5b8201601f81018413613c7657600080fd5b6123c0848251602084016134bd565b60008351613c9781846020880161300e565b7f20426f6e6420436f75706f6e20280000000000000000000000000000000000009083019081528351613cd181600e84016020880161300e565b7f2900000000000000000000000000000000000000000000000000000000000000600e9290910191820152600f01949350505050565b805160208083015191908110156127495760001960209190910360031b1b16919050565b60008351613d3d81846020880161300e565b7f2d435000000000000000000000000000000000000000000000000000000000009083019081528351613d7781600384016020880161300e565b01600301949350505050565b600060208284031215613d9557600080fd5b8151612c8b816138e0565b60006001600160a01b03808716835280861660208401525060806040830152613dcc6080830185613816565b8281036060840152613c318185613032565b8181038181111561037a5761037a6137c8565b634e487b7160e01b600052603260045260246000fd5b60006101006001600160a01b0389168352613e476020840189805180516001600160a01b0316835260209081015161ffff16818401520151604090910152565b806080840152613e5981840188613816565b905082810360a0840152613e6d8187613816565b60c0840195909552505060e00152949350505050565b6001600160a01b038716815261ffff8616602082015267ffffffffffffffff8516604082015283606082015260ff8316608082015260c060a08201526000613ece60c0830184613032565b98975050505050505050565b60008151808452602080850194506020840160005b8381101561386b57815187529582019590820190600101613eef565b60006001600160a01b03808816835260a06020840152613f2e60a0840188613eda565b8381036040850152613f408188613eda565b905081861660608501528381036080850152613f5c8186613032565b9998505050505050505050565b60008351613f7b81846020880161300e565b835190830190613f8f81836020880161300e565b01949350505050565b60008251613faa81846020870161300e565b919091019291505056fea2646970667358221220213be9db5d3f41b395596888f5560307534b442d171fe6609d06318d1901139364736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintToInt(uint256)": [
        {
          "details": "An uint value doesn't fit in an int of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/DepositController.sol:DepositController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "contracts/DepositController.sol:DepositController",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11164,
        "contract": "contracts/DepositController.sol:DepositController",
        "label": "_locked",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9290,
        "contract": "contracts/DepositController.sol:DepositController",
        "label": "_couponMarkets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
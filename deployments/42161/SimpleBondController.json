{
  "address": "0x2EA069EB48De599BBd490a07A2Ea9BD9730F7475",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bondPositionManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "couponManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "couponWrapper_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValueTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC20PermitParams",
          "name": "tokenPermitParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermitSignature",
          "name": "positionPermitParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermitSignature",
          "name": "couponPermitParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "Epoch",
          "name": "expiredWith",
          "type": "uint16"
        }
      ],
      "name": "adjust",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC20PermitParams",
          "name": "tokenPermitParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermitSignature",
          "name": "positionPermitParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermitSignature",
          "name": "couponPermitParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "Epoch",
          "name": "expiredWith",
          "type": "uint16"
        }
      ],
      "name": "adjustAndWrapCoupons",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC20PermitParams",
          "name": "permitParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "Epoch",
          "name": "expiredWith",
          "type": "uint16"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC20PermitParams",
          "name": "permitParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "Epoch",
          "name": "expiredWith",
          "type": "uint16"
        }
      ],
      "name": "mintAndWrapCoupons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "positionLockAcquired",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawLostToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4befc71421f190a4f1c10bd10553e5c401bd5c5f46526f7fbb736e24ec8a582d",
  "receipt": {
    "to": null,
    "from": "0x1f88547fc4E1dC1a924AEaaDE65108EEb9DdEEd4",
    "contractAddress": "0x2EA069EB48De599BBd490a07A2Ea9BD9730F7475",
    "transactionIndex": 3,
    "gasUsed": "29032751",
    "logsBloom": "0x
    "blockHash": "0x6d0a9e9ab0bba731ced5f8c7bafbf3da555e21c06888f8a1073cc2aa331eeeef",
    "transactionHash": "0x4befc71421f190a4f1c10bd10553e5c401bd5c5f46526f7fbb736e24ec8a582d",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 153264540,
        "transactionHash": "0x4befc71421f190a4f1c10bd10553e5c401bd5c5f46526f7fbb736e24ec8a582d",
        "address": "0x2EA069EB48De599BBd490a07A2Ea9BD9730F7475",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001689fd73ffc888d47d201b72b0ae7a83c20fa274"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6d0a9e9ab0bba731ced5f8c7bafbf3da555e21c06888f8a1073cc2aa331eeeef"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 153264540,
        "transactionHash": "0x4befc71421f190a4f1c10bd10553e5c401bd5c5f46526f7fbb736e24ec8a582d",
        "address": "0x8bbcA766D175aDbffB073832262990df1c5ef748",
        "topics": [
          "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
          "0x0000000000000000000000002ea069eb48de599bbd490a07a2ea9bd9730f7475",
          "0x000000000000000000000000c5577988cc8a49ecf6a48c8e84717e481e3bf57b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x6d0a9e9ab0bba731ced5f8c7bafbf3da555e21c06888f8a1073cc2aa331eeeef"
      }
    ],
    "blockNumber": 153264540,
    "cumulativeGasUsed": "32426506",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0x0Cf91Bc7a67B063142C029a69fF9C8ccd93476E2",
    "0x8bbcA766D175aDbffB073832262990df1c5ef748",
    "0xc5577988Cc8A49ecF6A48c8e84717E481E3bF57b",
    "0x1689FD73FfC888d47D201b72B0ae7A83c20fA274"
  ],
  "numDeployments": 1,
  "solcInputHash": "6ee56211a49e2a040139762a5247a157",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondPositionManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"couponManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"couponWrapper_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValueTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC20PermitParams\",\"name\":\"tokenPermitParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"positionPermitParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"couponPermitParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint16\"}],\"name\":\"adjust\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC20PermitParams\",\"name\":\"tokenPermitParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"positionPermitParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"couponPermitParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint16\"}],\"name\":\"adjustAndWrapCoupons\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC20PermitParams\",\"name\":\"permitParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC20PermitParams\",\"name\":\"permitParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint16\"}],\"name\":\"mintAndWrapCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"positionLockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawLostToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleBondController.sol\":\"SimpleBondController\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/SimpleBondController.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nimport {ISimpleBondController} from \\\"./interfaces/ISimpleBondController.sol\\\";\\nimport {IPositionLocker} from \\\"./interfaces/IPositionLocker.sol\\\";\\nimport {ICouponManager} from \\\"./interfaces/ICouponManager.sol\\\";\\nimport {IBondPositionManager} from \\\"./interfaces/IBondPositionManager.sol\\\";\\nimport {ICouponWrapper} from \\\"./interfaces/ICouponWrapper.sol\\\";\\nimport {ISubstitute} from \\\"./interfaces/ISubstitute.sol\\\";\\nimport {Epoch} from \\\"./libraries/Epoch.sol\\\";\\nimport {Coupon} from \\\"./libraries/Coupon.sol\\\";\\nimport {Wrapped1155MetadataBuilder} from \\\"./libraries/Wrapped1155MetadataBuilder.sol\\\";\\nimport {PermitParamsLibrary, ERC20PermitParams, PermitSignature} from \\\"./libraries/PermitParams.sol\\\";\\nimport {SubstituteLibrary} from \\\"./libraries/Substitute.sol\\\";\\nimport {IWETH9} from \\\"./external/weth/IWETH9.sol\\\";\\n\\ncontract SimpleBondController is IPositionLocker, ERC1155Holder, ISimpleBondController, Ownable2Step {\\n    using SubstituteLibrary for ISubstitute;\\n    using PermitParamsLibrary for *;\\n    using SafeERC20 for IERC20;\\n\\n    IWETH9 private immutable _weth;\\n    IBondPositionManager private immutable _bondPositionManager;\\n    ICouponManager private immutable _couponManager;\\n    ICouponWrapper private immutable _couponWrapper;\\n\\n    constructor(\\n        address weth_,\\n        address bondPositionManager_,\\n        address couponManager_,\\n        address couponWrapper_,\\n        address owner_\\n    ) Ownable(owner_) {\\n        _weth = IWETH9(weth_);\\n        _bondPositionManager = IBondPositionManager(bondPositionManager_);\\n        _couponManager = ICouponManager(couponManager_);\\n        _couponWrapper = ICouponWrapper(couponWrapper_);\\n        _couponManager.setApprovalForAll(address(_couponWrapper), true);\\n    }\\n\\n    modifier wrapETH() {\\n        if (address(this).balance > 0) _weth.deposit{value: address(this).balance}();\\n        _;\\n    }\\n\\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory result) {\\n        if (msg.sender != address(_bondPositionManager)) revert InvalidAccess();\\n        (address user, uint256 tokenId, uint256 amount, Epoch expiredWith, bool wrapCoupons, address asset) =\\n            abi.decode(data, (address, uint256, uint256, Epoch, bool, address));\\n        if (tokenId == 0) {\\n            tokenId = _bondPositionManager.mint(asset);\\n            result = abi.encode(tokenId);\\n        }\\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta) =\\n            _bondPositionManager.adjustPosition(tokenId, amount, expiredWith);\\n        if (amountDelta > 0) {\\n            ISubstitute(asset).ensureThisBalance(user, uint256(amountDelta));\\n            IERC20(asset).approve(address(_bondPositionManager), uint256(amountDelta));\\n            _bondPositionManager.depositToken(address(asset), uint256(amountDelta));\\n        } else if (amountDelta < 0) {\\n            _bondPositionManager.withdrawToken(asset, address(this), uint256(-amountDelta));\\n            ISubstitute(asset).burn(uint256(-amountDelta), user);\\n        }\\n        if (couponsToMint.length > 0) {\\n            if (wrapCoupons) {\\n                _bondPositionManager.mintCoupons(couponsToMint, address(this), \\\"\\\");\\n                _couponWrapper.wrap(couponsToMint, user);\\n            } else {\\n                _bondPositionManager.mintCoupons(couponsToMint, user, \\\"\\\");\\n            }\\n        }\\n        if (couponsToBurn.length > 0) {\\n            _couponManager.safeBatchTransferFrom(user, address(this), couponsToBurn, \\\"\\\");\\n            _bondPositionManager.burnCoupons(couponsToBurn);\\n        }\\n\\n        _bondPositionManager.settlePosition(tokenId);\\n    }\\n\\n    function mint(ERC20PermitParams calldata permitParams, address asset, uint256 amount, Epoch expiredWith)\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        return _mint(permitParams, asset, amount, expiredWith, false);\\n    }\\n\\n    function mintAndWrapCoupons(\\n        ERC20PermitParams calldata permitParams,\\n        address asset,\\n        uint256 amount,\\n        Epoch expiredWith\\n    ) external payable returns (uint256) {\\n        return _mint(permitParams, asset, amount, expiredWith, true);\\n    }\\n\\n    function _mint(\\n        ERC20PermitParams calldata permitParams,\\n        address asset,\\n        uint256 amount,\\n        Epoch expiredWith,\\n        bool wrapCoupons\\n    ) internal wrapETH returns (uint256 positionId) {\\n        address underlyingToken = ISubstitute(asset).underlyingToken();\\n        permitParams.tryPermit(underlyingToken, msg.sender, address(this));\\n        bytes memory result =\\n            _bondPositionManager.lock(abi.encode(msg.sender, 0, amount, expiredWith, wrapCoupons, asset));\\n        positionId = abi.decode(result, (uint256));\\n        _bondPositionManager.transferFrom(address(this), msg.sender, positionId);\\n    }\\n\\n    function adjust(\\n        ERC20PermitParams calldata tokenPermitParams,\\n        PermitSignature calldata positionPermitParams,\\n        PermitSignature calldata couponPermitParams,\\n        uint256 tokenId,\\n        uint256 amount,\\n        Epoch expiredWith\\n    ) external payable {\\n        _adjust(tokenPermitParams, positionPermitParams, couponPermitParams, tokenId, amount, expiredWith, false);\\n    }\\n\\n    function adjustAndWrapCoupons(\\n        ERC20PermitParams calldata tokenPermitParams,\\n        PermitSignature calldata positionPermitParams,\\n        PermitSignature calldata couponPermitParams,\\n        uint256 tokenId,\\n        uint256 amount,\\n        Epoch expiredWith\\n    ) external payable {\\n        _adjust(tokenPermitParams, positionPermitParams, couponPermitParams, tokenId, amount, expiredWith, true);\\n    }\\n\\n    function _adjust(\\n        ERC20PermitParams calldata tokenPermitParams,\\n        PermitSignature calldata positionPermitParams,\\n        PermitSignature calldata couponPermitParams,\\n        uint256 tokenId,\\n        uint256 amount,\\n        Epoch expiredWith,\\n        bool wrapCoupons\\n    ) internal wrapETH {\\n        positionPermitParams.tryPermitERC721(_bondPositionManager, tokenId, address(this));\\n        couponPermitParams.tryPermitERC1155(_couponManager, msg.sender, address(this), true);\\n        address asset = _bondPositionManager.getPosition(tokenId).asset;\\n        address underlyingToken = ISubstitute(asset).underlyingToken();\\n        tokenPermitParams.tryPermit(underlyingToken, msg.sender, address(this));\\n\\n        _bondPositionManager.lock(abi.encode(msg.sender, tokenId, amount, expiredWith, wrapCoupons, asset));\\n    }\\n\\n    function withdrawLostToken(address token, address to) external onlyOwner {\\n        IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x2fe67a7a2ce15169ec6bc01e4759d3dd1e4c826c845f601b647b16bc6e514cf4\",\"license\":\"-\"},\"contracts/external/weth/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IWETH9 is IERC20Metadata {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x2ee71d25c3fbf9b954291eb2c76b1149fc9cf6456944019adbb6b051ff1bda11\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBondPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPositionManagerTypes, IPositionManager} from \\\"./IPositionManager.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {BondPosition} from \\\"../libraries/BondPosition.sol\\\";\\n\\ninterface IBondPositionManagerTypes is IPositionManagerTypes {\\n    event RegisterAsset(address indexed asset);\\n    event UpdatePosition(uint256 indexed tokenId, uint256 amount, Epoch expiredWith);\\n\\n    error InvalidAccess();\\n    error UnregisteredAsset();\\n    error InvalidEpoch();\\n    error AlreadyExpired();\\n}\\n\\ninterface IBondPositionManager is IBondPositionManagerTypes, IPositionManager {\\n    // View Functions //\\n    function MAX_EPOCH() external view returns (Epoch maxEpoch);\\n\\n    function getPosition(uint256 tokenId) external view returns (BondPosition memory);\\n\\n    function isAssetRegistered(address asset) external view returns (bool);\\n\\n    // User Functions //\\n    function mint(address asset) external returns (uint256 positionId);\\n\\n    function adjustPosition(uint256 tokenId, uint256 amount, Epoch expiredWith)\\n        external\\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta);\\n\\n    // Admin Functions //\\n    function registerAsset(address asset) external;\\n}\\n\",\"keccak256\":\"0x93fcf3de7bd65f9c90ac79f87cd160d86b185d955032a35170e365e36dcd9e7f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICouponManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {IERC1155Permit} from \\\"./IERC1155Permit.sol\\\";\\n\\ninterface ICouponManager is IERC1155MetadataURI, IERC1155Permit {\\n    error InvalidAccess();\\n\\n    // View Functions //\\n    function isMinter(address account) external view returns (bool);\\n\\n    function currentEpoch() external view returns (Epoch);\\n\\n    function epochEndTime(Epoch epoch) external pure returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function exists(uint256 id) external view returns (bool);\\n\\n    // User Functions\\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external;\\n\\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external;\\n\\n    // Admin Functions //\\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external;\\n\\n    function burnBatch(address user, Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0x3d9b688ee858ec954505c293318a3a2f546d1d3a416ce4b998b32565e93e4696\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICouponWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC20PermitParams, PermitSignature} from \\\"../libraries/PermitParams.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\n\\ninterface ICouponWrapper {\\n    function getWrappedCoupon(CouponKey calldata couponKey) external view returns (address wrappedCoupon);\\n\\n    function getWrappedCoupons(CouponKey[] calldata couponKeys)\\n        external\\n        view\\n        returns (address[] memory wrappedCoupons);\\n\\n    function buildMetadata(CouponKey calldata couponKey) external view returns (bytes memory metadata);\\n\\n    function buildBatchMetadata(CouponKey[] calldata couponKeys) external view returns (bytes memory metadata);\\n\\n    function wrap(Coupon[] calldata coupons, address recipient) external;\\n\\n    function wrapWithPermit(\\n        PermitSignature calldata couponPermitSignature,\\n        Coupon[] calldata coupons,\\n        address recipient\\n    ) external;\\n\\n    function unwrap(Coupon[] calldata coupons, address recipient) external;\\n}\\n\",\"keccak256\":\"0xf234de765024376055268020b0577b2bd5742f2e996c51434ab57325b7bfb9ab\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC1155Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IERC1155Permit is IERC1155 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address owner, address operator, bool approved, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe282b9a0962aaa2d952ab82ee224ecaf918e1e572b8a5bc21ad23f044ce99844\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6970e2181dc25efdcd17b3df6ff9be05bfdc421d9cdb691976c4621e8e0aaae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPositionLocker {\\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x884c5b53d68aa13b4e81affe68958aceb335ce59cf4b46cebbba6524cdbfe728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\n\\ninterface IPositionManagerTypes {\\n    error LockedBy(address locker);\\n    error NotSettled();\\n}\\n\\ninterface IPositionManager is IERC721Metadata, IERC721Permit, IPositionManagerTypes {\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function nextId() external view returns (uint256);\\n\\n    function assetPool() external view returns (address);\\n\\n    function lockData() external view returns (uint128, uint128);\\n\\n    function assetDelta(address locker, uint256 assetId) external view returns (int256);\\n\\n    function lock(bytes calldata data) external returns (bytes memory);\\n\\n    function settlePosition(uint256 positionId) external;\\n\\n    function withdrawToken(address token, address to, uint256 amount) external;\\n\\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external;\\n\\n    function depositToken(address token, uint256 amount) external;\\n\\n    function burnCoupons(Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0xf4e8029d7b7f2be9318bb10e9e0a184b0d47954d37bf9d2cdbca6560d076ac40\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISimpleBondController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {ERC20PermitParams, PermitSignature} from \\\"../libraries/PermitParams.sol\\\";\\n\\ninterface ISimpleBondController is IERC1155Receiver {\\n    error InvalidAccess();\\n    error InvalidValueTransfer();\\n\\n    function mint(ERC20PermitParams calldata permitParams, address asset, uint256 amount, Epoch expiredWith)\\n        external\\n        payable\\n        returns (uint256 positionId);\\n\\n    function mintAndWrapCoupons(\\n        ERC20PermitParams calldata permitParams,\\n        address asset,\\n        uint256 amount,\\n        Epoch expiredWith\\n    ) external payable returns (uint256 positionId);\\n\\n    function adjust(\\n        ERC20PermitParams calldata tokenPermitParams,\\n        PermitSignature calldata positionPermitParams,\\n        PermitSignature calldata couponPermitParams,\\n        uint256 tokenId,\\n        uint256 amount,\\n        Epoch expiredWith\\n    ) external payable;\\n\\n    function adjustAndWrapCoupons(\\n        ERC20PermitParams calldata tokenPermitParams,\\n        PermitSignature calldata positionPermitParams,\\n        PermitSignature calldata couponPermitParams,\\n        uint256 tokenId,\\n        uint256 amount,\\n        Epoch expiredWith\\n    ) external payable;\\n\\n    function withdrawLostToken(address token, address to) external;\\n}\\n\",\"keccak256\":\"0x4ad475d9432d35394e6f4b5f09d870a893083c5defe57b8aa7054415017f9c9e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISubstitute.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISubstitute {\\n    event SetTreasury(address indexed newTreasury);\\n    event Claim(address indexed treasury, uint256 adminYield);\\n\\n    error InvalidToken();\\n    error ValueTransferFailed();\\n\\n    function treasury() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function mint(uint256 amount, address to) external;\\n\\n    function burn(uint256 amount, address to) external;\\n\\n    function claim() external;\\n\\n    function mintableAmount() external view returns (uint256);\\n\\n    function burnableAmount() external view returns (uint256);\\n\\n    function setTreasury(address newTreasury) external;\\n\\n    function withdrawLostToken(address token, address recipient) external;\\n}\\n\",\"keccak256\":\"0xa6d6ff8684f2d6b02d5a1a249a48bb07d39333f68e4d93e64ed551f4bdbf93f1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/BondPosition.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {Epoch, EpochLibrary} from \\\"./Epoch.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\n\\nstruct BondPosition {\\n    address asset;\\n    uint64 nonce;\\n    Epoch expiredWith;\\n    bool isSettled;\\n    uint256 amount;\\n}\\n\\nlibrary BondPositionLibrary {\\n    error UnmatchedPosition();\\n    error InvalidPositionEpoch();\\n\\n    using EpochLibrary for Epoch;\\n\\n    function getAndIncrementNonce(BondPosition storage positionStorage) internal returns (uint64 nonce) {\\n        nonce = positionStorage.nonce++;\\n    }\\n\\n    function calculateCouponRequirement(BondPosition memory oldPosition, BondPosition memory newPosition)\\n        internal\\n        view\\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\\n    {\\n        if (!(oldPosition.asset == newPosition.asset && oldPosition.nonce == newPosition.nonce)) {\\n            revert UnmatchedPosition();\\n        }\\n\\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\\n            revert InvalidPositionEpoch();\\n        }\\n        uint256 mintCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\\n        uint256 burnCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\\n        unchecked {\\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\\n            if (newPosition.amount > oldPosition.amount) {\\n                burnCouponsLength -= minCount;\\n            } else if (newPosition.amount < oldPosition.amount) {\\n                mintCouponsLength -= minCount;\\n            } else {\\n                mintCouponsLength -= minCount;\\n                burnCouponsLength -= minCount;\\n            }\\n        }\\n\\n        mintCoupons = new Coupon[](mintCouponsLength);\\n        burnCoupons = new Coupon[](burnCouponsLength);\\n        mintCouponsLength = 0;\\n        burnCouponsLength = 0;\\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\\n        unchecked {\\n            Epoch epoch = latestExpiredEpoch;\\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\\n                epoch = epoch.add(1);\\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.amount;\\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.amount;\\n                if (newAmount > oldAmount) {\\n                    mintCoupons[mintCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.asset, epoch, newAmount - oldAmount);\\n                } else if (newAmount < oldAmount) {\\n                    burnCoupons[burnCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.asset, epoch, oldAmount - newAmount);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60e2ea29125ab192c6aab14634795641e8fee2d6ead1ccd2499aa8e1a73b6daa\",\"license\":\"-\"},\"contracts/libraries/Coupon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\n\\nstruct Coupon {\\n    CouponKey key;\\n    uint256 amount;\\n}\\n\\nlibrary CouponLibrary {\\n    using CouponKeyLibrary for CouponKey;\\n\\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\\n    }\\n\\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: couponKey, amount: amount});\\n    }\\n\\n    function id(Coupon memory coupon) internal pure returns (uint256) {\\n        return coupon.key.toId();\\n    }\\n}\\n\",\"keccak256\":\"0xe3bd591859541e734e6b18f7c742efff2ea320805345b8dcf9597ea3e778d076\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CouponKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nstruct CouponKey {\\n    address asset;\\n    Epoch epoch;\\n}\\n\\nlibrary CouponKeyLibrary {\\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\\n        uint16 epoch = Epoch.unwrap(key.epoch);\\n        address asset = key.asset;\\n        assembly {\\n            id := add(asset, shl(160, epoch))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90d6688cd9d666140bf81ed569d5c41174cb89e06f108568a591b1cab2a1371b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\ntype Epoch is uint16;\\n\\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==, ne as !=} for Epoch global;\\n\\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\\n}\\n\\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\\n}\\n\\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\\n}\\n\\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\\n}\\n\\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\\n}\\n\\nfunction ne(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) != Epoch.unwrap(b);\\n}\\n\\nlibrary EpochLibrary {\\n    using EpochLibrary for Epoch;\\n\\n    error EpochOverflow();\\n\\n    uint256 internal constant MONTHS_PER_EPOCH = 1;\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function startTime(Epoch epoch) internal pure returns (uint256) {\\n        uint16 currentEpoch = Epoch.unwrap(epoch);\\n        if (currentEpoch == 0) return 0;\\n        unchecked {\\n            return _epochToTimestamp(currentEpoch - 1) + 1;\\n        }\\n    }\\n\\n    function endTime(Epoch epoch) internal pure returns (uint256) {\\n        return _epochToTimestamp(Epoch.unwrap(epoch));\\n    }\\n\\n    function lastExpiredEpoch() internal view returns (Epoch) {\\n        return current().sub(1);\\n    }\\n\\n    function current() internal view returns (Epoch) {\\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\\n    }\\n\\n    function add(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\\n    }\\n\\n    function sub(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\\n    }\\n\\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint16) {\\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\\n    }\\n\\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\\n        return a > b ? a : b;\\n    }\\n\\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint16) {\\n        unchecked {\\n            uint256 _days = timestamp / SECONDS_PER_DAY;\\n            int256 __days = int256(_days);\\n\\n            int256 L = __days + 68569 + OFFSET19700101;\\n            int256 N = (4 * L) / 146097;\\n            L = L - (146097 * N + 3) / 4;\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\n            L = L - (1461 * _year) / 4 + 31;\\n            int256 _month = (80 * L) / 2447;\\n            L = _month / 11;\\n            _month = _month + 2 - 12 * L;\\n            _year = 100 * (N - 49) + _year + L;\\n\\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\\n            if (epoch > type(uint16).max) revert EpochOverflow();\\n            return uint16(epoch);\\n        }\\n    }\\n\\n    function _epochToTimestamp(uint16 epoch) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\\n            uint256 year = months / 12 + 1970;\\n            months = (months % 12) << 4;\\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\\n            } else {\\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\\n            }\\n            return (\\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\\n            ) * SECONDS_PER_DAY - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cd1bac5f8222900e18564e78b008420877383d46684e9c79b926b5cf4a7535b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/PermitParams.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {IERC721Permit} from \\\"../interfaces/IERC721Permit.sol\\\";\\nimport {IERC1155Permit} from \\\"../interfaces/IERC1155Permit.sol\\\";\\n\\nstruct ERC20PermitParams {\\n    uint256 permitAmount;\\n    PermitSignature signature;\\n}\\n\\nstruct PermitSignature {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\nlibrary PermitParamsLibrary {\\n    error PermitFailed();\\n\\n    function tryPermit(ERC20PermitParams memory params, address token, address from, address to)\\n        internal\\n        returns (bool)\\n    {\\n        if (params.signature.deadline > 0) {\\n            try IERC20Permit(token).permit(\\n                from,\\n                to,\\n                params.permitAmount,\\n                params.signature.deadline,\\n                params.signature.v,\\n                params.signature.r,\\n                params.signature.s\\n            ) {\\n                return true;\\n            } catch {}\\n        }\\n        return false;\\n    }\\n\\n    function tryPermitERC721(PermitSignature memory params, IERC721Permit token, uint256 positionId, address to)\\n        internal\\n        returns (bool)\\n    {\\n        if (params.deadline > 0) {\\n            try token.permit(to, positionId, params.deadline, params.v, params.r, params.s) {\\n                return true;\\n            } catch {}\\n        }\\n        return false;\\n    }\\n\\n    function tryPermitERC1155(\\n        PermitSignature memory params,\\n        IERC1155Permit token,\\n        address from,\\n        address to,\\n        bool approved\\n    ) internal returns (bool) {\\n        if (params.deadline > 0) {\\n            try token.permit(from, to, approved, params.deadline, params.v, params.r, params.s) {\\n                return true;\\n            } catch {}\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x1074f497c8e675ed59658663de3e63248cfd348887258e2ebe5f629ae08663b6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Substitute.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ISubstitute} from \\\"../interfaces/ISubstitute.sol\\\";\\n\\nlibrary SubstituteLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    function ensureThisBalance(ISubstitute substitute, address payer, uint256 amount) internal {\\n        uint256 balance = IERC20(address(substitute)).balanceOf(address(this));\\n        if (balance >= amount) {\\n            return;\\n        }\\n        unchecked {\\n            amount -= balance;\\n        }\\n\\n        address underlyingToken = substitute.underlyingToken();\\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\\n        if (underlyingBalance < amount) {\\n            IERC20(underlyingToken).safeTransferFrom(payer, address(this), amount - underlyingBalance);\\n        }\\n        IERC20(underlyingToken).approve(address(substitute), amount);\\n        substitute.mint(amount, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xaebe06775718b813a3d13edf78e50a01f23a18662eec4d7b584eaf25013f6f94\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Wrapped1155MetadataBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {CouponKey} from \\\"./CouponKey.sol\\\";\\nimport {Coupon} from \\\"./Coupon.sol\\\";\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nlibrary Wrapped1155MetadataBuilder {\\n    function buildWrapped1155Metadata(CouponKey memory couponKey) internal view returns (bytes memory) {\\n        string memory tokenSymbol = IERC20Metadata(couponKey.asset).symbol();\\n        string memory epochString = Strings.toString(Epoch.unwrap(couponKey.epoch));\\n        // @dev assume that tokenSymbol.length <= 12\\n        bytes32 nameData = bytes32(abi.encodePacked(tokenSymbol, \\\" Bond Coupon (\\\", epochString, \\\")\\\"));\\n        bytes32 symbolData = bytes32(abi.encodePacked(tokenSymbol, \\\"-CP\\\", epochString));\\n        assembly {\\n            let addLength := mul(2, add(mload(tokenSymbol), mload(epochString)))\\n            nameData := add(nameData, add(30, addLength))\\n            symbolData := add(symbolData, add(6, addLength))\\n        }\\n        return abi.encodePacked(nameData, symbolData, bytes1(IERC20Metadata(couponKey.asset).decimals()));\\n    }\\n\\n    function buildWrapped1155BatchMetadata(CouponKey[] memory couponKeys) internal view returns (bytes memory data) {\\n        unchecked {\\n            for (uint256 i = 0; i < couponKeys.length; ++i) {\\n                data = bytes.concat(data, buildWrapped1155Metadata(couponKeys[i]));\\n            }\\n        }\\n    }\\n\\n    function buildWrapped1155BatchMetadata(Coupon[] memory coupons) internal view returns (bytes memory data) {\\n        unchecked {\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                data = bytes.concat(data, buildWrapped1155Metadata(coupons[i].key));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce795dcb5c1eb1d54d5b2e0066626f198fb08fce14a12f654f72e59082b5ddff\",\"license\":\"-\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200280038038062002800833981016040819052620000359162000184565b806001600160a01b0381166200006557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200007081620000f9565b506001600160a01b0385811660805284811660a05283811660c081905290831660e081905260405163a22cb46560e01b815260048101919091526001602482015263a22cb46590604401600060405180830381600087803b158015620000d557600080fd5b505af1158015620000ea573d6000803e3d6000fd5b505050505050505050620001f4565b600180546001600160a01b0319169055620001148162000117565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200017f57600080fd5b919050565b600080600080600060a086880312156200019d57600080fd5b620001a88662000167565b9450620001b86020870162000167565b9350620001c86040870162000167565b9250620001d86060870162000167565b9150620001e86080870162000167565b90509295509295909350565b60805160a05160c05160e0516125626200029e6000396000610944015260008181610a6c01526113b1015260008181610404015281816104ba0152818161059d015281816106480152818161070401528181610778015281816108ad015281816109cb01528181610b0501528181610b9e01528181610f2301528181611013015281816113730152818161141f015261154f015260008181610def01526112fb01526125626000f3fe6080604052600436106100dd5760003560e01c806379ba50971161007f578063c497f29d11610059578063c497f29d14610242578063e30c397814610255578063f23a6e6114610273578063f2fde38b146102b857600080fd5b806379ba5097146101c25780638da5cb5b146101d7578063bc197c811461020957600080fd5b80631dc778d3116100bb5780631dc778d31461015a57806346a114e21461016d5780634f2c530b1461019a578063715018a6146101ad57600080fd5b806301ffc9a7146100e257806304cb499b146101175780631c31ae5f14610139575b600080fd5b3480156100ee57600080fd5b506101026100fd366004611adc565b6102d8565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b50610137610132366004611b1b565b610341565b005b61014c610147366004611b7c565b6103cc565b60405190815260200161010e565b61014c610168366004611b7c565b6103e7565b34801561017957600080fd5b5061018d610188366004611bcf565b6103f7565b60405161010e9190611c65565b6101376101a8366004611caa565b610c11565b3480156101b957600080fd5b50610137610c29565b3480156101ce57600080fd5b50610137610c3d565b3480156101e357600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b34801561021557600080fd5b50610229610224366004611e98565b610c86565b6040516001600160e01b0319909116815260200161010e565b610137610250366004611caa565b610cb1565b34801561026157600080fd5b506001546001600160a01b03166101f1565b34801561027f57600080fd5b5061022961028e366004611f46565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156102c457600080fd5b506101376102d3366004611faf565b610cc1565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061033b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b610349610d3f565b6040516370a0823160e01b81523060048201526103c89082906001600160a01b038516906370a0823190602401602060405180830381865afa158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190611fcc565b6001600160a01b0385169190610d6c565b5050565b60006103dc858585856000610de5565b90505b949350505050565b60006103dc858585856001610de5565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461045b576040517fc0185c6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808080808061046e888a018a611ff3565b9550955095509550955095508460000361054e576040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a627842906024016020604051808303816000875af1158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105279190611fcc565b94508460405160200161053c91815260200190565b60405160208183030381529060405296505b6040517f7c6af77d000000000000000000000000000000000000000000000000000000008152600481018690526024810185905261ffff84166044820152600090819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637c6af77d906064016000604051808303816000875af11580156105e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261060e9190810190612117565b9250925092506000811315610765576106316001600160a01b0385168a83611082565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905285169063095ea7b3906044016020604051808303816000875af11580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190612184565b506040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063338b5dea90604401600060405180830381600087803b15801561074857600080fd5b505af115801561075c573d6000803e3d6000fd5b50505050610889565b6000811215610889576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166301e3366785306107a8856121b7565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156107f757600080fd5b505af115801561080b573d6000803e3d6000fd5b50505050836001600160a01b031663fcd3533c82610828906121b7565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b038c166024820152604401600060405180830381600087803b15801561087057600080fd5b505af1158015610884573d6000803e3d6000fd5b505050505b825115610a355784156109b4576040516365ae584760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae5847906108e4908690309060040161224c565b600060405180830381600087803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b50506040517f34b408750000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506334b40875915061097d9086908d90600401612288565b600060405180830381600087803b15801561099757600080fd5b505af11580156109ab573d6000803e3d6000fd5b50505050610a35565b6040516365ae584760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae584790610a029086908d9060040161224c565b600060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b505050505b815115610b6f576040517fa50e72320000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a50e723290610aa5908c90309087906004016122b3565b600060405180830381600087803b158015610abf57600080fd5b505af1158015610ad3573d6000803e3d6000fd5b50506040517fe6ee95e20000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063e6ee95e29150610b3c9085906004016122fa565b600060405180830381600087803b158015610b5657600080fd5b505af1158015610b6a573d6000803e3d6000fd5b505050505b6040517faba5b4b3000000000000000000000000000000000000000000000000000000008152600481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aba5b4b390602401600060405180830381600087803b158015610bea57600080fd5b505af1158015610bfe573d6000803e3d6000fd5b5050505050505050505050505092915050565b610c2186868686868660006112f3565b505050505050565b610c31610d3f565b610c3b60006115eb565b565b60015433906001600160a01b03168114610c7a5760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610c83816115eb565b50565b7fbc197c81000000000000000000000000000000000000000000000000000000005b95945050505050565b610c2186868686868660016112f3565b610cc9610d3f565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199091168117909155610d076000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000546001600160a01b03163314610c3b5760405163118cdaa760e01b8152336004820152602401610c71565b6040516001600160a01b03838116602483015260448201839052610de091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611611565b505050565b60004715610e62577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e4857600080fd5b505af1158015610e5c573d6000803e3d6000fd5b50505050505b6000856001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec6919061230d565b9050610ee5813330610edd368c90038c018c61239f565b92919061168d565b506040805133602082015260009181018290526060810187905261ffff8616608082015284151560a08201526001600160a01b0388811660c08301527f0000000000000000000000000000000000000000000000000000000000000000169063815483199060e0016040516020818303038152906040526040518263ffffffff1660e01b8152600401610f789190611c65565b6000604051808303816000875af1158015610f97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fbf91908101906123d6565b905080806020019051810190610fd59190611fcc565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018290529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401600060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b50505050505095945050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ed9190611fcc565b90508181106110fc5750505050565b80820391506000846001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611141573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611165919061230d565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d39190611fcc565b9050838110156111fe576111fe85306111ec8488612444565b6001600160a01b03861692919061176a565b60405163095ea7b360e01b81526001600160a01b0387811660048301526024820186905283169063095ea7b3906044016020604051808303816000875af115801561124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112719190612184565b506040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018590523060248201526001600160a01b038716906394bf804d90604401600060405180830381600087803b1580156112d357600080fd5b505af11580156112e7573d6000803e3d6000fd5b50505050505050505050565b471561136e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561135457600080fd5b505af1158015611368573d6000803e3d6000fd5b50505050505b6113ab7f000000000000000000000000000000000000000000000000000000000000000085306113a3368b90038b018b612457565b9291906117a9565b506113ec7f0000000000000000000000000000000000000000000000000000000000000000333060016113e3368b90038b018b612457565b9392919061182f565b506040517feb02c301000000000000000000000000000000000000000000000000000000008152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160a060405180830381865afa15801561146e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114929190612473565b6000015190506000816001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc919061230d565b9050611513813330610edd368e90038e018e61239f565b50604080513360208201529081018790526060810186905261ffff8516608082015283151560a08201526001600160a01b0383811660c08301527f0000000000000000000000000000000000000000000000000000000000000000169063815483199060e0016040516020818303038152906040526040518263ffffffff1660e01b81526004016115a49190611c65565b6000604051808303816000875af11580156115c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112e791908101906123d6565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055610c83816118fd565b60006116266001600160a01b0384168361195a565b9050805160001415801561164b5750808060200190518101906116499190612184565b155b15610de0576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610c71565b6020840151516000901561175f57845160208087015180519181015160408083015160609093015190517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301526044820196909652606481019490945260ff909116608484015260a483019190915260c48201529085169063d505accf9060e4015b600060405180830381600087803b15801561174157600080fd5b505af1925050508015611752575060015b1561175f575060016103df565b506000949350505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526117a39186918216906323b872dd90608401610d99565b50505050565b83516000901561175f5784516020860151604080880151606089015191517f7ac2ff7b0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201899052604482019590955260ff9093166064840152608483015260a482015290851690637ac2ff7b9060c401611727565b8451600090156118f1578551602087015160408089015160608a015191517ff51cc7dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301528715156044830152606482019590955260ff909316608484015260a483015260c48201529086169063f51cc7dd9060e401600060405180830381600087803b1580156118d357600080fd5b505af19250505080156118e4575060015b156118f157506001610ca8565b50600095945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606119688383600061196f565b9392505050565b6060814710156119ad576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610c71565b600080856001600160a01b031684866040516119c99190612510565b60006040518083038185875af1925050503d8060008114611a06576040519150601f19603f3d011682016040523d82523d6000602084013e611a0b565b606091505b5091509150611a1b868383611a25565b9695505050505050565b606082611a3a57611a3582611a9a565b611968565b8151158015611a5157506001600160a01b0384163b155b15611a93576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610c71565b5080611968565b805115611aaa5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215611aee57600080fd5b81356001600160e01b03198116811461196857600080fd5b6001600160a01b0381168114610c8357600080fd5b60008060408385031215611b2e57600080fd5b8235611b3981611b06565b91506020830135611b4981611b06565b809150509250929050565b600060a08284031215611b6657600080fd5b50919050565b61ffff81168114610c8357600080fd5b6000806000806101008587031215611b9357600080fd5b611b9d8686611b54565b935060a0850135611bad81611b06565b925060c0850135915060e0850135611bc481611b6c565b939692955090935050565b60008060208385031215611be257600080fd5b823567ffffffffffffffff80821115611bfa57600080fd5b818501915085601f830112611c0e57600080fd5b813581811115611c1d57600080fd5b866020828501011115611c2f57600080fd5b60209290920196919550909350505050565b60005b83811015611c5c578181015183820152602001611c44565b50506000910152565b6020815260008251806020840152611c84816040850160208701611c41565b601f01601f19169190910160400192915050565b600060808284031215611b6657600080fd5b6000806000806000806102008789031215611cc457600080fd5b611cce8888611b54565b9550611cdd8860a08901611c98565b9450611ced886101208901611c98565b93506101a087013592506101c087013591506101e0870135611d0e81611b6c565b809150509295509295509295565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d5557611d55611d1c565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d8457611d84611d1c565b604052919050565b600067ffffffffffffffff821115611da657611da6611d1c565b5060051b60200190565b600082601f830112611dc157600080fd5b81356020611dd6611dd183611d8c565b611d5b565b8083825260208201915060208460051b870101935086841115611df857600080fd5b602086015b84811015611e145780358352918301918301611dfd565b509695505050505050565b600067ffffffffffffffff821115611e3957611e39611d1c565b50601f01601f191660200190565b600082601f830112611e5857600080fd5b8135611e66611dd182611e1f565b818152846020838601011115611e7b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611eb057600080fd5b8535611ebb81611b06565b94506020860135611ecb81611b06565b9350604086013567ffffffffffffffff80821115611ee857600080fd5b611ef489838a01611db0565b94506060880135915080821115611f0a57600080fd5b611f1689838a01611db0565b93506080880135915080821115611f2c57600080fd5b50611f3988828901611e47565b9150509295509295909350565b600080600080600060a08688031215611f5e57600080fd5b8535611f6981611b06565b94506020860135611f7981611b06565b93506040860135925060608601359150608086013567ffffffffffffffff811115611fa357600080fd5b611f3988828901611e47565b600060208284031215611fc157600080fd5b813561196881611b06565b600060208284031215611fde57600080fd5b5051919050565b8015158114610c8357600080fd5b60008060008060008060c0878903121561200c57600080fd5b863561201781611b06565b95506020870135945060408701359350606087013561203581611b6c565b9250608087013561204581611fe5565b915060a0870135611d0e81611b06565b600082601f83011261206657600080fd5b81516020612076611dd183611d8c565b8281526060928302850182019282820191908785111561209557600080fd5b8387015b8581101561210a57808903828112156120b25760008081fd5b6120ba611d32565b6040808312156120ca5760008081fd5b6120d2611d32565b925083516120df81611b06565b8352838801516120ee81611b6c565b8389015291815290820151818701528452928401928101612099565b5090979650505050505050565b60008060006060848603121561212c57600080fd5b835167ffffffffffffffff8082111561214457600080fd5b61215087838801612055565b9450602086015191508082111561216657600080fd5b5061217386828701612055565b925050604084015190509250925092565b60006020828403121561219657600080fd5b815161196881611fe5565b634e487b7160e01b600052601160045260246000fd5b60007f800000000000000000000000000000000000000000000000000000000000000082036121e8576121e86121a1565b5060000390565b600081518084526020808501945080840160005b83811015612241578151805180516001600160a01b0316895284015161ffff1684890152830151604088015260609096019590820190600101612203565b509495945050505050565b60608152600061225f60608301856121ef565b6001600160a01b0384166020840152828103604084015260008152602081019150509392505050565b60408152600061229b60408301856121ef565b90506001600160a01b03831660208301529392505050565b60006001600160a01b038086168352808516602084015250608060408301526122df60808301846121ef565b82810360608401526000815260208101915050949350505050565b60208152600061196860208301846121ef565b60006020828403121561231f57600080fd5b815161196881611b06565b60006080828403121561233c57600080fd5b6040516080810181811067ffffffffffffffff8211171561235f5761235f611d1c565b60405282358152905080602083013560ff8116811461237d57600080fd5b8060208301525060408301356040820152606083013560608201525092915050565b600060a082840312156123b157600080fd5b6123b9611d32565b823581526123ca846020850161232a565b60208201529392505050565b6000602082840312156123e857600080fd5b815167ffffffffffffffff8111156123ff57600080fd5b8201601f8101841361241057600080fd5b805161241e611dd182611e1f565b81815285602083850101111561243357600080fd5b610ca8826020830160208601611c41565b8181038181111561033b5761033b6121a1565b60006080828403121561246957600080fd5b611968838361232a565b600060a0828403121561248557600080fd5b60405160a0810167ffffffffffffffff82821081831117156124a9576124a9611d1c565b81604052845191506124ba82611b06565b90825260208401519080821682146124d157600080fd5b50602082015260408301516124e581611b6c565b604082015260608301516124f881611fe5565b60608201526080928301519281019290925250919050565b60008251612522818460208701611c41565b919091019291505056fea264697066735822122097b0f912e265c27999a170d9a8c27ca0626455ce28cc5d045cd97c0b0acb489164736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806379ba50971161007f578063c497f29d11610059578063c497f29d14610242578063e30c397814610255578063f23a6e6114610273578063f2fde38b146102b857600080fd5b806379ba5097146101c25780638da5cb5b146101d7578063bc197c811461020957600080fd5b80631dc778d3116100bb5780631dc778d31461015a57806346a114e21461016d5780634f2c530b1461019a578063715018a6146101ad57600080fd5b806301ffc9a7146100e257806304cb499b146101175780631c31ae5f14610139575b600080fd5b3480156100ee57600080fd5b506101026100fd366004611adc565b6102d8565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b50610137610132366004611b1b565b610341565b005b61014c610147366004611b7c565b6103cc565b60405190815260200161010e565b61014c610168366004611b7c565b6103e7565b34801561017957600080fd5b5061018d610188366004611bcf565b6103f7565b60405161010e9190611c65565b6101376101a8366004611caa565b610c11565b3480156101b957600080fd5b50610137610c29565b3480156101ce57600080fd5b50610137610c3d565b3480156101e357600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b34801561021557600080fd5b50610229610224366004611e98565b610c86565b6040516001600160e01b0319909116815260200161010e565b610137610250366004611caa565b610cb1565b34801561026157600080fd5b506001546001600160a01b03166101f1565b34801561027f57600080fd5b5061022961028e366004611f46565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156102c457600080fd5b506101376102d3366004611faf565b610cc1565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061033b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b610349610d3f565b6040516370a0823160e01b81523060048201526103c89082906001600160a01b038516906370a0823190602401602060405180830381865afa158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190611fcc565b6001600160a01b0385169190610d6c565b5050565b60006103dc858585856000610de5565b90505b949350505050565b60006103dc858585856001610de5565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461045b576040517fc0185c6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808080808061046e888a018a611ff3565b9550955095509550955095508460000361054e576040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a627842906024016020604051808303816000875af1158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105279190611fcc565b94508460405160200161053c91815260200190565b60405160208183030381529060405296505b6040517f7c6af77d000000000000000000000000000000000000000000000000000000008152600481018690526024810185905261ffff84166044820152600090819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637c6af77d906064016000604051808303816000875af11580156105e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261060e9190810190612117565b9250925092506000811315610765576106316001600160a01b0385168a83611082565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905285169063095ea7b3906044016020604051808303816000875af11580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190612184565b506040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063338b5dea90604401600060405180830381600087803b15801561074857600080fd5b505af115801561075c573d6000803e3d6000fd5b50505050610889565b6000811215610889576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166301e3366785306107a8856121b7565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156107f757600080fd5b505af115801561080b573d6000803e3d6000fd5b50505050836001600160a01b031663fcd3533c82610828906121b7565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b038c166024820152604401600060405180830381600087803b15801561087057600080fd5b505af1158015610884573d6000803e3d6000fd5b505050505b825115610a355784156109b4576040516365ae584760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae5847906108e4908690309060040161224c565b600060405180830381600087803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b50506040517f34b408750000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506334b40875915061097d9086908d90600401612288565b600060405180830381600087803b15801561099757600080fd5b505af11580156109ab573d6000803e3d6000fd5b50505050610a35565b6040516365ae584760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae584790610a029086908d9060040161224c565b600060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b505050505b815115610b6f576040517fa50e72320000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a50e723290610aa5908c90309087906004016122b3565b600060405180830381600087803b158015610abf57600080fd5b505af1158015610ad3573d6000803e3d6000fd5b50506040517fe6ee95e20000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063e6ee95e29150610b3c9085906004016122fa565b600060405180830381600087803b158015610b5657600080fd5b505af1158015610b6a573d6000803e3d6000fd5b505050505b6040517faba5b4b3000000000000000000000000000000000000000000000000000000008152600481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aba5b4b390602401600060405180830381600087803b158015610bea57600080fd5b505af1158015610bfe573d6000803e3d6000fd5b5050505050505050505050505092915050565b610c2186868686868660006112f3565b505050505050565b610c31610d3f565b610c3b60006115eb565b565b60015433906001600160a01b03168114610c7a5760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610c83816115eb565b50565b7fbc197c81000000000000000000000000000000000000000000000000000000005b95945050505050565b610c2186868686868660016112f3565b610cc9610d3f565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199091168117909155610d076000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000546001600160a01b03163314610c3b5760405163118cdaa760e01b8152336004820152602401610c71565b6040516001600160a01b03838116602483015260448201839052610de091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611611565b505050565b60004715610e62577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e4857600080fd5b505af1158015610e5c573d6000803e3d6000fd5b50505050505b6000856001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec6919061230d565b9050610ee5813330610edd368c90038c018c61239f565b92919061168d565b506040805133602082015260009181018290526060810187905261ffff8616608082015284151560a08201526001600160a01b0388811660c08301527f0000000000000000000000000000000000000000000000000000000000000000169063815483199060e0016040516020818303038152906040526040518263ffffffff1660e01b8152600401610f789190611c65565b6000604051808303816000875af1158015610f97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fbf91908101906123d6565b905080806020019051810190610fd59190611fcc565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018290529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401600060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b50505050505095945050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ed9190611fcc565b90508181106110fc5750505050565b80820391506000846001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611141573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611165919061230d565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d39190611fcc565b9050838110156111fe576111fe85306111ec8488612444565b6001600160a01b03861692919061176a565b60405163095ea7b360e01b81526001600160a01b0387811660048301526024820186905283169063095ea7b3906044016020604051808303816000875af115801561124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112719190612184565b506040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018590523060248201526001600160a01b038716906394bf804d90604401600060405180830381600087803b1580156112d357600080fd5b505af11580156112e7573d6000803e3d6000fd5b50505050505050505050565b471561136e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561135457600080fd5b505af1158015611368573d6000803e3d6000fd5b50505050505b6113ab7f000000000000000000000000000000000000000000000000000000000000000085306113a3368b90038b018b612457565b9291906117a9565b506113ec7f0000000000000000000000000000000000000000000000000000000000000000333060016113e3368b90038b018b612457565b9392919061182f565b506040517feb02c301000000000000000000000000000000000000000000000000000000008152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160a060405180830381865afa15801561146e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114929190612473565b6000015190506000816001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc919061230d565b9050611513813330610edd368e90038e018e61239f565b50604080513360208201529081018790526060810186905261ffff8516608082015283151560a08201526001600160a01b0383811660c08301527f0000000000000000000000000000000000000000000000000000000000000000169063815483199060e0016040516020818303038152906040526040518263ffffffff1660e01b81526004016115a49190611c65565b6000604051808303816000875af11580156115c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112e791908101906123d6565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055610c83816118fd565b60006116266001600160a01b0384168361195a565b9050805160001415801561164b5750808060200190518101906116499190612184565b155b15610de0576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610c71565b6020840151516000901561175f57845160208087015180519181015160408083015160609093015190517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301526044820196909652606481019490945260ff909116608484015260a483019190915260c48201529085169063d505accf9060e4015b600060405180830381600087803b15801561174157600080fd5b505af1925050508015611752575060015b1561175f575060016103df565b506000949350505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526117a39186918216906323b872dd90608401610d99565b50505050565b83516000901561175f5784516020860151604080880151606089015191517f7ac2ff7b0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201899052604482019590955260ff9093166064840152608483015260a482015290851690637ac2ff7b9060c401611727565b8451600090156118f1578551602087015160408089015160608a015191517ff51cc7dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301528715156044830152606482019590955260ff909316608484015260a483015260c48201529086169063f51cc7dd9060e401600060405180830381600087803b1580156118d357600080fd5b505af19250505080156118e4575060015b156118f157506001610ca8565b50600095945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606119688383600061196f565b9392505050565b6060814710156119ad576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610c71565b600080856001600160a01b031684866040516119c99190612510565b60006040518083038185875af1925050503d8060008114611a06576040519150601f19603f3d011682016040523d82523d6000602084013e611a0b565b606091505b5091509150611a1b868383611a25565b9695505050505050565b606082611a3a57611a3582611a9a565b611968565b8151158015611a5157506001600160a01b0384163b155b15611a93576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610c71565b5080611968565b805115611aaa5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215611aee57600080fd5b81356001600160e01b03198116811461196857600080fd5b6001600160a01b0381168114610c8357600080fd5b60008060408385031215611b2e57600080fd5b8235611b3981611b06565b91506020830135611b4981611b06565b809150509250929050565b600060a08284031215611b6657600080fd5b50919050565b61ffff81168114610c8357600080fd5b6000806000806101008587031215611b9357600080fd5b611b9d8686611b54565b935060a0850135611bad81611b06565b925060c0850135915060e0850135611bc481611b6c565b939692955090935050565b60008060208385031215611be257600080fd5b823567ffffffffffffffff80821115611bfa57600080fd5b818501915085601f830112611c0e57600080fd5b813581811115611c1d57600080fd5b866020828501011115611c2f57600080fd5b60209290920196919550909350505050565b60005b83811015611c5c578181015183820152602001611c44565b50506000910152565b6020815260008251806020840152611c84816040850160208701611c41565b601f01601f19169190910160400192915050565b600060808284031215611b6657600080fd5b6000806000806000806102008789031215611cc457600080fd5b611cce8888611b54565b9550611cdd8860a08901611c98565b9450611ced886101208901611c98565b93506101a087013592506101c087013591506101e0870135611d0e81611b6c565b809150509295509295509295565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d5557611d55611d1c565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d8457611d84611d1c565b604052919050565b600067ffffffffffffffff821115611da657611da6611d1c565b5060051b60200190565b600082601f830112611dc157600080fd5b81356020611dd6611dd183611d8c565b611d5b565b8083825260208201915060208460051b870101935086841115611df857600080fd5b602086015b84811015611e145780358352918301918301611dfd565b509695505050505050565b600067ffffffffffffffff821115611e3957611e39611d1c565b50601f01601f191660200190565b600082601f830112611e5857600080fd5b8135611e66611dd182611e1f565b818152846020838601011115611e7b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611eb057600080fd5b8535611ebb81611b06565b94506020860135611ecb81611b06565b9350604086013567ffffffffffffffff80821115611ee857600080fd5b611ef489838a01611db0565b94506060880135915080821115611f0a57600080fd5b611f1689838a01611db0565b93506080880135915080821115611f2c57600080fd5b50611f3988828901611e47565b9150509295509295909350565b600080600080600060a08688031215611f5e57600080fd5b8535611f6981611b06565b94506020860135611f7981611b06565b93506040860135925060608601359150608086013567ffffffffffffffff811115611fa357600080fd5b611f3988828901611e47565b600060208284031215611fc157600080fd5b813561196881611b06565b600060208284031215611fde57600080fd5b5051919050565b8015158114610c8357600080fd5b60008060008060008060c0878903121561200c57600080fd5b863561201781611b06565b95506020870135945060408701359350606087013561203581611b6c565b9250608087013561204581611fe5565b915060a0870135611d0e81611b06565b600082601f83011261206657600080fd5b81516020612076611dd183611d8c565b8281526060928302850182019282820191908785111561209557600080fd5b8387015b8581101561210a57808903828112156120b25760008081fd5b6120ba611d32565b6040808312156120ca5760008081fd5b6120d2611d32565b925083516120df81611b06565b8352838801516120ee81611b6c565b8389015291815290820151818701528452928401928101612099565b5090979650505050505050565b60008060006060848603121561212c57600080fd5b835167ffffffffffffffff8082111561214457600080fd5b61215087838801612055565b9450602086015191508082111561216657600080fd5b5061217386828701612055565b925050604084015190509250925092565b60006020828403121561219657600080fd5b815161196881611fe5565b634e487b7160e01b600052601160045260246000fd5b60007f800000000000000000000000000000000000000000000000000000000000000082036121e8576121e86121a1565b5060000390565b600081518084526020808501945080840160005b83811015612241578151805180516001600160a01b0316895284015161ffff1684890152830151604088015260609096019590820190600101612203565b509495945050505050565b60608152600061225f60608301856121ef565b6001600160a01b0384166020840152828103604084015260008152602081019150509392505050565b60408152600061229b60408301856121ef565b90506001600160a01b03831660208301529392505050565b60006001600160a01b038086168352808516602084015250608060408301526122df60808301846121ef565b82810360608401526000815260208101915050949350505050565b60208152600061196860208301846121ef565b60006020828403121561231f57600080fd5b815161196881611b06565b60006080828403121561233c57600080fd5b6040516080810181811067ffffffffffffffff8211171561235f5761235f611d1c565b60405282358152905080602083013560ff8116811461237d57600080fd5b8060208301525060408301356040820152606083013560608201525092915050565b600060a082840312156123b157600080fd5b6123b9611d32565b823581526123ca846020850161232a565b60208201529392505050565b6000602082840312156123e857600080fd5b815167ffffffffffffffff8111156123ff57600080fd5b8201601f8101841361241057600080fd5b805161241e611dd182611e1f565b81815285602083850101111561243357600080fd5b610ca8826020830160208601611c41565b8181038181111561033b5761033b6121a1565b60006080828403121561246957600080fd5b611968838361232a565b600060a0828403121561248557600080fd5b60405160a0810167ffffffffffffffff82821081831117156124a9576124a9611d1c565b81604052845191506124ba82611b06565b90825260208401519080821682146124d157600080fd5b50602082015260408301516124e581611b6c565b604082015260608301516124f881611fe5565b60608201526080928301519281019290925250919050565b60008251612522818460208701611c41565b919091019291505056fea264697066735822122097b0f912e265c27999a170d9a8c27ca0626455ce28cc5d045cd97c0b0acb489164736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SimpleBondController.sol:SimpleBondController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "contracts/SimpleBondController.sol:SimpleBondController",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}